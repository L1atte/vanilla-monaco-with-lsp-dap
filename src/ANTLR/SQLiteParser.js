// @ts-nocheck
// Generated from SQLiteParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from "antlr4";
import SQLiteParserListener from "./SQLiteParserListener.ts";
const serializedATN = [
    4, 1, 193, 2084, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2,
    14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2,
    28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
    42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2,
    56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2,
    70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2,
    84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2,
    98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7,
    110, 1, 0, 5, 0, 224, 8, 0, 10, 0, 12, 0, 227, 9, 0, 1, 0, 1, 0, 1, 1, 5, 1, 232, 8, 1, 10, 1, 12, 1, 235, 9, 1, 1, 1, 1, 1, 4, 1, 239, 8, 1, 11, 1, 12, 1, 240, 1, 1, 5, 1, 244, 8, 1, 10, 1, 12, 1,
    247, 9, 1, 1, 1, 5, 1, 250, 8, 1, 10, 1, 12, 1, 253, 9, 1, 1, 2, 1, 2, 1, 2, 3, 2, 258, 8, 2, 3, 2, 260, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
    2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 286, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 293, 8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 300, 8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3,
    306, 8, 3, 1, 3, 1, 3, 3, 3, 310, 8, 3, 1, 3, 1, 3, 1, 3, 3, 3, 315, 8, 3, 1, 3, 3, 3, 318, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 325, 8, 4, 1, 4, 3, 4, 328, 8, 4, 1, 5, 1, 5, 3, 5, 332, 8, 5,
    1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 3, 6, 340, 8, 6, 1, 6, 1, 6, 3, 6, 344, 8, 6, 3, 6, 346, 8, 6, 1, 7, 1, 7, 3, 7, 350, 8, 7, 1, 8, 1, 8, 3, 8, 354, 8, 8, 1, 8, 1, 8, 3, 8, 358, 8, 8, 1, 8, 3, 8,
    361, 8, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 3, 10, 368, 8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 3, 11, 374, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 380, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 385, 8, 11, 1,
    11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 394, 8, 11, 10, 11, 12, 11, 397, 9, 11, 1, 11, 1, 11, 1, 11, 3, 11, 402, 8, 11, 1, 12, 1, 12, 3, 12, 406, 8, 12, 1, 12, 1, 12, 3, 12, 410, 8, 12,
    1, 12, 3, 12, 413, 8, 12, 1, 13, 1, 13, 3, 13, 417, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 423, 8, 13, 1, 13, 1, 13, 1, 13, 3, 13, 428, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 435, 8,
    13, 10, 13, 12, 13, 438, 9, 13, 1, 13, 1, 13, 5, 13, 442, 8, 13, 10, 13, 12, 13, 445, 9, 13, 1, 13, 1, 13, 1, 13, 3, 13, 450, 8, 13, 1, 13, 1, 13, 3, 13, 454, 8, 13, 1, 14, 1, 14, 3, 14, 458, 8, 14,
    1, 14, 5, 14, 461, 8, 14, 10, 14, 12, 14, 464, 9, 14, 1, 15, 4, 15, 467, 8, 15, 11, 15, 12, 15, 468, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 481, 8, 15, 1, 16,
    1, 16, 3, 16, 485, 8, 16, 1, 16, 1, 16, 1, 16, 3, 16, 490, 8, 16, 1, 16, 3, 16, 493, 8, 16, 1, 16, 3, 16, 496, 8, 16, 1, 16, 3, 16, 499, 8, 16, 1, 16, 1, 16, 3, 16, 503, 8, 16, 1, 16, 3, 16, 506, 8,
    16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 520, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 527, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3,
    16, 534, 8, 16, 3, 16, 536, 8, 16, 1, 17, 3, 17, 539, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 3, 18, 545, 8, 18, 1, 18, 1, 18, 1, 18, 3, 18, 550, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 5, 18, 556, 8, 18, 10,
    18, 12, 18, 559, 9, 18, 1, 18, 1, 18, 3, 18, 563, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 5, 18, 576, 8, 18, 10, 18, 12, 18, 579, 9, 18, 1, 18, 1, 18, 1,
    18, 3, 18, 584, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 592, 8, 19, 10, 19, 12, 19, 595, 9, 19, 1, 19, 1, 19, 3, 19, 599, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
    19, 3, 19, 609, 8, 19, 1, 19, 1, 19, 5, 19, 613, 8, 19, 10, 19, 12, 19, 616, 9, 19, 1, 19, 3, 19, 619, 8, 19, 1, 19, 1, 19, 1, 19, 3, 19, 624, 8, 19, 3, 19, 626, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20,
    1, 21, 1, 21, 3, 21, 634, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 640, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21, 645, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 652, 8, 21, 1, 21, 1, 21, 1, 21, 1,
    21, 1, 21, 1, 21, 1, 21, 5, 21, 661, 8, 21, 10, 21, 12, 21, 664, 9, 21, 3, 21, 666, 8, 21, 3, 21, 668, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 675, 8, 21, 1, 21, 1, 21, 3, 21, 679, 8, 21,
    1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 686, 8, 21, 1, 21, 1, 21, 4, 21, 690, 8, 21, 11, 21, 12, 21, 691, 1, 21, 1, 21, 1, 22, 1, 22, 3, 22, 698, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 704, 8,
    22, 1, 22, 1, 22, 1, 22, 3, 22, 709, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 716, 8, 22, 10, 22, 12, 22, 719, 9, 22, 1, 22, 1, 22, 3, 22, 723, 8, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1,
    23, 1, 23, 1, 23, 1, 23, 3, 23, 734, 8, 23, 1, 23, 1, 23, 1, 23, 3, 23, 739, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 5, 23, 748, 8, 23, 10, 23, 12, 23, 751, 9, 23, 1, 23, 1, 23, 3,
    23, 755, 8, 23, 1, 24, 1, 24, 3, 24, 759, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 773, 8, 24, 10, 24, 12, 24, 776, 9, 24, 1, 25, 1, 25, 1,
    25, 1, 25, 1, 25, 5, 25, 783, 8, 25, 10, 25, 12, 25, 786, 9, 25, 1, 25, 1, 25, 3, 25, 790, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 798, 8, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1,
    27, 1, 27, 1, 27, 5, 27, 808, 8, 27, 10, 27, 12, 27, 811, 9, 27, 1, 27, 1, 27, 3, 27, 815, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 3, 28, 823, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3,
    28, 830, 8, 28, 1, 28, 3, 28, 833, 8, 28, 1, 29, 3, 29, 836, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 843, 8, 29, 1, 29, 3, 29, 846, 8, 29, 1, 29, 3, 29, 849, 8, 29, 1, 29, 3, 29, 852, 8,
    29, 1, 30, 1, 30, 3, 30, 856, 8, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 864, 8, 31, 1, 31, 1, 31, 1, 31, 3, 31, 869, 8, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3,
    32, 879, 8, 32, 1, 32, 1, 32, 1, 32, 3, 32, 884, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 893, 8, 32, 1, 32, 1, 32, 1, 32, 5, 32, 898, 8, 32, 10, 32, 12, 32, 901, 9, 32, 1, 32,
    3, 32, 904, 8, 32, 1, 32, 1, 32, 3, 32, 908, 8, 32, 1, 32, 3, 32, 911, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 917, 8, 32, 10, 32, 12, 32, 920, 9, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
    32, 1, 32, 1, 32, 1, 32, 3, 32, 932, 8, 32, 1, 32, 3, 32, 935, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 943, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 4, 32, 950, 8, 32, 11, 32, 12,
    32, 951, 1, 32, 1, 32, 3, 32, 956, 8, 32, 1, 32, 1, 32, 1, 32, 3, 32, 961, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
    32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 991, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1003, 8, 32, 1, 32,
    1, 32, 1, 32, 3, 32, 1008, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1020, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1026, 8, 32, 1, 32, 1, 32, 1, 32, 1,
    32, 1, 32, 3, 32, 1033, 8, 32, 1, 32, 1, 32, 3, 32, 1037, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 1045, 8, 32, 10, 32, 12, 32, 1048, 9, 32, 3, 32, 1050, 8, 32, 1, 32, 1, 32, 1, 32,
    1, 32, 3, 32, 1056, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1062, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 1069, 8, 32, 10, 32, 12, 32, 1072, 9, 32, 3, 32, 1074, 8, 32, 1, 32, 1, 32, 3,
    32, 1078, 8, 32, 5, 32, 1080, 8, 32, 10, 32, 12, 32, 1083, 9, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 1091, 8, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 3, 35, 1098, 8, 35, 1, 35, 1, 35,
    1, 35, 1, 35, 1, 35, 3, 35, 1105, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1111, 8, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1116, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 1122, 8, 35, 10, 35, 12, 35,
    1125, 9, 35, 1, 35, 1, 35, 3, 35, 1129, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 1136, 8, 35, 10, 35, 12, 35, 1139, 9, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 1147, 8, 35, 10,
    35, 12, 35, 1150, 9, 35, 1, 35, 1, 35, 5, 35, 1154, 8, 35, 10, 35, 12, 35, 1157, 9, 35, 1, 35, 3, 35, 1160, 8, 35, 1, 35, 3, 35, 1163, 8, 35, 1, 35, 1, 35, 3, 35, 1167, 8, 35, 1, 35, 3, 35, 1170, 8,
    35, 1, 36, 1, 36, 1, 36, 1, 36, 5, 36, 1176, 8, 36, 10, 36, 12, 36, 1179, 9, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 1187, 8, 37, 10, 37, 12, 37, 1190, 9, 37, 1, 37, 1, 37, 1, 37, 3,
    37, 1195, 8, 37, 3, 37, 1197, 8, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1205, 8, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1212, 8, 37, 1, 37, 1, 37, 1, 37, 5, 37, 1217, 8, 37, 10,
    37, 12, 37, 1220, 9, 37, 1, 37, 1, 37, 3, 37, 1224, 8, 37, 3, 37, 1226, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1232, 8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1241, 8, 38, 1,
    39, 1, 39, 1, 39, 3, 39, 1246, 8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 1253, 8, 40, 1, 40, 1, 40, 3, 40, 1257, 8, 40, 3, 40, 1259, 8, 40, 1, 41, 3, 41, 1262, 8, 41, 1, 41, 1, 41, 1, 41, 1,
    41, 5, 41, 1268, 8, 41, 10, 41, 12, 41, 1271, 9, 41, 1, 41, 3, 41, 1274, 8, 41, 1, 41, 3, 41, 1277, 8, 41, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 1283, 8, 42, 5, 42, 1285, 8, 42, 10, 42, 12, 42, 1288,
    9, 42, 1, 43, 1, 43, 3, 43, 1292, 8, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1297, 8, 43, 10, 43, 12, 43, 1300, 9, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1306, 8, 43, 10, 43, 12, 43, 1309, 9, 43, 1, 43, 3,
    43, 1312, 8, 43, 3, 43, 1314, 8, 43, 1, 43, 1, 43, 3, 43, 1318, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1325, 8, 43, 10, 43, 12, 43, 1328, 9, 43, 1, 43, 1, 43, 3, 43, 1332, 8, 43, 3, 43,
    1334, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1345, 8, 43, 10, 43, 12, 43, 1348, 9, 43, 3, 43, 1350, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1357, 8,
    43, 10, 43, 12, 43, 1360, 9, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1368, 8, 43, 10, 43, 12, 43, 1371, 9, 43, 1, 43, 1, 43, 5, 43, 1375, 8, 43, 10, 43, 12, 43, 1378, 9, 43, 3, 43,
    1380, 8, 43, 1, 44, 1, 44, 1, 45, 3, 45, 1385, 8, 45, 1, 45, 1, 45, 3, 45, 1389, 8, 45, 1, 45, 3, 45, 1392, 8, 45, 1, 46, 3, 46, 1395, 8, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1400, 8, 46, 1, 46, 1, 46,
    3, 46, 1404, 8, 46, 1, 46, 4, 46, 1407, 8, 46, 11, 46, 12, 46, 1408, 1, 46, 3, 46, 1412, 8, 46, 1, 46, 3, 46, 1415, 8, 46, 1, 47, 1, 47, 1, 47, 3, 47, 1420, 8, 47, 1, 47, 1, 47, 3, 47, 1424, 8, 47,
    1, 47, 3, 47, 1427, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1434, 8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1439, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 5, 47, 1446, 8, 47, 10, 47, 12, 47,
    1449, 9, 47, 1, 47, 1, 47, 3, 47, 1453, 8, 47, 1, 47, 3, 47, 1456, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 5, 47, 1462, 8, 47, 10, 47, 12, 47, 1465, 9, 47, 1, 47, 3, 47, 1468, 8, 47, 1, 47, 1, 47, 1, 47,
    1, 47, 1, 47, 1, 47, 3, 47, 1476, 8, 47, 1, 47, 3, 47, 1479, 8, 47, 3, 47, 1481, 8, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 1490, 8, 48, 1, 48, 3, 48, 1493, 8, 48, 3, 48, 1495,
    8, 48, 1, 49, 1, 49, 3, 49, 1499, 8, 49, 1, 49, 1, 49, 3, 49, 1503, 8, 49, 1, 49, 1, 49, 3, 49, 1507, 8, 49, 1, 49, 3, 49, 1510, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 5, 50, 1519,
    8, 50, 10, 50, 12, 50, 1522, 9, 50, 1, 50, 1, 50, 3, 50, 1526, 8, 50, 1, 51, 1, 51, 3, 51, 1530, 8, 51, 1, 51, 1, 51, 3, 51, 1534, 8, 51, 1, 52, 3, 52, 1537, 8, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1542,
    8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1548, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1555, 8, 52, 1, 52, 1, 52, 1, 52, 5, 52, 1560, 8, 52, 10, 52, 12, 52, 1563, 9, 52, 1, 52, 1, 52, 1,
    52, 1, 52, 5, 52, 1569, 8, 52, 10, 52, 12, 52, 1572, 9, 52, 1, 52, 3, 52, 1575, 8, 52, 3, 52, 1577, 8, 52, 1, 52, 1, 52, 3, 52, 1581, 8, 52, 1, 52, 3, 52, 1584, 8, 52, 1, 53, 1, 53, 1, 53, 1, 53, 5,
    53, 1590, 8, 53, 10, 53, 12, 53, 1593, 9, 53, 1, 53, 1, 53, 1, 54, 3, 54, 1598, 8, 54, 1, 54, 1, 54, 1, 54, 3, 54, 1603, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 1609, 8, 54, 1, 54, 1, 54, 1, 54,
    1, 54, 1, 54, 3, 54, 1616, 8, 54, 1, 54, 1, 54, 1, 54, 5, 54, 1621, 8, 54, 10, 54, 12, 54, 1624, 9, 54, 1, 54, 1, 54, 3, 54, 1628, 8, 54, 1, 54, 3, 54, 1631, 8, 54, 1, 54, 3, 54, 1634, 8, 54, 1, 54,
    3, 54, 1637, 8, 54, 1, 55, 1, 55, 1, 55, 3, 55, 1642, 8, 55, 1, 55, 1, 55, 1, 55, 3, 55, 1647, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 1654, 8, 55, 1, 56, 1, 56, 3, 56, 1658, 8, 56, 1, 56,
    1, 56, 3, 56, 1662, 8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 3, 58, 1672, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 5, 58, 1679, 8, 58, 10, 58, 12, 58, 1682, 9, 58, 3, 58,
    1684, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 5, 58, 1691, 8, 58, 10, 58, 12, 58, 1694, 9, 58, 1, 58, 3, 58, 1697, 8, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1705, 8, 59, 1, 59, 1,
    59, 1, 59, 1, 59, 1, 59, 5, 59, 1712, 8, 59, 10, 59, 12, 59, 1715, 9, 59, 3, 59, 1717, 8, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 1724, 8, 59, 10, 59, 12, 59, 1727, 9, 59, 3, 59, 1729, 8, 59,
    1, 59, 3, 59, 1732, 8, 59, 1, 59, 3, 59, 1735, 8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 1745, 8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1754, 8, 61,
    1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 1761, 8, 62, 10, 62, 12, 62, 1764, 9, 62, 1, 62, 3, 62, 1767, 8, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 3, 63, 1774, 8, 63, 1, 63, 1, 63, 1, 63, 5, 63,
    1779, 8, 63, 10, 63, 12, 63, 1782, 9, 63, 1, 63, 3, 63, 1785, 8, 63, 1, 63, 1, 63, 3, 63, 1789, 8, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 1796, 8, 64, 10, 64, 12, 64, 1799, 9, 64, 1, 64, 3,
    64, 1802, 8, 64, 1, 64, 1, 64, 3, 64, 1806, 8, 64, 1, 64, 1, 64, 1, 64, 3, 64, 1811, 8, 64, 1, 65, 1, 65, 3, 65, 1815, 8, 65, 1, 65, 1, 65, 1, 65, 5, 65, 1820, 8, 65, 10, 65, 12, 65, 1823, 9, 65, 1,
    66, 1, 66, 1, 66, 1, 66, 1, 66, 5, 66, 1830, 8, 66, 10, 66, 12, 66, 1833, 9, 66, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 1839, 8, 67, 1, 68, 1, 68, 1, 68, 3, 68, 1844, 8, 68, 1, 68, 3, 68, 1847, 8, 68,
    1, 68, 1, 68, 3, 68, 1851, 8, 68, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 1865, 8, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1,
    71, 1, 71, 3, 71, 1877, 8, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1886, 8, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1895, 8, 73, 1, 73, 1, 73, 3, 73, 1899, 8,
    73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1909, 8, 73, 1, 73, 3, 73, 1912, 8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1921, 8, 73, 1, 73, 1, 73, 1, 73,
    1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1930, 8, 73, 1, 73, 3, 73, 1933, 8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1939, 8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1,
    73, 1, 73, 3, 73, 1953, 8, 73, 1, 73, 1, 73, 3, 73, 1957, 8, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1968, 8, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1973, 8, 73, 1, 74, 1,
    74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 4, 76, 1984, 8, 76, 11, 76, 12, 76, 1985, 1, 77, 1, 77, 1, 77, 4, 77, 1991, 8, 77, 11, 77, 12, 77, 1992, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1,
    79, 3, 79, 2001, 8, 79, 1, 79, 1, 79, 1, 79, 3, 79, 2006, 8, 79, 5, 79, 2008, 8, 79, 10, 79, 12, 79, 2011, 9, 79, 1, 80, 1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 3, 84, 2023,
    8, 84, 1, 85, 1, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1, 91, 1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 94, 1, 94, 1, 95, 1, 95, 1, 96, 1, 96, 1, 97, 1, 97, 1, 98, 1,
    98, 1, 99, 1, 99, 1, 100, 1, 100, 1, 101, 1, 101, 1, 102, 1, 102, 1, 103, 1, 103, 1, 104, 1, 104, 1, 105, 1, 105, 1, 106, 1, 106, 1, 107, 1, 107, 1, 108, 1, 108, 1, 109, 1, 109, 1, 110, 1, 110, 1,
    110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2082, 8, 110, 1, 110, 2, 436, 468, 1, 64, 111, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
    56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
    144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 0,
    28, 3, 0, 58, 58, 69, 69, 82, 82, 2, 0, 47, 47, 66, 66, 1, 0, 133, 134, 2, 0, 146, 146, 171, 171, 1, 0, 8, 9, 2, 0, 59, 59, 141, 141, 2, 0, 56, 56, 104, 104, 2, 0, 58, 58, 82, 82, 5, 0, 25, 25, 72,
    72, 81, 81, 122, 122, 126, 126, 4, 0, 84, 84, 132, 132, 138, 138, 145, 145, 2, 0, 7, 7, 12, 13, 1, 0, 14, 17, 1, 0, 18, 21, 4, 0, 77, 77, 97, 97, 99, 99, 118, 118, 3, 0, 25, 25, 72, 72, 126, 126, 5,
    0, 52, 54, 104, 104, 172, 173, 186, 186, 188, 189, 2, 0, 29, 29, 62, 62, 3, 0, 128, 128, 154, 154, 179, 179, 2, 0, 5, 5, 106, 106, 1, 0, 176, 177, 2, 0, 34, 34, 60, 60, 2, 0, 151, 151, 162, 162, 2,
    0, 159, 159, 166, 166, 2, 0, 160, 160, 167, 168, 2, 0, 161, 161, 163, 163, 2, 0, 8, 10, 102, 102, 2, 0, 185, 185, 188, 188, 2, 0, 25, 123, 125, 180, 2372, 0, 225, 1, 0, 0, 0, 2, 233, 1, 0, 0, 0, 4,
    259, 1, 0, 0, 0, 6, 287, 1, 0, 0, 0, 8, 319, 1, 0, 0, 0, 10, 329, 1, 0, 0, 0, 12, 337, 1, 0, 0, 0, 14, 347, 1, 0, 0, 0, 16, 351, 1, 0, 0, 0, 18, 362, 1, 0, 0, 0, 20, 365, 1, 0, 0, 0, 22, 371, 1, 0,
    0, 0, 24, 405, 1, 0, 0, 0, 26, 414, 1, 0, 0, 0, 28, 455, 1, 0, 0, 0, 30, 466, 1, 0, 0, 0, 32, 484, 1, 0, 0, 0, 34, 538, 1, 0, 0, 0, 36, 544, 1, 0, 0, 0, 38, 585, 1, 0, 0, 0, 40, 627, 1, 0, 0, 0, 42,
    631, 1, 0, 0, 0, 44, 695, 1, 0, 0, 0, 46, 727, 1, 0, 0, 0, 48, 756, 1, 0, 0, 0, 50, 777, 1, 0, 0, 0, 52, 791, 1, 0, 0, 0, 54, 802, 1, 0, 0, 0, 56, 822, 1, 0, 0, 0, 58, 835, 1, 0, 0, 0, 60, 853, 1,
    0, 0, 0, 62, 859, 1, 0, 0, 0, 64, 960, 1, 0, 0, 0, 66, 1084, 1, 0, 0, 0, 68, 1094, 1, 0, 0, 0, 70, 1097, 1, 0, 0, 0, 72, 1171, 1, 0, 0, 0, 74, 1180, 1, 0, 0, 0, 76, 1227, 1, 0, 0, 0, 78, 1245, 1, 0,
    0, 0, 80, 1247, 1, 0, 0, 0, 82, 1261, 1, 0, 0, 0, 84, 1278, 1, 0, 0, 0, 86, 1379, 1, 0, 0, 0, 88, 1381, 1, 0, 0, 0, 90, 1384, 1, 0, 0, 0, 92, 1394, 1, 0, 0, 0, 94, 1480, 1, 0, 0, 0, 96, 1494, 1, 0,
    0, 0, 98, 1509, 1, 0, 0, 0, 100, 1525, 1, 0, 0, 0, 102, 1533, 1, 0, 0, 0, 104, 1536, 1, 0, 0, 0, 106, 1585, 1, 0, 0, 0, 108, 1597, 1, 0, 0, 0, 110, 1641, 1, 0, 0, 0, 112, 1655, 1, 0, 0, 0, 114,
    1663, 1, 0, 0, 0, 116, 1669, 1, 0, 0, 0, 118, 1700, 1, 0, 0, 0, 120, 1736, 1, 0, 0, 0, 122, 1746, 1, 0, 0, 0, 124, 1755, 1, 0, 0, 0, 126, 1770, 1, 0, 0, 0, 128, 1790, 1, 0, 0, 0, 130, 1812, 1, 0, 0,
    0, 132, 1824, 1, 0, 0, 0, 134, 1834, 1, 0, 0, 0, 136, 1840, 1, 0, 0, 0, 138, 1852, 1, 0, 0, 0, 140, 1864, 1, 0, 0, 0, 142, 1876, 1, 0, 0, 0, 144, 1885, 1, 0, 0, 0, 146, 1972, 1, 0, 0, 0, 148, 1974,
    1, 0, 0, 0, 150, 1977, 1, 0, 0, 0, 152, 1980, 1, 0, 0, 0, 154, 1987, 1, 0, 0, 0, 156, 1994, 1, 0, 0, 0, 158, 1998, 1, 0, 0, 0, 160, 2012, 1, 0, 0, 0, 162, 2014, 1, 0, 0, 0, 164, 2016, 1, 0, 0, 0,
    166, 2018, 1, 0, 0, 0, 168, 2022, 1, 0, 0, 0, 170, 2024, 1, 0, 0, 0, 172, 2026, 1, 0, 0, 0, 174, 2028, 1, 0, 0, 0, 176, 2030, 1, 0, 0, 0, 178, 2032, 1, 0, 0, 0, 180, 2034, 1, 0, 0, 0, 182, 2036, 1,
    0, 0, 0, 184, 2038, 1, 0, 0, 0, 186, 2040, 1, 0, 0, 0, 188, 2042, 1, 0, 0, 0, 190, 2044, 1, 0, 0, 0, 192, 2046, 1, 0, 0, 0, 194, 2048, 1, 0, 0, 0, 196, 2050, 1, 0, 0, 0, 198, 2052, 1, 0, 0, 0, 200,
    2054, 1, 0, 0, 0, 202, 2056, 1, 0, 0, 0, 204, 2058, 1, 0, 0, 0, 206, 2060, 1, 0, 0, 0, 208, 2062, 1, 0, 0, 0, 210, 2064, 1, 0, 0, 0, 212, 2066, 1, 0, 0, 0, 214, 2068, 1, 0, 0, 0, 216, 2070, 1, 0, 0,
    0, 218, 2072, 1, 0, 0, 0, 220, 2081, 1, 0, 0, 0, 222, 224, 3, 2, 1, 0, 223, 222, 1, 0, 0, 0, 224, 227, 1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 225, 226, 1, 0, 0, 0, 226, 228, 1, 0, 0, 0, 227, 225, 1, 0,
    0, 0, 228, 229, 5, 0, 0, 1, 229, 1, 1, 0, 0, 0, 230, 232, 5, 1, 0, 0, 231, 230, 1, 0, 0, 0, 232, 235, 1, 0, 0, 0, 233, 231, 1, 0, 0, 0, 233, 234, 1, 0, 0, 0, 234, 236, 1, 0, 0, 0, 235, 233, 1, 0, 0,
    0, 236, 245, 3, 4, 2, 0, 237, 239, 5, 1, 0, 0, 238, 237, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 242, 1, 0, 0, 0, 242, 244, 3, 4, 2, 0, 243, 238, 1, 0, 0,
    0, 244, 247, 1, 0, 0, 0, 245, 243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 251, 1, 0, 0, 0, 247, 245, 1, 0, 0, 0, 248, 250, 5, 1, 0, 0, 249, 248, 1, 0, 0, 0, 250, 253, 1, 0, 0, 0, 251, 249, 1, 0, 0,
    0, 251, 252, 1, 0, 0, 0, 252, 3, 1, 0, 0, 0, 253, 251, 1, 0, 0, 0, 254, 257, 5, 71, 0, 0, 255, 256, 5, 114, 0, 0, 256, 258, 5, 111, 0, 0, 257, 255, 1, 0, 0, 0, 257, 258, 1, 0, 0, 0, 258, 260, 1, 0,
    0, 0, 259, 254, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 285, 1, 0, 0, 0, 261, 286, 3, 6, 3, 0, 262, 286, 3, 8, 4, 0, 263, 286, 3, 10, 5, 0, 264, 286, 3, 12, 6, 0, 265, 286, 3, 14, 7, 0, 266, 286, 3,
    22, 11, 0, 267, 286, 3, 26, 13, 0, 268, 286, 3, 42, 21, 0, 269, 286, 3, 44, 22, 0, 270, 286, 3, 46, 23, 0, 271, 286, 3, 56, 28, 0, 272, 286, 3, 58, 29, 0, 273, 286, 3, 60, 30, 0, 274, 286, 3, 62,
    31, 0, 275, 286, 3, 70, 35, 0, 276, 286, 3, 76, 38, 0, 277, 286, 3, 80, 40, 0, 278, 286, 3, 20, 10, 0, 279, 286, 3, 16, 8, 0, 280, 286, 3, 18, 9, 0, 281, 286, 3, 82, 41, 0, 282, 286, 3, 104, 52, 0,
    283, 286, 3, 108, 54, 0, 284, 286, 3, 112, 56, 0, 285, 261, 1, 0, 0, 0, 285, 262, 1, 0, 0, 0, 285, 263, 1, 0, 0, 0, 285, 264, 1, 0, 0, 0, 285, 265, 1, 0, 0, 0, 285, 266, 1, 0, 0, 0, 285, 267, 1, 0,
    0, 0, 285, 268, 1, 0, 0, 0, 285, 269, 1, 0, 0, 0, 285, 270, 1, 0, 0, 0, 285, 271, 1, 0, 0, 0, 285, 272, 1, 0, 0, 0, 285, 273, 1, 0, 0, 0, 285, 274, 1, 0, 0, 0, 285, 275, 1, 0, 0, 0, 285, 276, 1, 0,
    0, 0, 285, 277, 1, 0, 0, 0, 285, 278, 1, 0, 0, 0, 285, 279, 1, 0, 0, 0, 285, 280, 1, 0, 0, 0, 285, 281, 1, 0, 0, 0, 285, 282, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 285, 284, 1, 0, 0, 0, 286, 5, 1, 0, 0,
    0, 287, 288, 5, 30, 0, 0, 288, 292, 5, 132, 0, 0, 289, 290, 3, 178, 89, 0, 290, 291, 5, 2, 0, 0, 291, 293, 1, 0, 0, 0, 292, 289, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 317, 3,
    180, 90, 0, 295, 305, 5, 121, 0, 0, 296, 297, 5, 136, 0, 0, 297, 306, 3, 180, 90, 0, 298, 300, 5, 46, 0, 0, 299, 298, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 302, 3, 184, 92, 0,
    302, 303, 5, 136, 0, 0, 303, 304, 3, 184, 92, 0, 304, 306, 1, 0, 0, 0, 305, 296, 1, 0, 0, 0, 305, 299, 1, 0, 0, 0, 306, 318, 1, 0, 0, 0, 307, 309, 5, 27, 0, 0, 308, 310, 5, 46, 0, 0, 309, 308, 1, 0,
    0, 0, 309, 310, 1, 0, 0, 0, 310, 311, 1, 0, 0, 0, 311, 318, 3, 28, 14, 0, 312, 314, 5, 63, 0, 0, 313, 315, 5, 46, 0, 0, 314, 313, 1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0, 316, 318, 3,
    184, 92, 0, 317, 295, 1, 0, 0, 0, 317, 307, 1, 0, 0, 0, 317, 312, 1, 0, 0, 0, 318, 7, 1, 0, 0, 0, 319, 327, 5, 31, 0, 0, 320, 328, 3, 178, 89, 0, 321, 322, 3, 178, 89, 0, 322, 323, 5, 2, 0, 0, 323,
    325, 1, 0, 0, 0, 324, 321, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 328, 3, 182, 91, 0, 327, 320, 1, 0, 0, 0, 327, 324, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 9, 1, 0, 0, 0, 329,
    331, 5, 35, 0, 0, 330, 332, 5, 55, 0, 0, 331, 330, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333, 334, 3, 64, 32, 0, 334, 335, 5, 33, 0, 0, 335, 336, 3, 178, 89, 0, 336, 11, 1, 0, 0,
    0, 337, 339, 5, 38, 0, 0, 338, 340, 7, 0, 0, 0, 339, 338, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 345, 1, 0, 0, 0, 341, 343, 5, 137, 0, 0, 342, 344, 3, 204, 102, 0, 343, 342, 1, 0, 0, 0, 343, 344, 1,
    0, 0, 0, 344, 346, 1, 0, 0, 0, 345, 341, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 13, 1, 0, 0, 0, 347, 349, 7, 1, 0, 0, 348, 350, 5, 137, 0, 0, 349, 348, 1, 0, 0, 0, 349, 350, 1, 0, 0, 0, 350, 15, 1,
    0, 0, 0, 351, 353, 5, 126, 0, 0, 352, 354, 5, 137, 0, 0, 353, 352, 1, 0, 0, 0, 353, 354, 1, 0, 0, 0, 354, 360, 1, 0, 0, 0, 355, 357, 5, 136, 0, 0, 356, 358, 5, 129, 0, 0, 357, 356, 1, 0, 0, 0, 357,
    358, 1, 0, 0, 0, 358, 359, 1, 0, 0, 0, 359, 361, 3, 200, 100, 0, 360, 355, 1, 0, 0, 0, 360, 361, 1, 0, 0, 0, 361, 17, 1, 0, 0, 0, 362, 363, 5, 129, 0, 0, 363, 364, 3, 200, 100, 0, 364, 19, 1, 0, 0,
    0, 365, 367, 5, 120, 0, 0, 366, 368, 5, 129, 0, 0, 367, 366, 1, 0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 369, 1, 0, 0, 0, 369, 370, 3, 200, 100, 0, 370, 21, 1, 0, 0, 0, 371, 373, 5, 50, 0, 0, 372, 374,
    5, 140, 0, 0, 373, 372, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 379, 5, 84, 0, 0, 376, 377, 5, 80, 0, 0, 377, 378, 5, 102, 0, 0, 378, 380, 5, 70, 0, 0, 379, 376, 1, 0, 0, 0,
    379, 380, 1, 0, 0, 0, 380, 384, 1, 0, 0, 0, 381, 382, 3, 178, 89, 0, 382, 383, 5, 2, 0, 0, 383, 385, 1, 0, 0, 0, 384, 381, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 387, 3, 190,
    95, 0, 387, 388, 5, 107, 0, 0, 388, 389, 3, 180, 90, 0, 389, 390, 5, 3, 0, 0, 390, 395, 3, 24, 12, 0, 391, 392, 5, 5, 0, 0, 392, 394, 3, 24, 12, 0, 393, 391, 1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395,
    393, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0, 396, 398, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 401, 5, 4, 0, 0, 399, 400, 5, 148, 0, 0, 400, 402, 3, 64, 32, 0, 401, 399, 1, 0, 0, 0, 401, 402, 1, 0, 0, 0,
    402, 23, 1, 0, 0, 0, 403, 406, 3, 184, 92, 0, 404, 406, 3, 64, 32, 0, 405, 403, 1, 0, 0, 0, 405, 404, 1, 0, 0, 0, 406, 409, 1, 0, 0, 0, 407, 408, 5, 45, 0, 0, 408, 410, 3, 186, 93, 0, 409, 407, 1,
    0, 0, 0, 409, 410, 1, 0, 0, 0, 410, 412, 1, 0, 0, 0, 411, 413, 3, 138, 69, 0, 412, 411, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 25, 1, 0, 0, 0, 414, 416, 5, 50, 0, 0, 415, 417, 7, 2, 0, 0, 416, 415,
    1, 0, 0, 0, 416, 417, 1, 0, 0, 0, 417, 418, 1, 0, 0, 0, 418, 422, 5, 132, 0, 0, 419, 420, 5, 80, 0, 0, 420, 421, 5, 102, 0, 0, 421, 423, 5, 70, 0, 0, 422, 419, 1, 0, 0, 0, 422, 423, 1, 0, 0, 0, 423,
    427, 1, 0, 0, 0, 424, 425, 3, 178, 89, 0, 425, 426, 5, 2, 0, 0, 426, 428, 1, 0, 0, 0, 427, 424, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 453, 3, 180, 90, 0, 430, 431, 5, 3, 0, 0,
    431, 436, 3, 28, 14, 0, 432, 433, 5, 5, 0, 0, 433, 435, 3, 28, 14, 0, 434, 432, 1, 0, 0, 0, 435, 438, 1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 436, 434, 1, 0, 0, 0, 437, 443, 1, 0, 0, 0, 438, 436, 1, 0, 0,
    0, 439, 440, 5, 5, 0, 0, 440, 442, 3, 36, 18, 0, 441, 439, 1, 0, 0, 0, 442, 445, 1, 0, 0, 0, 443, 441, 1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 446, 1, 0, 0, 0, 445, 443, 1, 0, 0, 0, 446, 449, 5, 4,
    0, 0, 447, 448, 5, 150, 0, 0, 448, 450, 5, 185, 0, 0, 449, 447, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 454, 1, 0, 0, 0, 451, 452, 5, 33, 0, 0, 452, 454, 3, 82, 41, 0, 453, 430, 1, 0, 0, 0, 453, 451,
    1, 0, 0, 0, 454, 27, 1, 0, 0, 0, 455, 457, 3, 184, 92, 0, 456, 458, 3, 30, 15, 0, 457, 456, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 462, 1, 0, 0, 0, 459, 461, 3, 32, 16, 0, 460, 459, 1, 0, 0, 0, 461,
    464, 1, 0, 0, 0, 462, 460, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 29, 1, 0, 0, 0, 464, 462, 1, 0, 0, 0, 465, 467, 3, 174, 87, 0, 466, 465, 1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0,
    468, 466, 1, 0, 0, 0, 469, 480, 1, 0, 0, 0, 470, 471, 5, 3, 0, 0, 471, 472, 3, 34, 17, 0, 472, 473, 5, 4, 0, 0, 473, 481, 1, 0, 0, 0, 474, 475, 5, 3, 0, 0, 475, 476, 3, 34, 17, 0, 476, 477, 5, 5, 0,
    0, 477, 478, 3, 34, 17, 0, 478, 479, 5, 4, 0, 0, 479, 481, 1, 0, 0, 0, 480, 470, 1, 0, 0, 0, 480, 474, 1, 0, 0, 0, 480, 481, 1, 0, 0, 0, 481, 31, 1, 0, 0, 0, 482, 483, 5, 49, 0, 0, 483, 485, 3, 174,
    87, 0, 484, 482, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 535, 1, 0, 0, 0, 486, 487, 5, 113, 0, 0, 487, 489, 5, 95, 0, 0, 488, 490, 3, 138, 69, 0, 489, 488, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490, 492,
    1, 0, 0, 0, 491, 493, 3, 40, 20, 0, 492, 491, 1, 0, 0, 0, 492, 493, 1, 0, 0, 0, 493, 495, 1, 0, 0, 0, 494, 496, 5, 36, 0, 0, 495, 494, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 536, 1, 0, 0, 0, 497,
    499, 5, 102, 0, 0, 498, 497, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 500, 1, 0, 0, 0, 500, 503, 5, 104, 0, 0, 501, 503, 5, 140, 0, 0, 502, 498, 1, 0, 0, 0, 502, 501, 1, 0, 0, 0, 503, 505, 1, 0, 0, 0,
    504, 506, 3, 40, 20, 0, 505, 504, 1, 0, 0, 0, 505, 506, 1, 0, 0, 0, 506, 536, 1, 0, 0, 0, 507, 508, 5, 44, 0, 0, 508, 509, 5, 3, 0, 0, 509, 510, 3, 64, 32, 0, 510, 511, 5, 4, 0, 0, 511, 536, 1, 0,
    0, 0, 512, 519, 5, 56, 0, 0, 513, 520, 3, 34, 17, 0, 514, 520, 3, 68, 34, 0, 515, 516, 5, 3, 0, 0, 516, 517, 3, 64, 32, 0, 517, 518, 5, 4, 0, 0, 518, 520, 1, 0, 0, 0, 519, 513, 1, 0, 0, 0, 519, 514,
    1, 0, 0, 0, 519, 515, 1, 0, 0, 0, 520, 536, 1, 0, 0, 0, 521, 522, 5, 45, 0, 0, 522, 536, 3, 186, 93, 0, 523, 536, 3, 38, 19, 0, 524, 525, 5, 169, 0, 0, 525, 527, 5, 170, 0, 0, 526, 524, 1, 0, 0, 0,
    526, 527, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 529, 5, 33, 0, 0, 529, 530, 5, 3, 0, 0, 530, 531, 3, 64, 32, 0, 531, 533, 5, 4, 0, 0, 532, 534, 7, 3, 0, 0, 533, 532, 1, 0, 0, 0, 533, 534, 1, 0, 0,
    0, 534, 536, 1, 0, 0, 0, 535, 486, 1, 0, 0, 0, 535, 502, 1, 0, 0, 0, 535, 507, 1, 0, 0, 0, 535, 512, 1, 0, 0, 0, 535, 521, 1, 0, 0, 0, 535, 523, 1, 0, 0, 0, 535, 526, 1, 0, 0, 0, 536, 33, 1, 0, 0,
    0, 537, 539, 7, 4, 0, 0, 538, 537, 1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 540, 1, 0, 0, 0, 540, 541, 5, 186, 0, 0, 541, 35, 1, 0, 0, 0, 542, 543, 5, 49, 0, 0, 543, 545, 3, 174, 87, 0, 544, 542, 1,
    0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 583, 1, 0, 0, 0, 546, 547, 5, 113, 0, 0, 547, 550, 5, 95, 0, 0, 548, 550, 5, 140, 0, 0, 549, 546, 1, 0, 0, 0, 549, 548, 1, 0, 0, 0, 550, 551, 1, 0, 0, 0, 551,
    552, 5, 3, 0, 0, 552, 557, 3, 24, 12, 0, 553, 554, 5, 5, 0, 0, 554, 556, 3, 24, 12, 0, 555, 553, 1, 0, 0, 0, 556, 559, 1, 0, 0, 0, 557, 555, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 560, 1, 0, 0, 0,
    559, 557, 1, 0, 0, 0, 560, 562, 5, 4, 0, 0, 561, 563, 3, 40, 20, 0, 562, 561, 1, 0, 0, 0, 562, 563, 1, 0, 0, 0, 563, 584, 1, 0, 0, 0, 564, 565, 5, 44, 0, 0, 565, 566, 5, 3, 0, 0, 566, 567, 3, 64,
    32, 0, 567, 568, 5, 4, 0, 0, 568, 584, 1, 0, 0, 0, 569, 570, 5, 74, 0, 0, 570, 571, 5, 95, 0, 0, 571, 572, 5, 3, 0, 0, 572, 577, 3, 184, 92, 0, 573, 574, 5, 5, 0, 0, 574, 576, 3, 184, 92, 0, 575,
    573, 1, 0, 0, 0, 576, 579, 1, 0, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578, 1, 0, 0, 0, 578, 580, 1, 0, 0, 0, 579, 577, 1, 0, 0, 0, 580, 581, 5, 4, 0, 0, 581, 582, 3, 38, 19, 0, 582, 584, 1, 0, 0, 0,
    583, 549, 1, 0, 0, 0, 583, 564, 1, 0, 0, 0, 583, 569, 1, 0, 0, 0, 584, 37, 1, 0, 0, 0, 585, 586, 5, 117, 0, 0, 586, 598, 3, 188, 94, 0, 587, 588, 5, 3, 0, 0, 588, 593, 3, 184, 92, 0, 589, 590, 5, 5,
    0, 0, 590, 592, 3, 184, 92, 0, 591, 589, 1, 0, 0, 0, 592, 595, 1, 0, 0, 0, 593, 591, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 596, 1, 0, 0, 0, 595, 593, 1, 0, 0, 0, 596, 597, 5, 4, 0, 0, 597, 599, 1,
    0, 0, 0, 598, 587, 1, 0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 614, 1, 0, 0, 0, 600, 601, 5, 107, 0, 0, 601, 608, 7, 5, 0, 0, 602, 603, 5, 131, 0, 0, 603, 609, 7, 6, 0, 0, 604, 609, 5, 41, 0, 0, 605,
    609, 5, 123, 0, 0, 606, 607, 5, 101, 0, 0, 607, 609, 5, 26, 0, 0, 608, 602, 1, 0, 0, 0, 608, 604, 1, 0, 0, 0, 608, 605, 1, 0, 0, 0, 608, 606, 1, 0, 0, 0, 609, 613, 1, 0, 0, 0, 610, 611, 5, 99, 0, 0,
    611, 613, 3, 174, 87, 0, 612, 600, 1, 0, 0, 0, 612, 610, 1, 0, 0, 0, 613, 616, 1, 0, 0, 0, 614, 612, 1, 0, 0, 0, 614, 615, 1, 0, 0, 0, 615, 625, 1, 0, 0, 0, 616, 614, 1, 0, 0, 0, 617, 619, 5, 102,
    0, 0, 618, 617, 1, 0, 0, 0, 618, 619, 1, 0, 0, 0, 619, 620, 1, 0, 0, 0, 620, 623, 5, 57, 0, 0, 621, 622, 5, 86, 0, 0, 622, 624, 7, 7, 0, 0, 623, 621, 1, 0, 0, 0, 623, 624, 1, 0, 0, 0, 624, 626, 1,
    0, 0, 0, 625, 618, 1, 0, 0, 0, 625, 626, 1, 0, 0, 0, 626, 39, 1, 0, 0, 0, 627, 628, 5, 107, 0, 0, 628, 629, 5, 48, 0, 0, 629, 630, 7, 8, 0, 0, 630, 41, 1, 0, 0, 0, 631, 633, 5, 50, 0, 0, 632, 634,
    7, 2, 0, 0, 633, 632, 1, 0, 0, 0, 633, 634, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 639, 5, 138, 0, 0, 636, 637, 5, 80, 0, 0, 637, 638, 5, 102, 0, 0, 638, 640, 5, 70, 0, 0, 639, 636, 1, 0, 0, 0, 639,
    640, 1, 0, 0, 0, 640, 644, 1, 0, 0, 0, 641, 642, 3, 178, 89, 0, 642, 643, 5, 2, 0, 0, 643, 645, 1, 0, 0, 0, 644, 641, 1, 0, 0, 0, 644, 645, 1, 0, 0, 0, 645, 646, 1, 0, 0, 0, 646, 651, 3, 192, 96, 0,
    647, 652, 5, 37, 0, 0, 648, 652, 5, 28, 0, 0, 649, 650, 5, 89, 0, 0, 650, 652, 5, 105, 0, 0, 651, 647, 1, 0, 0, 0, 651, 648, 1, 0, 0, 0, 651, 649, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 667, 1, 0,
    0, 0, 653, 668, 5, 59, 0, 0, 654, 668, 5, 88, 0, 0, 655, 665, 5, 141, 0, 0, 656, 657, 5, 105, 0, 0, 657, 662, 3, 184, 92, 0, 658, 659, 5, 5, 0, 0, 659, 661, 3, 184, 92, 0, 660, 658, 1, 0, 0, 0, 661,
    664, 1, 0, 0, 0, 662, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 666, 1, 0, 0, 0, 664, 662, 1, 0, 0, 0, 665, 656, 1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 668, 1, 0, 0, 0, 667, 653, 1, 0, 0, 0, 667,
    654, 1, 0, 0, 0, 667, 655, 1, 0, 0, 0, 668, 669, 1, 0, 0, 0, 669, 670, 5, 107, 0, 0, 670, 674, 3, 180, 90, 0, 671, 672, 5, 73, 0, 0, 672, 673, 5, 64, 0, 0, 673, 675, 5, 127, 0, 0, 674, 671, 1, 0, 0,
    0, 674, 675, 1, 0, 0, 0, 675, 678, 1, 0, 0, 0, 676, 677, 5, 147, 0, 0, 677, 679, 3, 64, 32, 0, 678, 676, 1, 0, 0, 0, 678, 679, 1, 0, 0, 0, 679, 680, 1, 0, 0, 0, 680, 689, 5, 38, 0, 0, 681, 686, 3,
    104, 52, 0, 682, 686, 3, 70, 35, 0, 683, 686, 3, 56, 28, 0, 684, 686, 3, 82, 41, 0, 685, 681, 1, 0, 0, 0, 685, 682, 1, 0, 0, 0, 685, 683, 1, 0, 0, 0, 685, 684, 1, 0, 0, 0, 686, 687, 1, 0, 0, 0, 687,
    688, 5, 1, 0, 0, 688, 690, 1, 0, 0, 0, 689, 685, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 689, 1, 0, 0, 0, 691, 692, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 694, 5, 66, 0, 0, 694, 43, 1, 0, 0, 0, 695,
    697, 5, 50, 0, 0, 696, 698, 7, 2, 0, 0, 697, 696, 1, 0, 0, 0, 697, 698, 1, 0, 0, 0, 698, 699, 1, 0, 0, 0, 699, 703, 5, 145, 0, 0, 700, 701, 5, 80, 0, 0, 701, 702, 5, 102, 0, 0, 702, 704, 5, 70, 0,
    0, 703, 700, 1, 0, 0, 0, 703, 704, 1, 0, 0, 0, 704, 708, 1, 0, 0, 0, 705, 706, 3, 178, 89, 0, 706, 707, 5, 2, 0, 0, 707, 709, 1, 0, 0, 0, 708, 705, 1, 0, 0, 0, 708, 709, 1, 0, 0, 0, 709, 710, 1, 0,
    0, 0, 710, 722, 3, 194, 97, 0, 711, 712, 5, 3, 0, 0, 712, 717, 3, 184, 92, 0, 713, 714, 5, 5, 0, 0, 714, 716, 3, 184, 92, 0, 715, 713, 1, 0, 0, 0, 716, 719, 1, 0, 0, 0, 717, 715, 1, 0, 0, 0, 717,
    718, 1, 0, 0, 0, 718, 720, 1, 0, 0, 0, 719, 717, 1, 0, 0, 0, 720, 721, 5, 4, 0, 0, 721, 723, 1, 0, 0, 0, 722, 711, 1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 725, 5, 33, 0, 0, 725,
    726, 3, 82, 41, 0, 726, 45, 1, 0, 0, 0, 727, 728, 5, 50, 0, 0, 728, 729, 5, 146, 0, 0, 729, 733, 5, 132, 0, 0, 730, 731, 5, 80, 0, 0, 731, 732, 5, 102, 0, 0, 732, 734, 5, 70, 0, 0, 733, 730, 1, 0,
    0, 0, 733, 734, 1, 0, 0, 0, 734, 738, 1, 0, 0, 0, 735, 736, 3, 178, 89, 0, 736, 737, 5, 2, 0, 0, 737, 739, 1, 0, 0, 0, 738, 735, 1, 0, 0, 0, 738, 739, 1, 0, 0, 0, 739, 740, 1, 0, 0, 0, 740, 741, 3,
    180, 90, 0, 741, 742, 5, 142, 0, 0, 742, 754, 3, 196, 98, 0, 743, 744, 5, 3, 0, 0, 744, 749, 3, 168, 84, 0, 745, 746, 5, 5, 0, 0, 746, 748, 3, 168, 84, 0, 747, 745, 1, 0, 0, 0, 748, 751, 1, 0, 0, 0,
    749, 747, 1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 752, 1, 0, 0, 0, 751, 749, 1, 0, 0, 0, 752, 753, 5, 4, 0, 0, 753, 755, 1, 0, 0, 0, 754, 743, 1, 0, 0, 0, 754, 755, 1, 0, 0, 0, 755, 47, 1, 0, 0, 0,
    756, 758, 5, 149, 0, 0, 757, 759, 5, 116, 0, 0, 758, 757, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 760, 1, 0, 0, 0, 760, 761, 3, 50, 25, 0, 761, 762, 5, 33, 0, 0, 762, 763, 5, 3, 0, 0, 763, 764, 3,
    82, 41, 0, 764, 774, 5, 4, 0, 0, 765, 766, 5, 5, 0, 0, 766, 767, 3, 50, 25, 0, 767, 768, 5, 33, 0, 0, 768, 769, 5, 3, 0, 0, 769, 770, 3, 82, 41, 0, 770, 771, 5, 4, 0, 0, 771, 773, 1, 0, 0, 0, 772,
    765, 1, 0, 0, 0, 773, 776, 1, 0, 0, 0, 774, 772, 1, 0, 0, 0, 774, 775, 1, 0, 0, 0, 775, 49, 1, 0, 0, 0, 776, 774, 1, 0, 0, 0, 777, 789, 3, 180, 90, 0, 778, 779, 5, 3, 0, 0, 779, 784, 3, 184, 92, 0,
    780, 781, 5, 5, 0, 0, 781, 783, 3, 184, 92, 0, 782, 780, 1, 0, 0, 0, 783, 786, 1, 0, 0, 0, 784, 782, 1, 0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 787, 1, 0, 0, 0, 786, 784, 1, 0, 0, 0, 787, 788, 5, 4, 0,
    0, 788, 790, 1, 0, 0, 0, 789, 778, 1, 0, 0, 0, 789, 790, 1, 0, 0, 0, 790, 51, 1, 0, 0, 0, 791, 792, 3, 50, 25, 0, 792, 793, 5, 33, 0, 0, 793, 794, 5, 3, 0, 0, 794, 795, 3, 160, 80, 0, 795, 797, 5,
    139, 0, 0, 796, 798, 5, 29, 0, 0, 797, 796, 1, 0, 0, 0, 797, 798, 1, 0, 0, 0, 798, 799, 1, 0, 0, 0, 799, 800, 3, 162, 81, 0, 800, 801, 5, 4, 0, 0, 801, 53, 1, 0, 0, 0, 802, 814, 3, 180, 90, 0, 803,
    804, 5, 3, 0, 0, 804, 809, 3, 184, 92, 0, 805, 806, 5, 5, 0, 0, 806, 808, 3, 184, 92, 0, 807, 805, 1, 0, 0, 0, 808, 811, 1, 0, 0, 0, 809, 807, 1, 0, 0, 0, 809, 810, 1, 0, 0, 0, 810, 812, 1, 0, 0, 0,
    811, 809, 1, 0, 0, 0, 812, 813, 5, 4, 0, 0, 813, 815, 1, 0, 0, 0, 814, 803, 1, 0, 0, 0, 814, 815, 1, 0, 0, 0, 815, 816, 1, 0, 0, 0, 816, 817, 5, 33, 0, 0, 817, 818, 5, 3, 0, 0, 818, 819, 3, 82, 41,
    0, 819, 820, 5, 4, 0, 0, 820, 55, 1, 0, 0, 0, 821, 823, 3, 48, 24, 0, 822, 821, 1, 0, 0, 0, 822, 823, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 825, 5, 59, 0, 0, 825, 826, 5, 75, 0, 0, 826, 829, 3,
    110, 55, 0, 827, 828, 5, 148, 0, 0, 828, 830, 3, 64, 32, 0, 829, 827, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0, 830, 832, 1, 0, 0, 0, 831, 833, 3, 72, 36, 0, 832, 831, 1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833,
    57, 1, 0, 0, 0, 834, 836, 3, 48, 24, 0, 835, 834, 1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 837, 1, 0, 0, 0, 837, 838, 5, 59, 0, 0, 838, 839, 5, 75, 0, 0, 839, 842, 3, 110, 55, 0, 840, 841, 5, 148, 0,
    0, 841, 843, 3, 64, 32, 0, 842, 840, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 845, 1, 0, 0, 0, 844, 846, 3, 72, 36, 0, 845, 844, 1, 0, 0, 0, 845, 846, 1, 0, 0, 0, 846, 851, 1, 0, 0, 0, 847, 849, 3,
    132, 66, 0, 848, 847, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 850, 1, 0, 0, 0, 850, 852, 3, 134, 67, 0, 851, 848, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 59, 1, 0, 0, 0, 853, 855, 5, 61, 0, 0, 854,
    856, 5, 55, 0, 0, 855, 854, 1, 0, 0, 0, 855, 856, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 858, 3, 178, 89, 0, 858, 61, 1, 0, 0, 0, 859, 860, 5, 63, 0, 0, 860, 863, 7, 9, 0, 0, 861, 862, 5, 80, 0, 0,
    862, 864, 5, 70, 0, 0, 863, 861, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 868, 1, 0, 0, 0, 865, 866, 3, 178, 89, 0, 866, 867, 5, 2, 0, 0, 867, 869, 1, 0, 0, 0, 868, 865, 1, 0, 0, 0, 868, 869, 1, 0, 0,
    0, 869, 870, 1, 0, 0, 0, 870, 871, 3, 220, 110, 0, 871, 63, 1, 0, 0, 0, 872, 873, 6, 32, -1, 0, 873, 961, 3, 68, 34, 0, 874, 961, 5, 187, 0, 0, 875, 876, 3, 178, 89, 0, 876, 877, 5, 2, 0, 0, 877,
    879, 1, 0, 0, 0, 878, 875, 1, 0, 0, 0, 878, 879, 1, 0, 0, 0, 879, 880, 1, 0, 0, 0, 880, 881, 3, 180, 90, 0, 881, 882, 5, 2, 0, 0, 882, 884, 1, 0, 0, 0, 883, 878, 1, 0, 0, 0, 883, 884, 1, 0, 0, 0,
    884, 885, 1, 0, 0, 0, 885, 961, 3, 184, 92, 0, 886, 887, 3, 164, 82, 0, 887, 888, 3, 64, 32, 21, 888, 961, 1, 0, 0, 0, 889, 890, 3, 176, 88, 0, 890, 903, 5, 3, 0, 0, 891, 893, 5, 62, 0, 0, 892, 891,
    1, 0, 0, 0, 892, 893, 1, 0, 0, 0, 893, 894, 1, 0, 0, 0, 894, 899, 3, 64, 32, 0, 895, 896, 5, 5, 0, 0, 896, 898, 3, 64, 32, 0, 897, 895, 1, 0, 0, 0, 898, 901, 1, 0, 0, 0, 899, 897, 1, 0, 0, 0, 899,
    900, 1, 0, 0, 0, 900, 904, 1, 0, 0, 0, 901, 899, 1, 0, 0, 0, 902, 904, 5, 7, 0, 0, 903, 892, 1, 0, 0, 0, 903, 902, 1, 0, 0, 0, 903, 904, 1, 0, 0, 0, 904, 905, 1, 0, 0, 0, 905, 907, 5, 4, 0, 0, 906,
    908, 3, 114, 57, 0, 907, 906, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 910, 1, 0, 0, 0, 909, 911, 3, 118, 59, 0, 910, 909, 1, 0, 0, 0, 910, 911, 1, 0, 0, 0, 911, 961, 1, 0, 0, 0, 912, 913, 5, 3, 0, 0,
    913, 918, 3, 64, 32, 0, 914, 915, 5, 5, 0, 0, 915, 917, 3, 64, 32, 0, 916, 914, 1, 0, 0, 0, 917, 920, 1, 0, 0, 0, 918, 916, 1, 0, 0, 0, 918, 919, 1, 0, 0, 0, 919, 921, 1, 0, 0, 0, 920, 918, 1, 0, 0,
    0, 921, 922, 5, 4, 0, 0, 922, 961, 1, 0, 0, 0, 923, 924, 5, 43, 0, 0, 924, 925, 5, 3, 0, 0, 925, 926, 3, 64, 32, 0, 926, 927, 5, 33, 0, 0, 927, 928, 3, 30, 15, 0, 928, 929, 5, 4, 0, 0, 929, 961, 1,
    0, 0, 0, 930, 932, 5, 102, 0, 0, 931, 930, 1, 0, 0, 0, 931, 932, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 935, 5, 70, 0, 0, 934, 931, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 936, 1, 0, 0, 0, 936, 937,
    5, 3, 0, 0, 937, 938, 3, 82, 41, 0, 938, 939, 5, 4, 0, 0, 939, 961, 1, 0, 0, 0, 940, 942, 5, 42, 0, 0, 941, 943, 3, 64, 32, 0, 942, 941, 1, 0, 0, 0, 942, 943, 1, 0, 0, 0, 943, 949, 1, 0, 0, 0, 944,
    945, 5, 147, 0, 0, 945, 946, 3, 64, 32, 0, 946, 947, 5, 135, 0, 0, 947, 948, 3, 64, 32, 0, 948, 950, 1, 0, 0, 0, 949, 944, 1, 0, 0, 0, 950, 951, 1, 0, 0, 0, 951, 949, 1, 0, 0, 0, 951, 952, 1, 0, 0,
    0, 952, 955, 1, 0, 0, 0, 953, 954, 5, 65, 0, 0, 954, 956, 3, 64, 32, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956, 957, 1, 0, 0, 0, 957, 958, 5, 66, 0, 0, 958, 961, 1, 0, 0, 0, 959, 961, 3,
    66, 33, 0, 960, 872, 1, 0, 0, 0, 960, 874, 1, 0, 0, 0, 960, 883, 1, 0, 0, 0, 960, 886, 1, 0, 0, 0, 960, 889, 1, 0, 0, 0, 960, 912, 1, 0, 0, 0, 960, 923, 1, 0, 0, 0, 960, 934, 1, 0, 0, 0, 960, 940,
    1, 0, 0, 0, 960, 959, 1, 0, 0, 0, 961, 1081, 1, 0, 0, 0, 962, 963, 10, 20, 0, 0, 963, 964, 5, 11, 0, 0, 964, 1080, 3, 64, 32, 21, 965, 966, 10, 19, 0, 0, 966, 967, 7, 10, 0, 0, 967, 1080, 3, 64, 32,
    20, 968, 969, 10, 18, 0, 0, 969, 970, 7, 4, 0, 0, 970, 1080, 3, 64, 32, 19, 971, 972, 10, 17, 0, 0, 972, 973, 7, 11, 0, 0, 973, 1080, 3, 64, 32, 18, 974, 975, 10, 16, 0, 0, 975, 976, 7, 12, 0, 0,
    976, 1080, 3, 64, 32, 17, 977, 990, 10, 15, 0, 0, 978, 991, 5, 6, 0, 0, 979, 991, 5, 22, 0, 0, 980, 991, 5, 23, 0, 0, 981, 991, 5, 24, 0, 0, 982, 991, 5, 92, 0, 0, 983, 984, 5, 92, 0, 0, 984, 991,
    5, 102, 0, 0, 985, 991, 5, 83, 0, 0, 986, 991, 5, 97, 0, 0, 987, 991, 5, 77, 0, 0, 988, 991, 5, 99, 0, 0, 989, 991, 5, 118, 0, 0, 990, 978, 1, 0, 0, 0, 990, 979, 1, 0, 0, 0, 990, 980, 1, 0, 0, 0,
    990, 981, 1, 0, 0, 0, 990, 982, 1, 0, 0, 0, 990, 983, 1, 0, 0, 0, 990, 985, 1, 0, 0, 0, 990, 986, 1, 0, 0, 0, 990, 987, 1, 0, 0, 0, 990, 988, 1, 0, 0, 0, 990, 989, 1, 0, 0, 0, 991, 992, 1, 0, 0, 0,
    992, 1080, 3, 64, 32, 16, 993, 994, 10, 14, 0, 0, 994, 995, 5, 32, 0, 0, 995, 1080, 3, 64, 32, 15, 996, 997, 10, 13, 0, 0, 997, 998, 5, 108, 0, 0, 998, 1080, 3, 64, 32, 14, 999, 1000, 10, 6, 0, 0,
    1000, 1002, 5, 92, 0, 0, 1001, 1003, 5, 102, 0, 0, 1002, 1001, 1, 0, 0, 0, 1002, 1003, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 1080, 3, 64, 32, 7, 1005, 1007, 10, 5, 0, 0, 1006, 1008, 5, 102, 0,
    0, 1007, 1006, 1, 0, 0, 0, 1007, 1008, 1, 0, 0, 0, 1008, 1009, 1, 0, 0, 0, 1009, 1010, 5, 39, 0, 0, 1010, 1011, 3, 64, 32, 0, 1011, 1012, 5, 32, 0, 0, 1012, 1013, 3, 64, 32, 6, 1013, 1080, 1, 0, 0,
    0, 1014, 1015, 10, 9, 0, 0, 1015, 1016, 5, 45, 0, 0, 1016, 1080, 3, 186, 93, 0, 1017, 1019, 10, 8, 0, 0, 1018, 1020, 5, 102, 0, 0, 1019, 1018, 1, 0, 0, 0, 1019, 1020, 1, 0, 0, 0, 1020, 1021, 1, 0,
    0, 0, 1021, 1022, 7, 13, 0, 0, 1022, 1025, 3, 64, 32, 0, 1023, 1024, 5, 67, 0, 0, 1024, 1026, 3, 64, 32, 0, 1025, 1023, 1, 0, 0, 0, 1025, 1026, 1, 0, 0, 0, 1026, 1080, 1, 0, 0, 0, 1027, 1032, 10, 7,
    0, 0, 1028, 1033, 5, 93, 0, 0, 1029, 1033, 5, 103, 0, 0, 1030, 1031, 5, 102, 0, 0, 1031, 1033, 5, 104, 0, 0, 1032, 1028, 1, 0, 0, 0, 1032, 1029, 1, 0, 0, 0, 1032, 1030, 1, 0, 0, 0, 1033, 1080, 1, 0,
    0, 0, 1034, 1036, 10, 4, 0, 0, 1035, 1037, 5, 102, 0, 0, 1036, 1035, 1, 0, 0, 0, 1036, 1037, 1, 0, 0, 0, 1037, 1038, 1, 0, 0, 0, 1038, 1077, 5, 83, 0, 0, 1039, 1049, 5, 3, 0, 0, 1040, 1050, 3, 82,
    41, 0, 1041, 1046, 3, 64, 32, 0, 1042, 1043, 5, 5, 0, 0, 1043, 1045, 3, 64, 32, 0, 1044, 1042, 1, 0, 0, 0, 1045, 1048, 1, 0, 0, 0, 1046, 1044, 1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1050, 1, 0,
    0, 0, 1048, 1046, 1, 0, 0, 0, 1049, 1040, 1, 0, 0, 0, 1049, 1041, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1078, 5, 4, 0, 0, 1052, 1053, 3, 178, 89, 0, 1053, 1054, 5, 2, 0,
    0, 1054, 1056, 1, 0, 0, 0, 1055, 1052, 1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 1078, 3, 180, 90, 0, 1058, 1059, 3, 178, 89, 0, 1059, 1060, 5, 2, 0, 0, 1060, 1062, 1, 0, 0,
    0, 1061, 1058, 1, 0, 0, 0, 1061, 1062, 1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1064, 3, 218, 109, 0, 1064, 1073, 5, 3, 0, 0, 1065, 1070, 3, 64, 32, 0, 1066, 1067, 5, 5, 0, 0, 1067, 1069, 3, 64,
    32, 0, 1068, 1066, 1, 0, 0, 0, 1069, 1072, 1, 0, 0, 0, 1070, 1068, 1, 0, 0, 0, 1070, 1071, 1, 0, 0, 0, 1071, 1074, 1, 0, 0, 0, 1072, 1070, 1, 0, 0, 0, 1073, 1065, 1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0,
    1074, 1075, 1, 0, 0, 0, 1075, 1076, 5, 4, 0, 0, 1076, 1078, 1, 0, 0, 0, 1077, 1039, 1, 0, 0, 0, 1077, 1055, 1, 0, 0, 0, 1077, 1061, 1, 0, 0, 0, 1078, 1080, 1, 0, 0, 0, 1079, 962, 1, 0, 0, 0, 1079,
    965, 1, 0, 0, 0, 1079, 968, 1, 0, 0, 0, 1079, 971, 1, 0, 0, 0, 1079, 974, 1, 0, 0, 0, 1079, 977, 1, 0, 0, 0, 1079, 993, 1, 0, 0, 0, 1079, 996, 1, 0, 0, 0, 1079, 999, 1, 0, 0, 0, 1079, 1005, 1, 0, 0,
    0, 1079, 1014, 1, 0, 0, 0, 1079, 1017, 1, 0, 0, 0, 1079, 1027, 1, 0, 0, 0, 1079, 1034, 1, 0, 0, 0, 1080, 1083, 1, 0, 0, 0, 1081, 1079, 1, 0, 0, 0, 1081, 1082, 1, 0, 0, 0, 1082, 65, 1, 0, 0, 0, 1083,
    1081, 1, 0, 0, 0, 1084, 1085, 5, 115, 0, 0, 1085, 1090, 5, 3, 0, 0, 1086, 1091, 5, 81, 0, 0, 1087, 1088, 7, 14, 0, 0, 1088, 1089, 5, 5, 0, 0, 1089, 1091, 3, 166, 83, 0, 1090, 1086, 1, 0, 0, 0, 1090,
    1087, 1, 0, 0, 0, 1091, 1092, 1, 0, 0, 0, 1092, 1093, 5, 4, 0, 0, 1093, 67, 1, 0, 0, 0, 1094, 1095, 7, 15, 0, 0, 1095, 69, 1, 0, 0, 0, 1096, 1098, 3, 48, 24, 0, 1097, 1096, 1, 0, 0, 0, 1097, 1098,
    1, 0, 0, 0, 1098, 1104, 1, 0, 0, 0, 1099, 1105, 5, 88, 0, 0, 1100, 1105, 5, 122, 0, 0, 1101, 1102, 5, 88, 0, 0, 1102, 1103, 5, 108, 0, 0, 1103, 1105, 7, 8, 0, 0, 1104, 1099, 1, 0, 0, 0, 1104, 1100,
    1, 0, 0, 0, 1104, 1101, 1, 0, 0, 0, 1105, 1106, 1, 0, 0, 0, 1106, 1110, 5, 91, 0, 0, 1107, 1108, 3, 178, 89, 0, 1108, 1109, 5, 2, 0, 0, 1109, 1111, 1, 0, 0, 0, 1110, 1107, 1, 0, 0, 0, 1110, 1111, 1,
    0, 0, 0, 1111, 1112, 1, 0, 0, 0, 1112, 1115, 3, 180, 90, 0, 1113, 1114, 5, 33, 0, 0, 1114, 1116, 3, 202, 101, 0, 1115, 1113, 1, 0, 0, 0, 1115, 1116, 1, 0, 0, 0, 1116, 1128, 1, 0, 0, 0, 1117, 1118,
    5, 3, 0, 0, 1118, 1123, 3, 184, 92, 0, 1119, 1120, 5, 5, 0, 0, 1120, 1122, 3, 184, 92, 0, 1121, 1119, 1, 0, 0, 0, 1122, 1125, 1, 0, 0, 0, 1123, 1121, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124, 1126,
    1, 0, 0, 0, 1125, 1123, 1, 0, 0, 0, 1126, 1127, 5, 4, 0, 0, 1127, 1129, 1, 0, 0, 0, 1128, 1117, 1, 0, 0, 0, 1128, 1129, 1, 0, 0, 0, 1129, 1166, 1, 0, 0, 0, 1130, 1131, 5, 144, 0, 0, 1131, 1132, 5,
    3, 0, 0, 1132, 1137, 3, 64, 32, 0, 1133, 1134, 5, 5, 0, 0, 1134, 1136, 3, 64, 32, 0, 1135, 1133, 1, 0, 0, 0, 1136, 1139, 1, 0, 0, 0, 1137, 1135, 1, 0, 0, 0, 1137, 1138, 1, 0, 0, 0, 1138, 1140, 1, 0,
    0, 0, 1139, 1137, 1, 0, 0, 0, 1140, 1155, 5, 4, 0, 0, 1141, 1142, 5, 5, 0, 0, 1142, 1143, 5, 3, 0, 0, 1143, 1148, 3, 64, 32, 0, 1144, 1145, 5, 5, 0, 0, 1145, 1147, 3, 64, 32, 0, 1146, 1144, 1, 0, 0,
    0, 1147, 1150, 1, 0, 0, 0, 1148, 1146, 1, 0, 0, 0, 1148, 1149, 1, 0, 0, 0, 1149, 1151, 1, 0, 0, 0, 1150, 1148, 1, 0, 0, 0, 1151, 1152, 5, 4, 0, 0, 1152, 1154, 1, 0, 0, 0, 1153, 1141, 1, 0, 0, 0,
    1154, 1157, 1, 0, 0, 0, 1155, 1153, 1, 0, 0, 0, 1155, 1156, 1, 0, 0, 0, 1156, 1160, 1, 0, 0, 0, 1157, 1155, 1, 0, 0, 0, 1158, 1160, 3, 82, 41, 0, 1159, 1130, 1, 0, 0, 0, 1159, 1158, 1, 0, 0, 0,
    1160, 1162, 1, 0, 0, 0, 1161, 1163, 3, 74, 37, 0, 1162, 1161, 1, 0, 0, 0, 1162, 1163, 1, 0, 0, 0, 1163, 1167, 1, 0, 0, 0, 1164, 1165, 5, 56, 0, 0, 1165, 1167, 5, 144, 0, 0, 1166, 1159, 1, 0, 0, 0,
    1166, 1164, 1, 0, 0, 0, 1167, 1169, 1, 0, 0, 0, 1168, 1170, 3, 72, 36, 0, 1169, 1168, 1, 0, 0, 0, 1169, 1170, 1, 0, 0, 0, 1170, 71, 1, 0, 0, 0, 1171, 1172, 5, 124, 0, 0, 1172, 1177, 3, 96, 48, 0,
    1173, 1174, 5, 5, 0, 0, 1174, 1176, 3, 96, 48, 0, 1175, 1173, 1, 0, 0, 0, 1176, 1179, 1, 0, 0, 0, 1177, 1175, 1, 0, 0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 73, 1, 0, 0, 0, 1179, 1177, 1, 0, 0, 0, 1180,
    1181, 5, 107, 0, 0, 1181, 1196, 5, 48, 0, 0, 1182, 1183, 5, 3, 0, 0, 1183, 1188, 3, 24, 12, 0, 1184, 1185, 5, 5, 0, 0, 1185, 1187, 3, 24, 12, 0, 1186, 1184, 1, 0, 0, 0, 1187, 1190, 1, 0, 0, 0, 1188,
    1186, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1191, 1, 0, 0, 0, 1190, 1188, 1, 0, 0, 0, 1191, 1194, 5, 4, 0, 0, 1192, 1193, 5, 148, 0, 0, 1193, 1195, 3, 64, 32, 0, 1194, 1192, 1, 0, 0, 0, 1194,
    1195, 1, 0, 0, 0, 1195, 1197, 1, 0, 0, 0, 1196, 1182, 1, 0, 0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 1198, 1, 0, 0, 0, 1198, 1225, 5, 183, 0, 0, 1199, 1226, 5, 184, 0, 0, 1200, 1201, 5, 141, 0, 0, 1201,
    1204, 5, 131, 0, 0, 1202, 1205, 3, 184, 92, 0, 1203, 1205, 3, 106, 53, 0, 1204, 1202, 1, 0, 0, 0, 1204, 1203, 1, 0, 0, 0, 1205, 1206, 1, 0, 0, 0, 1206, 1207, 5, 6, 0, 0, 1207, 1218, 3, 64, 32, 0,
    1208, 1211, 5, 5, 0, 0, 1209, 1212, 3, 184, 92, 0, 1210, 1212, 3, 106, 53, 0, 1211, 1209, 1, 0, 0, 0, 1211, 1210, 1, 0, 0, 0, 1212, 1213, 1, 0, 0, 0, 1213, 1214, 5, 6, 0, 0, 1214, 1215, 3, 64, 32,
    0, 1215, 1217, 1, 0, 0, 0, 1216, 1208, 1, 0, 0, 0, 1217, 1220, 1, 0, 0, 0, 1218, 1216, 1, 0, 0, 0, 1218, 1219, 1, 0, 0, 0, 1219, 1223, 1, 0, 0, 0, 1220, 1218, 1, 0, 0, 0, 1221, 1222, 5, 148, 0, 0,
    1222, 1224, 3, 64, 32, 0, 1223, 1221, 1, 0, 0, 0, 1223, 1224, 1, 0, 0, 0, 1224, 1226, 1, 0, 0, 0, 1225, 1199, 1, 0, 0, 0, 1225, 1200, 1, 0, 0, 0, 1226, 75, 1, 0, 0, 0, 1227, 1231, 5, 112, 0, 0,
    1228, 1229, 3, 178, 89, 0, 1229, 1230, 5, 2, 0, 0, 1230, 1232, 1, 0, 0, 0, 1231, 1228, 1, 0, 0, 0, 1231, 1232, 1, 0, 0, 0, 1232, 1233, 1, 0, 0, 0, 1233, 1240, 3, 198, 99, 0, 1234, 1235, 5, 6, 0, 0,
    1235, 1241, 3, 78, 39, 0, 1236, 1237, 5, 3, 0, 0, 1237, 1238, 3, 78, 39, 0, 1238, 1239, 5, 4, 0, 0, 1239, 1241, 1, 0, 0, 0, 1240, 1234, 1, 0, 0, 0, 1240, 1236, 1, 0, 0, 0, 1240, 1241, 1, 0, 0, 0,
    1241, 77, 1, 0, 0, 0, 1242, 1246, 3, 34, 17, 0, 1243, 1246, 3, 174, 87, 0, 1244, 1246, 5, 188, 0, 0, 1245, 1242, 1, 0, 0, 0, 1245, 1243, 1, 0, 0, 0, 1245, 1244, 1, 0, 0, 0, 1246, 79, 1, 0, 0, 0,
    1247, 1258, 5, 119, 0, 0, 1248, 1259, 3, 186, 93, 0, 1249, 1250, 3, 178, 89, 0, 1250, 1251, 5, 2, 0, 0, 1251, 1253, 1, 0, 0, 0, 1252, 1249, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253, 1256, 1, 0, 0,
    0, 1254, 1257, 3, 180, 90, 0, 1255, 1257, 3, 190, 95, 0, 1256, 1254, 1, 0, 0, 0, 1256, 1255, 1, 0, 0, 0, 1257, 1259, 1, 0, 0, 0, 1258, 1248, 1, 0, 0, 0, 1258, 1252, 1, 0, 0, 0, 1258, 1259, 1, 0, 0,
    0, 1259, 81, 1, 0, 0, 0, 1260, 1262, 3, 130, 65, 0, 1261, 1260, 1, 0, 0, 0, 1261, 1262, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1269, 3, 86, 43, 0, 1264, 1265, 3, 102, 51, 0, 1265, 1266, 3, 86,
    43, 0, 1266, 1268, 1, 0, 0, 0, 1267, 1264, 1, 0, 0, 0, 1268, 1271, 1, 0, 0, 0, 1269, 1267, 1, 0, 0, 0, 1269, 1270, 1, 0, 0, 0, 1270, 1273, 1, 0, 0, 0, 1271, 1269, 1, 0, 0, 0, 1272, 1274, 3, 132, 66,
    0, 1273, 1272, 1, 0, 0, 0, 1273, 1274, 1, 0, 0, 0, 1274, 1276, 1, 0, 0, 0, 1275, 1277, 3, 134, 67, 0, 1276, 1275, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 83, 1, 0, 0, 0, 1278, 1286, 3, 94, 47, 0,
    1279, 1280, 3, 98, 49, 0, 1280, 1282, 3, 94, 47, 0, 1281, 1283, 3, 100, 50, 0, 1282, 1281, 1, 0, 0, 0, 1282, 1283, 1, 0, 0, 0, 1283, 1285, 1, 0, 0, 0, 1284, 1279, 1, 0, 0, 0, 1285, 1288, 1, 0, 0, 0,
    1286, 1284, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 85, 1, 0, 0, 0, 1288, 1286, 1, 0, 0, 0, 1289, 1291, 5, 130, 0, 0, 1290, 1292, 7, 16, 0, 0, 1291, 1290, 1, 0, 0, 0, 1291, 1292, 1, 0, 0, 0, 1292,
    1293, 1, 0, 0, 0, 1293, 1298, 3, 96, 48, 0, 1294, 1295, 5, 5, 0, 0, 1295, 1297, 3, 96, 48, 0, 1296, 1294, 1, 0, 0, 0, 1297, 1300, 1, 0, 0, 0, 1298, 1296, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299,
    1313, 1, 0, 0, 0, 1300, 1298, 1, 0, 0, 0, 1301, 1311, 5, 75, 0, 0, 1302, 1307, 3, 94, 47, 0, 1303, 1304, 5, 5, 0, 0, 1304, 1306, 3, 94, 47, 0, 1305, 1303, 1, 0, 0, 0, 1306, 1309, 1, 0, 0, 0, 1307,
    1305, 1, 0, 0, 0, 1307, 1308, 1, 0, 0, 0, 1308, 1312, 1, 0, 0, 0, 1309, 1307, 1, 0, 0, 0, 1310, 1312, 3, 84, 42, 0, 1311, 1302, 1, 0, 0, 0, 1311, 1310, 1, 0, 0, 0, 1312, 1314, 1, 0, 0, 0, 1313,
    1301, 1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1317, 1, 0, 0, 0, 1315, 1316, 5, 148, 0, 0, 1316, 1318, 3, 64, 32, 0, 1317, 1315, 1, 0, 0, 0, 1317, 1318, 1, 0, 0, 0, 1318, 1333, 1, 0, 0, 0, 1319,
    1320, 5, 78, 0, 0, 1320, 1321, 5, 40, 0, 0, 1321, 1326, 3, 64, 32, 0, 1322, 1323, 5, 5, 0, 0, 1323, 1325, 3, 64, 32, 0, 1324, 1322, 1, 0, 0, 0, 1325, 1328, 1, 0, 0, 0, 1326, 1324, 1, 0, 0, 0, 1326,
    1327, 1, 0, 0, 0, 1327, 1331, 1, 0, 0, 0, 1328, 1326, 1, 0, 0, 0, 1329, 1330, 5, 79, 0, 0, 1330, 1332, 3, 64, 32, 0, 1331, 1329, 1, 0, 0, 0, 1331, 1332, 1, 0, 0, 0, 1332, 1334, 1, 0, 0, 0, 1333,
    1319, 1, 0, 0, 0, 1333, 1334, 1, 0, 0, 0, 1334, 1349, 1, 0, 0, 0, 1335, 1336, 5, 174, 0, 0, 1336, 1337, 3, 206, 103, 0, 1337, 1338, 5, 33, 0, 0, 1338, 1346, 3, 116, 58, 0, 1339, 1340, 5, 5, 0, 0,
    1340, 1341, 3, 206, 103, 0, 1341, 1342, 5, 33, 0, 0, 1342, 1343, 3, 116, 58, 0, 1343, 1345, 1, 0, 0, 0, 1344, 1339, 1, 0, 0, 0, 1345, 1348, 1, 0, 0, 0, 1346, 1344, 1, 0, 0, 0, 1346, 1347, 1, 0, 0,
    0, 1347, 1350, 1, 0, 0, 0, 1348, 1346, 1, 0, 0, 0, 1349, 1335, 1, 0, 0, 0, 1349, 1350, 1, 0, 0, 0, 1350, 1380, 1, 0, 0, 0, 1351, 1352, 5, 144, 0, 0, 1352, 1353, 5, 3, 0, 0, 1353, 1358, 3, 64, 32, 0,
    1354, 1355, 5, 5, 0, 0, 1355, 1357, 3, 64, 32, 0, 1356, 1354, 1, 0, 0, 0, 1357, 1360, 1, 0, 0, 0, 1358, 1356, 1, 0, 0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 1361, 1, 0, 0, 0, 1360, 1358, 1, 0, 0, 0,
    1361, 1376, 5, 4, 0, 0, 1362, 1363, 5, 5, 0, 0, 1363, 1364, 5, 3, 0, 0, 1364, 1369, 3, 64, 32, 0, 1365, 1366, 5, 5, 0, 0, 1366, 1368, 3, 64, 32, 0, 1367, 1365, 1, 0, 0, 0, 1368, 1371, 1, 0, 0, 0,
    1369, 1367, 1, 0, 0, 0, 1369, 1370, 1, 0, 0, 0, 1370, 1372, 1, 0, 0, 0, 1371, 1369, 1, 0, 0, 0, 1372, 1373, 5, 4, 0, 0, 1373, 1375, 1, 0, 0, 0, 1374, 1362, 1, 0, 0, 0, 1375, 1378, 1, 0, 0, 0, 1376,
    1374, 1, 0, 0, 0, 1376, 1377, 1, 0, 0, 0, 1377, 1380, 1, 0, 0, 0, 1378, 1376, 1, 0, 0, 0, 1379, 1289, 1, 0, 0, 0, 1379, 1351, 1, 0, 0, 0, 1380, 87, 1, 0, 0, 0, 1381, 1382, 3, 82, 41, 0, 1382, 89, 1,
    0, 0, 0, 1383, 1385, 3, 130, 65, 0, 1384, 1383, 1, 0, 0, 0, 1384, 1385, 1, 0, 0, 0, 1385, 1386, 1, 0, 0, 0, 1386, 1388, 3, 86, 43, 0, 1387, 1389, 3, 132, 66, 0, 1388, 1387, 1, 0, 0, 0, 1388, 1389,
    1, 0, 0, 0, 1389, 1391, 1, 0, 0, 0, 1390, 1392, 3, 134, 67, 0, 1391, 1390, 1, 0, 0, 0, 1391, 1392, 1, 0, 0, 0, 1392, 91, 1, 0, 0, 0, 1393, 1395, 3, 130, 65, 0, 1394, 1393, 1, 0, 0, 0, 1394, 1395, 1,
    0, 0, 0, 1395, 1396, 1, 0, 0, 0, 1396, 1406, 3, 86, 43, 0, 1397, 1399, 5, 139, 0, 0, 1398, 1400, 5, 29, 0, 0, 1399, 1398, 1, 0, 0, 0, 1399, 1400, 1, 0, 0, 0, 1400, 1404, 1, 0, 0, 0, 1401, 1404, 5,
    90, 0, 0, 1402, 1404, 5, 68, 0, 0, 1403, 1397, 1, 0, 0, 0, 1403, 1401, 1, 0, 0, 0, 1403, 1402, 1, 0, 0, 0, 1404, 1405, 1, 0, 0, 0, 1405, 1407, 3, 86, 43, 0, 1406, 1403, 1, 0, 0, 0, 1407, 1408, 1, 0,
    0, 0, 1408, 1406, 1, 0, 0, 0, 1408, 1409, 1, 0, 0, 0, 1409, 1411, 1, 0, 0, 0, 1410, 1412, 3, 132, 66, 0, 1411, 1410, 1, 0, 0, 0, 1411, 1412, 1, 0, 0, 0, 1412, 1414, 1, 0, 0, 0, 1413, 1415, 3, 134,
    67, 0, 1414, 1413, 1, 0, 0, 0, 1414, 1415, 1, 0, 0, 0, 1415, 93, 1, 0, 0, 0, 1416, 1417, 3, 178, 89, 0, 1417, 1418, 5, 2, 0, 0, 1418, 1420, 1, 0, 0, 0, 1419, 1416, 1, 0, 0, 0, 1419, 1420, 1, 0, 0,
    0, 1420, 1421, 1, 0, 0, 0, 1421, 1426, 3, 180, 90, 0, 1422, 1424, 5, 33, 0, 0, 1423, 1422, 1, 0, 0, 0, 1423, 1424, 1, 0, 0, 0, 1424, 1425, 1, 0, 0, 0, 1425, 1427, 3, 202, 101, 0, 1426, 1423, 1, 0,
    0, 0, 1426, 1427, 1, 0, 0, 0, 1427, 1433, 1, 0, 0, 0, 1428, 1429, 5, 85, 0, 0, 1429, 1430, 5, 40, 0, 0, 1430, 1434, 3, 190, 95, 0, 1431, 1432, 5, 102, 0, 0, 1432, 1434, 5, 85, 0, 0, 1433, 1428, 1,
    0, 0, 0, 1433, 1431, 1, 0, 0, 0, 1433, 1434, 1, 0, 0, 0, 1434, 1481, 1, 0, 0, 0, 1435, 1436, 3, 178, 89, 0, 1436, 1437, 5, 2, 0, 0, 1437, 1439, 1, 0, 0, 0, 1438, 1435, 1, 0, 0, 0, 1438, 1439, 1, 0,
    0, 0, 1439, 1440, 1, 0, 0, 0, 1440, 1441, 3, 218, 109, 0, 1441, 1442, 5, 3, 0, 0, 1442, 1447, 3, 64, 32, 0, 1443, 1444, 5, 5, 0, 0, 1444, 1446, 3, 64, 32, 0, 1445, 1443, 1, 0, 0, 0, 1446, 1449, 1,
    0, 0, 0, 1447, 1445, 1, 0, 0, 0, 1447, 1448, 1, 0, 0, 0, 1448, 1450, 1, 0, 0, 0, 1449, 1447, 1, 0, 0, 0, 1450, 1455, 5, 4, 0, 0, 1451, 1453, 5, 33, 0, 0, 1452, 1451, 1, 0, 0, 0, 1452, 1453, 1, 0, 0,
    0, 1453, 1454, 1, 0, 0, 0, 1454, 1456, 3, 202, 101, 0, 1455, 1452, 1, 0, 0, 0, 1455, 1456, 1, 0, 0, 0, 1456, 1481, 1, 0, 0, 0, 1457, 1467, 5, 3, 0, 0, 1458, 1463, 3, 94, 47, 0, 1459, 1460, 5, 5, 0,
    0, 1460, 1462, 3, 94, 47, 0, 1461, 1459, 1, 0, 0, 0, 1462, 1465, 1, 0, 0, 0, 1463, 1461, 1, 0, 0, 0, 1463, 1464, 1, 0, 0, 0, 1464, 1468, 1, 0, 0, 0, 1465, 1463, 1, 0, 0, 0, 1466, 1468, 3, 84, 42, 0,
    1467, 1458, 1, 0, 0, 0, 1467, 1466, 1, 0, 0, 0, 1468, 1469, 1, 0, 0, 0, 1469, 1470, 5, 4, 0, 0, 1470, 1481, 1, 0, 0, 0, 1471, 1472, 5, 3, 0, 0, 1472, 1473, 3, 82, 41, 0, 1473, 1478, 5, 4, 0, 0,
    1474, 1476, 5, 33, 0, 0, 1475, 1474, 1, 0, 0, 0, 1475, 1476, 1, 0, 0, 0, 1476, 1477, 1, 0, 0, 0, 1477, 1479, 3, 202, 101, 0, 1478, 1475, 1, 0, 0, 0, 1478, 1479, 1, 0, 0, 0, 1479, 1481, 1, 0, 0, 0,
    1480, 1419, 1, 0, 0, 0, 1480, 1438, 1, 0, 0, 0, 1480, 1457, 1, 0, 0, 0, 1480, 1471, 1, 0, 0, 0, 1481, 95, 1, 0, 0, 0, 1482, 1495, 5, 7, 0, 0, 1483, 1484, 3, 180, 90, 0, 1484, 1485, 5, 2, 0, 0, 1485,
    1486, 5, 7, 0, 0, 1486, 1495, 1, 0, 0, 0, 1487, 1492, 3, 64, 32, 0, 1488, 1490, 5, 33, 0, 0, 1489, 1488, 1, 0, 0, 0, 1489, 1490, 1, 0, 0, 0, 1490, 1491, 1, 0, 0, 0, 1491, 1493, 3, 170, 85, 0, 1492,
    1489, 1, 0, 0, 0, 1492, 1493, 1, 0, 0, 0, 1493, 1495, 1, 0, 0, 0, 1494, 1482, 1, 0, 0, 0, 1494, 1483, 1, 0, 0, 0, 1494, 1487, 1, 0, 0, 0, 1495, 97, 1, 0, 0, 0, 1496, 1510, 5, 5, 0, 0, 1497, 1499, 5,
    100, 0, 0, 1498, 1497, 1, 0, 0, 0, 1498, 1499, 1, 0, 0, 0, 1499, 1506, 1, 0, 0, 0, 1500, 1502, 5, 96, 0, 0, 1501, 1503, 5, 110, 0, 0, 1502, 1501, 1, 0, 0, 0, 1502, 1503, 1, 0, 0, 0, 1503, 1507, 1,
    0, 0, 0, 1504, 1507, 5, 87, 0, 0, 1505, 1507, 5, 51, 0, 0, 1506, 1500, 1, 0, 0, 0, 1506, 1504, 1, 0, 0, 0, 1506, 1505, 1, 0, 0, 0, 1506, 1507, 1, 0, 0, 0, 1507, 1508, 1, 0, 0, 0, 1508, 1510, 5, 94,
    0, 0, 1509, 1496, 1, 0, 0, 0, 1509, 1498, 1, 0, 0, 0, 1510, 99, 1, 0, 0, 0, 1511, 1512, 5, 107, 0, 0, 1512, 1526, 3, 64, 32, 0, 1513, 1514, 5, 142, 0, 0, 1514, 1515, 5, 3, 0, 0, 1515, 1520, 3, 184,
    92, 0, 1516, 1517, 5, 5, 0, 0, 1517, 1519, 3, 184, 92, 0, 1518, 1516, 1, 0, 0, 0, 1519, 1522, 1, 0, 0, 0, 1520, 1518, 1, 0, 0, 0, 1520, 1521, 1, 0, 0, 0, 1521, 1523, 1, 0, 0, 0, 1522, 1520, 1, 0, 0,
    0, 1523, 1524, 5, 4, 0, 0, 1524, 1526, 1, 0, 0, 0, 1525, 1511, 1, 0, 0, 0, 1525, 1513, 1, 0, 0, 0, 1526, 101, 1, 0, 0, 0, 1527, 1529, 5, 139, 0, 0, 1528, 1530, 5, 29, 0, 0, 1529, 1528, 1, 0, 0, 0,
    1529, 1530, 1, 0, 0, 0, 1530, 1534, 1, 0, 0, 0, 1531, 1534, 5, 90, 0, 0, 1532, 1534, 5, 68, 0, 0, 1533, 1527, 1, 0, 0, 0, 1533, 1531, 1, 0, 0, 0, 1533, 1532, 1, 0, 0, 0, 1534, 103, 1, 0, 0, 0, 1535,
    1537, 3, 48, 24, 0, 1536, 1535, 1, 0, 0, 0, 1536, 1537, 1, 0, 0, 0, 1537, 1538, 1, 0, 0, 0, 1538, 1541, 5, 141, 0, 0, 1539, 1540, 5, 108, 0, 0, 1540, 1542, 7, 8, 0, 0, 1541, 1539, 1, 0, 0, 0, 1541,
    1542, 1, 0, 0, 0, 1542, 1543, 1, 0, 0, 0, 1543, 1544, 3, 110, 55, 0, 1544, 1547, 5, 131, 0, 0, 1545, 1548, 3, 184, 92, 0, 1546, 1548, 3, 106, 53, 0, 1547, 1545, 1, 0, 0, 0, 1547, 1546, 1, 0, 0, 0,
    1548, 1549, 1, 0, 0, 0, 1549, 1550, 5, 6, 0, 0, 1550, 1561, 3, 64, 32, 0, 1551, 1554, 5, 5, 0, 0, 1552, 1555, 3, 184, 92, 0, 1553, 1555, 3, 106, 53, 0, 1554, 1552, 1, 0, 0, 0, 1554, 1553, 1, 0, 0,
    0, 1555, 1556, 1, 0, 0, 0, 1556, 1557, 5, 6, 0, 0, 1557, 1558, 3, 64, 32, 0, 1558, 1560, 1, 0, 0, 0, 1559, 1551, 1, 0, 0, 0, 1560, 1563, 1, 0, 0, 0, 1561, 1559, 1, 0, 0, 0, 1561, 1562, 1, 0, 0, 0,
    1562, 1576, 1, 0, 0, 0, 1563, 1561, 1, 0, 0, 0, 1564, 1574, 5, 75, 0, 0, 1565, 1570, 3, 94, 47, 0, 1566, 1567, 5, 5, 0, 0, 1567, 1569, 3, 94, 47, 0, 1568, 1566, 1, 0, 0, 0, 1569, 1572, 1, 0, 0, 0,
    1570, 1568, 1, 0, 0, 0, 1570, 1571, 1, 0, 0, 0, 1571, 1575, 1, 0, 0, 0, 1572, 1570, 1, 0, 0, 0, 1573, 1575, 3, 84, 42, 0, 1574, 1565, 1, 0, 0, 0, 1574, 1573, 1, 0, 0, 0, 1575, 1577, 1, 0, 0, 0,
    1576, 1564, 1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577, 1580, 1, 0, 0, 0, 1578, 1579, 5, 148, 0, 0, 1579, 1581, 3, 64, 32, 0, 1580, 1578, 1, 0, 0, 0, 1580, 1581, 1, 0, 0, 0, 1581, 1583, 1, 0, 0, 0,
    1582, 1584, 3, 72, 36, 0, 1583, 1582, 1, 0, 0, 0, 1583, 1584, 1, 0, 0, 0, 1584, 105, 1, 0, 0, 0, 1585, 1586, 5, 3, 0, 0, 1586, 1591, 3, 184, 92, 0, 1587, 1588, 5, 5, 0, 0, 1588, 1590, 3, 184, 92, 0,
    1589, 1587, 1, 0, 0, 0, 1590, 1593, 1, 0, 0, 0, 1591, 1589, 1, 0, 0, 0, 1591, 1592, 1, 0, 0, 0, 1592, 1594, 1, 0, 0, 0, 1593, 1591, 1, 0, 0, 0, 1594, 1595, 5, 4, 0, 0, 1595, 107, 1, 0, 0, 0, 1596,
    1598, 3, 48, 24, 0, 1597, 1596, 1, 0, 0, 0, 1597, 1598, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599, 1602, 5, 141, 0, 0, 1600, 1601, 5, 108, 0, 0, 1601, 1603, 7, 8, 0, 0, 1602, 1600, 1, 0, 0, 0, 1602,
    1603, 1, 0, 0, 0, 1603, 1604, 1, 0, 0, 0, 1604, 1605, 3, 110, 55, 0, 1605, 1608, 5, 131, 0, 0, 1606, 1609, 3, 184, 92, 0, 1607, 1609, 3, 106, 53, 0, 1608, 1606, 1, 0, 0, 0, 1608, 1607, 1, 0, 0, 0,
    1609, 1610, 1, 0, 0, 0, 1610, 1611, 5, 6, 0, 0, 1611, 1622, 3, 64, 32, 0, 1612, 1615, 5, 5, 0, 0, 1613, 1616, 3, 184, 92, 0, 1614, 1616, 3, 106, 53, 0, 1615, 1613, 1, 0, 0, 0, 1615, 1614, 1, 0, 0,
    0, 1616, 1617, 1, 0, 0, 0, 1617, 1618, 5, 6, 0, 0, 1618, 1619, 3, 64, 32, 0, 1619, 1621, 1, 0, 0, 0, 1620, 1612, 1, 0, 0, 0, 1621, 1624, 1, 0, 0, 0, 1622, 1620, 1, 0, 0, 0, 1622, 1623, 1, 0, 0, 0,
    1623, 1627, 1, 0, 0, 0, 1624, 1622, 1, 0, 0, 0, 1625, 1626, 5, 148, 0, 0, 1626, 1628, 3, 64, 32, 0, 1627, 1625, 1, 0, 0, 0, 1627, 1628, 1, 0, 0, 0, 1628, 1630, 1, 0, 0, 0, 1629, 1631, 3, 72, 36, 0,
    1630, 1629, 1, 0, 0, 0, 1630, 1631, 1, 0, 0, 0, 1631, 1636, 1, 0, 0, 0, 1632, 1634, 3, 132, 66, 0, 1633, 1632, 1, 0, 0, 0, 1633, 1634, 1, 0, 0, 0, 1634, 1635, 1, 0, 0, 0, 1635, 1637, 3, 134, 67, 0,
    1636, 1633, 1, 0, 0, 0, 1636, 1637, 1, 0, 0, 0, 1637, 109, 1, 0, 0, 0, 1638, 1639, 3, 178, 89, 0, 1639, 1640, 5, 2, 0, 0, 1640, 1642, 1, 0, 0, 0, 1641, 1638, 1, 0, 0, 0, 1641, 1642, 1, 0, 0, 0,
    1642, 1643, 1, 0, 0, 0, 1643, 1646, 3, 180, 90, 0, 1644, 1645, 5, 33, 0, 0, 1645, 1647, 3, 208, 104, 0, 1646, 1644, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0, 1647, 1653, 1, 0, 0, 0, 1648, 1649, 5, 85, 0,
    0, 1649, 1650, 5, 40, 0, 0, 1650, 1654, 3, 190, 95, 0, 1651, 1652, 5, 102, 0, 0, 1652, 1654, 5, 85, 0, 0, 1653, 1648, 1, 0, 0, 0, 1653, 1651, 1, 0, 0, 0, 1653, 1654, 1, 0, 0, 0, 1654, 111, 1, 0, 0,
    0, 1655, 1657, 5, 143, 0, 0, 1656, 1658, 3, 178, 89, 0, 1657, 1656, 1, 0, 0, 0, 1657, 1658, 1, 0, 0, 0, 1658, 1661, 1, 0, 0, 0, 1659, 1660, 5, 91, 0, 0, 1660, 1662, 3, 210, 105, 0, 1661, 1659, 1, 0,
    0, 0, 1661, 1662, 1, 0, 0, 0, 1662, 113, 1, 0, 0, 0, 1663, 1664, 5, 178, 0, 0, 1664, 1665, 5, 3, 0, 0, 1665, 1666, 5, 148, 0, 0, 1666, 1667, 3, 64, 32, 0, 1667, 1668, 5, 4, 0, 0, 1668, 115, 1, 0, 0,
    0, 1669, 1671, 5, 3, 0, 0, 1670, 1672, 3, 212, 106, 0, 1671, 1670, 1, 0, 0, 0, 1671, 1672, 1, 0, 0, 0, 1672, 1683, 1, 0, 0, 0, 1673, 1674, 5, 153, 0, 0, 1674, 1675, 5, 40, 0, 0, 1675, 1680, 3, 64,
    32, 0, 1676, 1677, 5, 5, 0, 0, 1677, 1679, 3, 64, 32, 0, 1678, 1676, 1, 0, 0, 0, 1679, 1682, 1, 0, 0, 0, 1680, 1678, 1, 0, 0, 0, 1680, 1681, 1, 0, 0, 0, 1681, 1684, 1, 0, 0, 0, 1682, 1680, 1, 0, 0,
    0, 1683, 1673, 1, 0, 0, 0, 1683, 1684, 1, 0, 0, 0, 1684, 1685, 1, 0, 0, 0, 1685, 1686, 5, 109, 0, 0, 1686, 1687, 5, 40, 0, 0, 1687, 1692, 3, 136, 68, 0, 1688, 1689, 5, 5, 0, 0, 1689, 1691, 3, 136,
    68, 0, 1690, 1688, 1, 0, 0, 0, 1691, 1694, 1, 0, 0, 0, 1692, 1690, 1, 0, 0, 0, 1692, 1693, 1, 0, 0, 0, 1693, 1696, 1, 0, 0, 0, 1694, 1692, 1, 0, 0, 0, 1695, 1697, 3, 120, 60, 0, 1696, 1695, 1, 0, 0,
    0, 1696, 1697, 1, 0, 0, 0, 1697, 1698, 1, 0, 0, 0, 1698, 1699, 5, 4, 0, 0, 1699, 117, 1, 0, 0, 0, 1700, 1734, 5, 152, 0, 0, 1701, 1735, 3, 206, 103, 0, 1702, 1704, 5, 3, 0, 0, 1703, 1705, 3, 212,
    106, 0, 1704, 1703, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705, 1716, 1, 0, 0, 0, 1706, 1707, 5, 153, 0, 0, 1707, 1708, 5, 40, 0, 0, 1708, 1713, 3, 64, 32, 0, 1709, 1710, 5, 5, 0, 0, 1710, 1712, 3,
    64, 32, 0, 1711, 1709, 1, 0, 0, 0, 1712, 1715, 1, 0, 0, 0, 1713, 1711, 1, 0, 0, 0, 1713, 1714, 1, 0, 0, 0, 1714, 1717, 1, 0, 0, 0, 1715, 1713, 1, 0, 0, 0, 1716, 1706, 1, 0, 0, 0, 1716, 1717, 1, 0,
    0, 0, 1717, 1728, 1, 0, 0, 0, 1718, 1719, 5, 109, 0, 0, 1719, 1720, 5, 40, 0, 0, 1720, 1725, 3, 136, 68, 0, 1721, 1722, 5, 5, 0, 0, 1722, 1724, 3, 136, 68, 0, 1723, 1721, 1, 0, 0, 0, 1724, 1727, 1,
    0, 0, 0, 1725, 1723, 1, 0, 0, 0, 1725, 1726, 1, 0, 0, 0, 1726, 1729, 1, 0, 0, 0, 1727, 1725, 1, 0, 0, 0, 1728, 1718, 1, 0, 0, 0, 1728, 1729, 1, 0, 0, 0, 1729, 1731, 1, 0, 0, 0, 1730, 1732, 3, 120,
    60, 0, 1731, 1730, 1, 0, 0, 0, 1731, 1732, 1, 0, 0, 0, 1732, 1733, 1, 0, 0, 0, 1733, 1735, 5, 4, 0, 0, 1734, 1701, 1, 0, 0, 0, 1734, 1702, 1, 0, 0, 0, 1735, 119, 1, 0, 0, 0, 1736, 1744, 3, 122, 61,
    0, 1737, 1738, 5, 180, 0, 0, 1738, 1739, 5, 101, 0, 0, 1739, 1745, 5, 182, 0, 0, 1740, 1741, 5, 157, 0, 0, 1741, 1745, 5, 127, 0, 0, 1742, 1745, 5, 78, 0, 0, 1743, 1745, 5, 181, 0, 0, 1744, 1737, 1,
    0, 0, 0, 1744, 1740, 1, 0, 0, 0, 1744, 1742, 1, 0, 0, 0, 1744, 1743, 1, 0, 0, 0, 1744, 1745, 1, 0, 0, 0, 1745, 121, 1, 0, 0, 0, 1746, 1753, 7, 17, 0, 0, 1747, 1754, 3, 144, 72, 0, 1748, 1749, 5, 39,
    0, 0, 1749, 1750, 3, 140, 70, 0, 1750, 1751, 5, 32, 0, 0, 1751, 1752, 3, 142, 71, 0, 1752, 1754, 1, 0, 0, 0, 1753, 1747, 1, 0, 0, 0, 1753, 1748, 1, 0, 0, 0, 1754, 123, 1, 0, 0, 0, 1755, 1756, 3,
    214, 107, 0, 1756, 1766, 5, 3, 0, 0, 1757, 1762, 3, 64, 32, 0, 1758, 1759, 5, 5, 0, 0, 1759, 1761, 3, 64, 32, 0, 1760, 1758, 1, 0, 0, 0, 1761, 1764, 1, 0, 0, 0, 1762, 1760, 1, 0, 0, 0, 1762, 1763,
    1, 0, 0, 0, 1763, 1767, 1, 0, 0, 0, 1764, 1762, 1, 0, 0, 0, 1765, 1767, 5, 7, 0, 0, 1766, 1757, 1, 0, 0, 0, 1766, 1765, 1, 0, 0, 0, 1767, 1768, 1, 0, 0, 0, 1768, 1769, 5, 4, 0, 0, 1769, 125, 1, 0,
    0, 0, 1770, 1771, 3, 216, 108, 0, 1771, 1784, 5, 3, 0, 0, 1772, 1774, 5, 62, 0, 0, 1773, 1772, 1, 0, 0, 0, 1773, 1774, 1, 0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1780, 3, 64, 32, 0, 1776, 1777, 5, 5,
    0, 0, 1777, 1779, 3, 64, 32, 0, 1778, 1776, 1, 0, 0, 0, 1779, 1782, 1, 0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1780, 1781, 1, 0, 0, 0, 1781, 1785, 1, 0, 0, 0, 1782, 1780, 1, 0, 0, 0, 1783, 1785, 5, 7, 0,
    0, 1784, 1773, 1, 0, 0, 0, 1784, 1783, 1, 0, 0, 0, 1784, 1785, 1, 0, 0, 0, 1785, 1786, 1, 0, 0, 0, 1786, 1788, 5, 4, 0, 0, 1787, 1789, 3, 114, 57, 0, 1788, 1787, 1, 0, 0, 0, 1788, 1789, 1, 0, 0, 0,
    1789, 127, 1, 0, 0, 0, 1790, 1791, 3, 146, 73, 0, 1791, 1801, 5, 3, 0, 0, 1792, 1797, 3, 64, 32, 0, 1793, 1794, 5, 5, 0, 0, 1794, 1796, 3, 64, 32, 0, 1795, 1793, 1, 0, 0, 0, 1796, 1799, 1, 0, 0, 0,
    1797, 1795, 1, 0, 0, 0, 1797, 1798, 1, 0, 0, 0, 1798, 1802, 1, 0, 0, 0, 1799, 1797, 1, 0, 0, 0, 1800, 1802, 5, 7, 0, 0, 1801, 1792, 1, 0, 0, 0, 1801, 1800, 1, 0, 0, 0, 1801, 1802, 1, 0, 0, 0, 1802,
    1803, 1, 0, 0, 0, 1803, 1805, 5, 4, 0, 0, 1804, 1806, 3, 114, 57, 0, 1805, 1804, 1, 0, 0, 0, 1805, 1806, 1, 0, 0, 0, 1806, 1807, 1, 0, 0, 0, 1807, 1810, 5, 152, 0, 0, 1808, 1811, 3, 116, 58, 0,
    1809, 1811, 3, 206, 103, 0, 1810, 1808, 1, 0, 0, 0, 1810, 1809, 1, 0, 0, 0, 1811, 129, 1, 0, 0, 0, 1812, 1814, 5, 149, 0, 0, 1813, 1815, 5, 116, 0, 0, 1814, 1813, 1, 0, 0, 0, 1814, 1815, 1, 0, 0, 0,
    1815, 1816, 1, 0, 0, 0, 1816, 1821, 3, 54, 27, 0, 1817, 1818, 5, 5, 0, 0, 1818, 1820, 3, 54, 27, 0, 1819, 1817, 1, 0, 0, 0, 1820, 1823, 1, 0, 0, 0, 1821, 1819, 1, 0, 0, 0, 1821, 1822, 1, 0, 0, 0,
    1822, 131, 1, 0, 0, 0, 1823, 1821, 1, 0, 0, 0, 1824, 1825, 5, 109, 0, 0, 1825, 1826, 5, 40, 0, 0, 1826, 1831, 3, 136, 68, 0, 1827, 1828, 5, 5, 0, 0, 1828, 1830, 3, 136, 68, 0, 1829, 1827, 1, 0, 0,
    0, 1830, 1833, 1, 0, 0, 0, 1831, 1829, 1, 0, 0, 0, 1831, 1832, 1, 0, 0, 0, 1832, 133, 1, 0, 0, 0, 1833, 1831, 1, 0, 0, 0, 1834, 1835, 5, 98, 0, 0, 1835, 1838, 3, 64, 32, 0, 1836, 1837, 7, 18, 0, 0,
    1837, 1839, 3, 64, 32, 0, 1838, 1836, 1, 0, 0, 0, 1838, 1839, 1, 0, 0, 0, 1839, 135, 1, 0, 0, 0, 1840, 1843, 3, 64, 32, 0, 1841, 1842, 5, 45, 0, 0, 1842, 1844, 3, 186, 93, 0, 1843, 1841, 1, 0, 0, 0,
    1843, 1844, 1, 0, 0, 0, 1844, 1846, 1, 0, 0, 0, 1845, 1847, 3, 138, 69, 0, 1846, 1845, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1850, 1, 0, 0, 0, 1848, 1849, 5, 175, 0, 0, 1849, 1851, 7, 19, 0, 0,
    1850, 1848, 1, 0, 0, 0, 1850, 1851, 1, 0, 0, 0, 1851, 137, 1, 0, 0, 0, 1852, 1853, 7, 20, 0, 0, 1853, 139, 1, 0, 0, 0, 1854, 1855, 3, 64, 32, 0, 1855, 1856, 5, 155, 0, 0, 1856, 1865, 1, 0, 0, 0,
    1857, 1858, 3, 64, 32, 0, 1858, 1859, 5, 158, 0, 0, 1859, 1865, 1, 0, 0, 0, 1860, 1861, 5, 157, 0, 0, 1861, 1865, 5, 127, 0, 0, 1862, 1863, 5, 156, 0, 0, 1863, 1865, 5, 155, 0, 0, 1864, 1854, 1, 0,
    0, 0, 1864, 1857, 1, 0, 0, 0, 1864, 1860, 1, 0, 0, 0, 1864, 1862, 1, 0, 0, 0, 1865, 141, 1, 0, 0, 0, 1866, 1867, 3, 64, 32, 0, 1867, 1868, 5, 155, 0, 0, 1868, 1877, 1, 0, 0, 0, 1869, 1870, 3, 64,
    32, 0, 1870, 1871, 5, 158, 0, 0, 1871, 1877, 1, 0, 0, 0, 1872, 1873, 5, 157, 0, 0, 1873, 1877, 5, 127, 0, 0, 1874, 1875, 5, 156, 0, 0, 1875, 1877, 5, 158, 0, 0, 1876, 1866, 1, 0, 0, 0, 1876, 1869,
    1, 0, 0, 0, 1876, 1872, 1, 0, 0, 0, 1876, 1874, 1, 0, 0, 0, 1877, 143, 1, 0, 0, 0, 1878, 1879, 3, 64, 32, 0, 1879, 1880, 5, 155, 0, 0, 1880, 1886, 1, 0, 0, 0, 1881, 1882, 5, 156, 0, 0, 1882, 1886,
    5, 155, 0, 0, 1883, 1884, 5, 157, 0, 0, 1884, 1886, 5, 127, 0, 0, 1885, 1878, 1, 0, 0, 0, 1885, 1881, 1, 0, 0, 0, 1885, 1883, 1, 0, 0, 0, 1886, 145, 1, 0, 0, 0, 1887, 1888, 7, 21, 0, 0, 1888, 1889,
    5, 3, 0, 0, 1889, 1890, 3, 64, 32, 0, 1890, 1891, 5, 4, 0, 0, 1891, 1892, 5, 152, 0, 0, 1892, 1894, 5, 3, 0, 0, 1893, 1895, 3, 152, 76, 0, 1894, 1893, 1, 0, 0, 0, 1894, 1895, 1, 0, 0, 0, 1895, 1896,
    1, 0, 0, 0, 1896, 1898, 3, 156, 78, 0, 1897, 1899, 3, 122, 61, 0, 1898, 1897, 1, 0, 0, 0, 1898, 1899, 1, 0, 0, 0, 1899, 1900, 1, 0, 0, 0, 1900, 1901, 5, 4, 0, 0, 1901, 1973, 1, 0, 0, 0, 1902, 1903,
    7, 22, 0, 0, 1903, 1904, 5, 3, 0, 0, 1904, 1905, 5, 4, 0, 0, 1905, 1906, 5, 152, 0, 0, 1906, 1908, 5, 3, 0, 0, 1907, 1909, 3, 152, 76, 0, 1908, 1907, 1, 0, 0, 0, 1908, 1909, 1, 0, 0, 0, 1909, 1911,
    1, 0, 0, 0, 1910, 1912, 3, 154, 77, 0, 1911, 1910, 1, 0, 0, 0, 1911, 1912, 1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 1973, 5, 4, 0, 0, 1914, 1915, 7, 23, 0, 0, 1915, 1916, 5, 3, 0, 0, 1916, 1917, 5,
    4, 0, 0, 1917, 1918, 5, 152, 0, 0, 1918, 1920, 5, 3, 0, 0, 1919, 1921, 3, 152, 76, 0, 1920, 1919, 1, 0, 0, 0, 1920, 1921, 1, 0, 0, 0, 1921, 1922, 1, 0, 0, 0, 1922, 1923, 3, 156, 78, 0, 1923, 1924,
    5, 4, 0, 0, 1924, 1973, 1, 0, 0, 0, 1925, 1926, 7, 24, 0, 0, 1926, 1927, 5, 3, 0, 0, 1927, 1929, 3, 64, 32, 0, 1928, 1930, 3, 148, 74, 0, 1929, 1928, 1, 0, 0, 0, 1929, 1930, 1, 0, 0, 0, 1930, 1932,
    1, 0, 0, 0, 1931, 1933, 3, 150, 75, 0, 1932, 1931, 1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933, 1934, 1, 0, 0, 0, 1934, 1935, 5, 4, 0, 0, 1935, 1936, 5, 152, 0, 0, 1936, 1938, 5, 3, 0, 0, 1937, 1939,
    3, 152, 76, 0, 1938, 1937, 1, 0, 0, 0, 1938, 1939, 1, 0, 0, 0, 1939, 1940, 1, 0, 0, 0, 1940, 1941, 3, 156, 78, 0, 1941, 1942, 5, 4, 0, 0, 1942, 1973, 1, 0, 0, 0, 1943, 1944, 5, 164, 0, 0, 1944,
    1945, 5, 3, 0, 0, 1945, 1946, 3, 64, 32, 0, 1946, 1947, 5, 5, 0, 0, 1947, 1948, 3, 34, 17, 0, 1948, 1949, 5, 4, 0, 0, 1949, 1950, 5, 152, 0, 0, 1950, 1952, 5, 3, 0, 0, 1951, 1953, 3, 152, 76, 0,
    1952, 1951, 1, 0, 0, 0, 1952, 1953, 1, 0, 0, 0, 1953, 1954, 1, 0, 0, 0, 1954, 1956, 3, 156, 78, 0, 1955, 1957, 3, 122, 61, 0, 1956, 1955, 1, 0, 0, 0, 1956, 1957, 1, 0, 0, 0, 1957, 1958, 1, 0, 0, 0,
    1958, 1959, 5, 4, 0, 0, 1959, 1973, 1, 0, 0, 0, 1960, 1961, 5, 165, 0, 0, 1961, 1962, 5, 3, 0, 0, 1962, 1963, 3, 64, 32, 0, 1963, 1964, 5, 4, 0, 0, 1964, 1965, 5, 152, 0, 0, 1965, 1967, 5, 3, 0, 0,
    1966, 1968, 3, 152, 76, 0, 1967, 1966, 1, 0, 0, 0, 1967, 1968, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969, 1970, 3, 156, 78, 0, 1970, 1971, 5, 4, 0, 0, 1971, 1973, 1, 0, 0, 0, 1972, 1887, 1, 0, 0, 0,
    1972, 1902, 1, 0, 0, 0, 1972, 1914, 1, 0, 0, 0, 1972, 1925, 1, 0, 0, 0, 1972, 1943, 1, 0, 0, 0, 1972, 1960, 1, 0, 0, 0, 1973, 147, 1, 0, 0, 0, 1974, 1975, 5, 5, 0, 0, 1975, 1976, 3, 34, 17, 0, 1976,
    149, 1, 0, 0, 0, 1977, 1978, 5, 5, 0, 0, 1978, 1979, 3, 34, 17, 0, 1979, 151, 1, 0, 0, 0, 1980, 1981, 5, 153, 0, 0, 1981, 1983, 5, 40, 0, 0, 1982, 1984, 3, 64, 32, 0, 1983, 1982, 1, 0, 0, 0, 1984,
    1985, 1, 0, 0, 0, 1985, 1983, 1, 0, 0, 0, 1985, 1986, 1, 0, 0, 0, 1986, 153, 1, 0, 0, 0, 1987, 1988, 5, 109, 0, 0, 1988, 1990, 5, 40, 0, 0, 1989, 1991, 3, 64, 32, 0, 1990, 1989, 1, 0, 0, 0, 1991,
    1992, 1, 0, 0, 0, 1992, 1990, 1, 0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993, 155, 1, 0, 0, 0, 1994, 1995, 5, 109, 0, 0, 1995, 1996, 5, 40, 0, 0, 1996, 1997, 3, 158, 79, 0, 1997, 157, 1, 0, 0, 0, 1998,
    2000, 3, 64, 32, 0, 1999, 2001, 3, 138, 69, 0, 2000, 1999, 1, 0, 0, 0, 2000, 2001, 1, 0, 0, 0, 2001, 2009, 1, 0, 0, 0, 2002, 2003, 5, 5, 0, 0, 2003, 2005, 3, 64, 32, 0, 2004, 2006, 3, 138, 69, 0,
    2005, 2004, 1, 0, 0, 0, 2005, 2006, 1, 0, 0, 0, 2006, 2008, 1, 0, 0, 0, 2007, 2002, 1, 0, 0, 0, 2008, 2011, 1, 0, 0, 0, 2009, 2007, 1, 0, 0, 0, 2009, 2010, 1, 0, 0, 0, 2010, 159, 1, 0, 0, 0, 2011,
    2009, 1, 0, 0, 0, 2012, 2013, 3, 82, 41, 0, 2013, 161, 1, 0, 0, 0, 2014, 2015, 3, 82, 41, 0, 2015, 163, 1, 0, 0, 0, 2016, 2017, 7, 25, 0, 0, 2017, 165, 1, 0, 0, 0, 2018, 2019, 5, 188, 0, 0, 2019,
    167, 1, 0, 0, 0, 2020, 2023, 3, 64, 32, 0, 2021, 2023, 3, 28, 14, 0, 2022, 2020, 1, 0, 0, 0, 2022, 2021, 1, 0, 0, 0, 2023, 169, 1, 0, 0, 0, 2024, 2025, 7, 26, 0, 0, 2025, 171, 1, 0, 0, 0, 2026,
    2027, 7, 27, 0, 0, 2027, 173, 1, 0, 0, 0, 2028, 2029, 3, 220, 110, 0, 2029, 175, 1, 0, 0, 0, 2030, 2031, 3, 220, 110, 0, 2031, 177, 1, 0, 0, 0, 2032, 2033, 3, 220, 110, 0, 2033, 179, 1, 0, 0, 0,
    2034, 2035, 3, 220, 110, 0, 2035, 181, 1, 0, 0, 0, 2036, 2037, 3, 220, 110, 0, 2037, 183, 1, 0, 0, 0, 2038, 2039, 3, 220, 110, 0, 2039, 185, 1, 0, 0, 0, 2040, 2041, 3, 220, 110, 0, 2041, 187, 1, 0,
    0, 0, 2042, 2043, 3, 220, 110, 0, 2043, 189, 1, 0, 0, 0, 2044, 2045, 3, 220, 110, 0, 2045, 191, 1, 0, 0, 0, 2046, 2047, 3, 220, 110, 0, 2047, 193, 1, 0, 0, 0, 2048, 2049, 3, 220, 110, 0, 2049, 195,
    1, 0, 0, 0, 2050, 2051, 3, 220, 110, 0, 2051, 197, 1, 0, 0, 0, 2052, 2053, 3, 220, 110, 0, 2053, 199, 1, 0, 0, 0, 2054, 2055, 3, 220, 110, 0, 2055, 201, 1, 0, 0, 0, 2056, 2057, 3, 220, 110, 0, 2057,
    203, 1, 0, 0, 0, 2058, 2059, 3, 220, 110, 0, 2059, 205, 1, 0, 0, 0, 2060, 2061, 3, 220, 110, 0, 2061, 207, 1, 0, 0, 0, 2062, 2063, 3, 220, 110, 0, 2063, 209, 1, 0, 0, 0, 2064, 2065, 3, 220, 110, 0,
    2065, 211, 1, 0, 0, 0, 2066, 2067, 3, 220, 110, 0, 2067, 213, 1, 0, 0, 0, 2068, 2069, 3, 220, 110, 0, 2069, 215, 1, 0, 0, 0, 2070, 2071, 3, 220, 110, 0, 2071, 217, 1, 0, 0, 0, 2072, 2073, 3, 220,
    110, 0, 2073, 219, 1, 0, 0, 0, 2074, 2082, 5, 185, 0, 0, 2075, 2082, 3, 172, 86, 0, 2076, 2082, 5, 188, 0, 0, 2077, 2078, 5, 3, 0, 0, 2078, 2079, 3, 220, 110, 0, 2079, 2080, 5, 4, 0, 0, 2080, 2082,
    1, 0, 0, 0, 2081, 2074, 1, 0, 0, 0, 2081, 2075, 1, 0, 0, 0, 2081, 2076, 1, 0, 0, 0, 2081, 2077, 1, 0, 0, 0, 2082, 221, 1, 0, 0, 0, 299, 225, 233, 240, 245, 251, 257, 259, 285, 292, 299, 305, 309,
    314, 317, 324, 327, 331, 339, 343, 345, 349, 353, 357, 360, 367, 373, 379, 384, 395, 401, 405, 409, 412, 416, 422, 427, 436, 443, 449, 453, 457, 462, 468, 480, 484, 489, 492, 495, 498, 502, 505,
    519, 526, 533, 535, 538, 544, 549, 557, 562, 577, 583, 593, 598, 608, 612, 614, 618, 623, 625, 633, 639, 644, 651, 662, 665, 667, 674, 678, 685, 691, 697, 703, 708, 717, 722, 733, 738, 749, 754,
    758, 774, 784, 789, 797, 809, 814, 822, 829, 832, 835, 842, 845, 848, 851, 855, 863, 868, 878, 883, 892, 899, 903, 907, 910, 918, 931, 934, 942, 951, 955, 960, 990, 1002, 1007, 1019, 1025, 1032,
    1036, 1046, 1049, 1055, 1061, 1070, 1073, 1077, 1079, 1081, 1090, 1097, 1104, 1110, 1115, 1123, 1128, 1137, 1148, 1155, 1159, 1162, 1166, 1169, 1177, 1188, 1194, 1196, 1204, 1211, 1218, 1223, 1225,
    1231, 1240, 1245, 1252, 1256, 1258, 1261, 1269, 1273, 1276, 1282, 1286, 1291, 1298, 1307, 1311, 1313, 1317, 1326, 1331, 1333, 1346, 1349, 1358, 1369, 1376, 1379, 1384, 1388, 1391, 1394, 1399, 1403,
    1408, 1411, 1414, 1419, 1423, 1426, 1433, 1438, 1447, 1452, 1455, 1463, 1467, 1475, 1478, 1480, 1489, 1492, 1494, 1498, 1502, 1506, 1509, 1520, 1525, 1529, 1533, 1536, 1541, 1547, 1554, 1561, 1570,
    1574, 1576, 1580, 1583, 1591, 1597, 1602, 1608, 1615, 1622, 1627, 1630, 1633, 1636, 1641, 1646, 1653, 1657, 1661, 1671, 1680, 1683, 1692, 1696, 1704, 1713, 1716, 1725, 1728, 1731, 1734, 1744, 1753,
    1762, 1766, 1773, 1780, 1784, 1788, 1797, 1801, 1805, 1810, 1814, 1821, 1831, 1838, 1843, 1846, 1850, 1864, 1876, 1885, 1894, 1898, 1908, 1911, 1920, 1929, 1932, 1938, 1952, 1956, 1967, 1972, 1985,
    1992, 2000, 2005, 2009, 2022, 2081,
];
const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4.dfa.DFA(ds, index));
const sharedContextCache = new antlr4.PredictionContextCache();
export default class SQLiteParser extends antlr4.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SQLiteParser.ruleNames;
        this.literalNames = SQLiteParser.literalNames;
        this.symbolicNames = SQLiteParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 32:
                return this.expr_sempred(localctx, predIndex);
            default:
                throw "No predicate with index:" + ruleIndex;
        }
    }
    expr_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 20);
            case 1:
                return this.precpred(this._ctx, 19);
            case 2:
                return this.precpred(this._ctx, 18);
            case 3:
                return this.precpred(this._ctx, 17);
            case 4:
                return this.precpred(this._ctx, 16);
            case 5:
                return this.precpred(this._ctx, 15);
            case 6:
                return this.precpred(this._ctx, 14);
            case 7:
                return this.precpred(this._ctx, 13);
            case 8:
                return this.precpred(this._ctx, 6);
            case 9:
                return this.precpred(this._ctx, 5);
            case 10:
                return this.precpred(this._ctx, 9);
            case 11:
                return this.precpred(this._ctx, 8);
            case 12:
                return this.precpred(this._ctx, 7);
            case 13:
                return this.precpred(this._ctx, 4);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    parse() {
        const localctx = new ParseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, SQLiteParser.RULE_parse);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_))) !== 0) ||
                (((_la - 35) & ~0x1f) == 0 &&
                    ((1 << (_la - 35)) &
                        ((1 << (SQLiteParser.ATTACH_ - 35)) |
                            (1 << (SQLiteParser.BEGIN_ - 35)) |
                            (1 << (SQLiteParser.COMMIT_ - 35)) |
                            (1 << (SQLiteParser.CREATE_ - 35)) |
                            (1 << (SQLiteParser.DELETE_ - 35)) |
                            (1 << (SQLiteParser.DETACH_ - 35)) |
                            (1 << (SQLiteParser.DROP_ - 35)) |
                            (1 << (SQLiteParser.END_ - 35)))) !==
                        0) ||
                _la === SQLiteParser.EXPLAIN_ ||
                _la === SQLiteParser.INSERT_ ||
                (((_la - 112) & ~0x1f) == 0 &&
                    ((1 << (_la - 112)) &
                        ((1 << (SQLiteParser.PRAGMA_ - 112)) |
                            (1 << (SQLiteParser.REINDEX_ - 112)) |
                            (1 << (SQLiteParser.RELEASE_ - 112)) |
                            (1 << (SQLiteParser.REPLACE_ - 112)) |
                            (1 << (SQLiteParser.ROLLBACK_ - 112)) |
                            (1 << (SQLiteParser.SAVEPOINT_ - 112)) |
                            (1 << (SQLiteParser.SELECT_ - 112)) |
                            (1 << (SQLiteParser.UPDATE_ - 112)) |
                            (1 << (SQLiteParser.VACUUM_ - 112)))) !==
                        0) ||
                _la === SQLiteParser.VALUES_ ||
                _la === SQLiteParser.WITH_) {
                this.state = 222;
                this.sql_stmt_list();
                this.state = 227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 228;
            this.match(SQLiteParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sql_stmt_list() {
        const localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, SQLiteParser.RULE_sql_stmt_list);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.SCOL) {
                this.state = 230;
                this.match(SQLiteParser.SCOL);
                this.state = 235;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 236;
            this.sql_stmt();
            this.state = 245;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 238;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 237;
                        this.match(SQLiteParser.SCOL);
                        this.state = 240;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === SQLiteParser.SCOL);
                    this.state = 242;
                    this.sql_stmt();
                }
                this.state = 247;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
            }
            this.state = 251;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 248;
                    this.match(SQLiteParser.SCOL);
                }
                this.state = 253;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sql_stmt() {
        const localctx = new Sql_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, SQLiteParser.RULE_sql_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.EXPLAIN_) {
                this.state = 254;
                this.match(SQLiteParser.EXPLAIN_);
                this.state = 257;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.QUERY_) {
                    this.state = 255;
                    this.match(SQLiteParser.QUERY_);
                    this.state = 256;
                    this.match(SQLiteParser.PLAN_);
                }
            }
            this.state = 285;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 261;
                    this.alter_table_stmt();
                    break;
                case 2:
                    this.state = 262;
                    this.analyze_stmt();
                    break;
                case 3:
                    this.state = 263;
                    this.attach_stmt();
                    break;
                case 4:
                    this.state = 264;
                    this.begin_stmt();
                    break;
                case 5:
                    this.state = 265;
                    this.commit_stmt();
                    break;
                case 6:
                    this.state = 266;
                    this.create_index_stmt();
                    break;
                case 7:
                    this.state = 267;
                    this.create_table_stmt();
                    break;
                case 8:
                    this.state = 268;
                    this.create_trigger_stmt();
                    break;
                case 9:
                    this.state = 269;
                    this.create_view_stmt();
                    break;
                case 10:
                    this.state = 270;
                    this.create_virtual_table_stmt();
                    break;
                case 11:
                    this.state = 271;
                    this.delete_stmt();
                    break;
                case 12:
                    this.state = 272;
                    this.delete_stmt_limited();
                    break;
                case 13:
                    this.state = 273;
                    this.detach_stmt();
                    break;
                case 14:
                    this.state = 274;
                    this.drop_stmt();
                    break;
                case 15:
                    this.state = 275;
                    this.insert_stmt();
                    break;
                case 16:
                    this.state = 276;
                    this.pragma_stmt();
                    break;
                case 17:
                    this.state = 277;
                    this.reindex_stmt();
                    break;
                case 18:
                    this.state = 278;
                    this.release_stmt();
                    break;
                case 19:
                    this.state = 279;
                    this.rollback_stmt();
                    break;
                case 20:
                    this.state = 280;
                    this.savepoint_stmt();
                    break;
                case 21:
                    this.state = 281;
                    this.select_stmt();
                    break;
                case 22:
                    this.state = 282;
                    this.update_stmt();
                    break;
                case 23:
                    this.state = 283;
                    this.update_stmt_limited();
                    break;
                case 24:
                    this.state = 284;
                    this.vacuum_stmt();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alter_table_stmt() {
        const localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, SQLiteParser.RULE_alter_table_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 287;
            this.match(SQLiteParser.ALTER_);
            this.state = 288;
            this.match(SQLiteParser.TABLE_);
            this.state = 292;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
            if (la_ === 1) {
                this.state = 289;
                this.schema_name();
                this.state = 290;
                this.match(SQLiteParser.DOT);
            }
            this.state = 294;
            this.table_name();
            this.state = 317;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.RENAME_:
                    this.state = 295;
                    this.match(SQLiteParser.RENAME_);
                    this.state = 305;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 296;
                            this.match(SQLiteParser.TO_);
                            this.state = 297;
                            localctx.new_table_name = this.table_name();
                            break;
                        case 2:
                            this.state = 299;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);
                            if (la_ === 1) {
                                this.state = 298;
                                this.match(SQLiteParser.COLUMN_);
                            }
                            this.state = 301;
                            localctx.old_column_name = this.column_name();
                            this.state = 302;
                            this.match(SQLiteParser.TO_);
                            this.state = 303;
                            localctx.new_column_name = this.column_name();
                            break;
                    }
                    break;
                case SQLiteParser.ADD_:
                    this.state = 307;
                    this.match(SQLiteParser.ADD_);
                    this.state = 309;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
                    if (la_ === 1) {
                        this.state = 308;
                        this.match(SQLiteParser.COLUMN_);
                    }
                    this.state = 311;
                    this.column_def();
                    break;
                case SQLiteParser.DROP_:
                    this.state = 312;
                    this.match(SQLiteParser.DROP_);
                    this.state = 314;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 12, this._ctx);
                    if (la_ === 1) {
                        this.state = 313;
                        this.match(SQLiteParser.COLUMN_);
                    }
                    this.state = 316;
                    this.column_name();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    analyze_stmt() {
        const localctx = new Analyze_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, SQLiteParser.RULE_analyze_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 319;
            this.match(SQLiteParser.ANALYZE_);
            this.state = 327;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
            if (la_ === 1) {
                this.state = 320;
                this.schema_name();
            }
            else if (la_ === 2) {
                this.state = 324;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);
                if (la_ === 1) {
                    this.state = 321;
                    this.schema_name();
                    this.state = 322;
                    this.match(SQLiteParser.DOT);
                }
                this.state = 326;
                this.table_or_index_name();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attach_stmt() {
        const localctx = new Attach_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, SQLiteParser.RULE_attach_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 329;
            this.match(SQLiteParser.ATTACH_);
            this.state = 331;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
            if (la_ === 1) {
                this.state = 330;
                this.match(SQLiteParser.DATABASE_);
            }
            this.state = 333;
            this.expr(0);
            this.state = 334;
            this.match(SQLiteParser.AS_);
            this.state = 335;
            this.schema_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    begin_stmt() {
        const localctx = new Begin_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, SQLiteParser.RULE_begin_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 337;
            this.match(SQLiteParser.BEGIN_);
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((_la - 58) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) !== 0) {
                this.state = 338;
                _la = this._input.LA(1);
                if (!(((_la - 58) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) !== 0)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TRANSACTION_) {
                this.state = 341;
                this.match(SQLiteParser.TRANSACTION_);
                this.state = 343;
                this._errHandler.sync(this);
                const la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
                if (la_ === 1) {
                    this.state = 342;
                    this.transaction_name();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    commit_stmt() {
        const localctx = new Commit_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, SQLiteParser.RULE_commit_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 347;
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.COMMIT_ || _la === SQLiteParser.END_)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TRANSACTION_) {
                this.state = 348;
                this.match(SQLiteParser.TRANSACTION_);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rollback_stmt() {
        const localctx = new Rollback_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, SQLiteParser.RULE_rollback_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 351;
            this.match(SQLiteParser.ROLLBACK_);
            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TRANSACTION_) {
                this.state = 352;
                this.match(SQLiteParser.TRANSACTION_);
            }
            this.state = 360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TO_) {
                this.state = 355;
                this.match(SQLiteParser.TO_);
                this.state = 357;
                this._errHandler.sync(this);
                const la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
                if (la_ === 1) {
                    this.state = 356;
                    this.match(SQLiteParser.SAVEPOINT_);
                }
                this.state = 359;
                this.savepoint_name();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    savepoint_stmt() {
        const localctx = new Savepoint_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, SQLiteParser.RULE_savepoint_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 362;
            this.match(SQLiteParser.SAVEPOINT_);
            this.state = 363;
            this.savepoint_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    release_stmt() {
        const localctx = new Release_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, SQLiteParser.RULE_release_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 365;
            this.match(SQLiteParser.RELEASE_);
            this.state = 367;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
            if (la_ === 1) {
                this.state = 366;
                this.match(SQLiteParser.SAVEPOINT_);
            }
            this.state = 369;
            this.savepoint_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    create_index_stmt() {
        const localctx = new Create_index_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, SQLiteParser.RULE_create_index_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 371;
            this.match(SQLiteParser.CREATE_);
            this.state = 373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.UNIQUE_) {
                this.state = 372;
                this.match(SQLiteParser.UNIQUE_);
            }
            this.state = 375;
            this.match(SQLiteParser.INDEX_);
            this.state = 379;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 26, this._ctx);
            if (la_ === 1) {
                this.state = 376;
                this.match(SQLiteParser.IF_);
                this.state = 377;
                this.match(SQLiteParser.NOT_);
                this.state = 378;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 384;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
            if (la_ === 1) {
                this.state = 381;
                this.schema_name();
                this.state = 382;
                this.match(SQLiteParser.DOT);
            }
            this.state = 386;
            this.index_name();
            this.state = 387;
            this.match(SQLiteParser.ON_);
            this.state = 388;
            this.table_name();
            this.state = 389;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 390;
            this.indexed_column();
            this.state = 395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 391;
                this.match(SQLiteParser.COMMA);
                this.state = 392;
                this.indexed_column();
                this.state = 397;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 398;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHERE_) {
                this.state = 399;
                this.match(SQLiteParser.WHERE_);
                this.state = 400;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    indexed_column() {
        const localctx = new Indexed_columnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, SQLiteParser.RULE_indexed_column);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 405;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 403;
                    this.column_name();
                    break;
                case 2:
                    this.state = 404;
                    this.expr(0);
                    break;
            }
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.COLLATE_) {
                this.state = 407;
                this.match(SQLiteParser.COLLATE_);
                this.state = 408;
                this.collation_name();
            }
            this.state = 412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
                this.state = 411;
                this.asc_desc();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    create_table_stmt() {
        const localctx = new Create_table_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, SQLiteParser.RULE_create_table_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 414;
            this.match(SQLiteParser.CREATE_);
            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_) {
                this.state = 415;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 418;
            this.match(SQLiteParser.TABLE_);
            this.state = 422;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
            if (la_ === 1) {
                this.state = 419;
                this.match(SQLiteParser.IF_);
                this.state = 420;
                this.match(SQLiteParser.NOT_);
                this.state = 421;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 427;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
            if (la_ === 1) {
                this.state = 424;
                this.schema_name();
                this.state = 425;
                this.match(SQLiteParser.DOT);
            }
            this.state = 429;
            this.table_name();
            this.state = 453;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.OPEN_PAR:
                    this.state = 430;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 431;
                    this.column_def();
                    this.state = 436;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
                    while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1 + 1) {
                            this.state = 432;
                            this.match(SQLiteParser.COMMA);
                            this.state = 433;
                            this.column_def();
                        }
                        this.state = 438;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
                    }
                    this.state = 443;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 439;
                        this.match(SQLiteParser.COMMA);
                        this.state = 440;
                        this.table_constraint();
                        this.state = 445;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 446;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 449;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.WITHOUT_) {
                        this.state = 447;
                        this.match(SQLiteParser.WITHOUT_);
                        this.state = 448;
                        localctx.row_ROW_ID = this.match(SQLiteParser.IDENTIFIER);
                    }
                    break;
                case SQLiteParser.AS_:
                    this.state = 451;
                    this.match(SQLiteParser.AS_);
                    this.state = 452;
                    this.select_stmt();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    column_def() {
        const localctx = new Column_defContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, SQLiteParser.RULE_column_def);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 455;
            this.column_name();
            this.state = 457;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
            if (la_ === 1) {
                this.state = 456;
                this.type_name();
            }
            this.state = 462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la - 33) & ~0x1f) == 0 &&
                ((1 << (_la - 33)) &
                    ((1 << (SQLiteParser.AS_ - 33)) |
                        (1 << (SQLiteParser.CHECK_ - 33)) |
                        (1 << (SQLiteParser.COLLATE_ - 33)) |
                        (1 << (SQLiteParser.CONSTRAINT_ - 33)) |
                        (1 << (SQLiteParser.DEFAULT_ - 33)))) !==
                    0) ||
                (((_la - 102) & ~0x1f) == 0 &&
                    ((1 << (_la - 102)) & ((1 << (SQLiteParser.NOT_ - 102)) | (1 << (SQLiteParser.NULL_ - 102)) | (1 << (SQLiteParser.PRIMARY_ - 102)) | (1 << (SQLiteParser.REFERENCES_ - 102)))) !== 0) ||
                _la === SQLiteParser.UNIQUE_ ||
                _la === SQLiteParser.GENERATED_) {
                this.state = 459;
                this.column_constraint();
                this.state = 464;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_name() {
        const localctx = new Type_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, SQLiteParser.RULE_type_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 466;
            this._errHandler.sync(this);
            let _alt = 1 + 1;
            do {
                switch (_alt) {
                    case 1 + 1:
                        this.state = 465;
                        this.name();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 468;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 42, this._ctx);
            } while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
            this.state = 480;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
            if (la_ === 1) {
                this.state = 470;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 471;
                this.signed_number();
                this.state = 472;
                this.match(SQLiteParser.CLOSE_PAR);
            }
            else if (la_ === 2) {
                this.state = 474;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 475;
                this.signed_number();
                this.state = 476;
                this.match(SQLiteParser.COMMA);
                this.state = 477;
                this.signed_number();
                this.state = 478;
                this.match(SQLiteParser.CLOSE_PAR);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    column_constraint() {
        const localctx = new Column_constraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, SQLiteParser.RULE_column_constraint);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 484;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.CONSTRAINT_) {
                this.state = 482;
                this.match(SQLiteParser.CONSTRAINT_);
                this.state = 483;
                this.name();
            }
            this.state = 535;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.PRIMARY_:
                    this.state = 486;
                    this.match(SQLiteParser.PRIMARY_);
                    this.state = 487;
                    this.match(SQLiteParser.KEY_);
                    this.state = 489;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
                        this.state = 488;
                        this.asc_desc();
                    }
                    this.state = 492;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ON_) {
                        this.state = 491;
                        this.conflict_clause();
                    }
                    this.state = 495;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.AUTOINCREMENT_) {
                        this.state = 494;
                        this.match(SQLiteParser.AUTOINCREMENT_);
                    }
                    break;
                case SQLiteParser.NOT_:
                case SQLiteParser.NULL_:
                case SQLiteParser.UNIQUE_:
                    this.state = 502;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case SQLiteParser.NOT_:
                        case SQLiteParser.NULL_:
                            this.state = 498;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === SQLiteParser.NOT_) {
                                this.state = 497;
                                this.match(SQLiteParser.NOT_);
                            }
                            this.state = 500;
                            this.match(SQLiteParser.NULL_);
                            break;
                        case SQLiteParser.UNIQUE_:
                            this.state = 501;
                            this.match(SQLiteParser.UNIQUE_);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 505;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ON_) {
                        this.state = 504;
                        this.conflict_clause();
                    }
                    break;
                case SQLiteParser.CHECK_:
                    this.state = 507;
                    this.match(SQLiteParser.CHECK_);
                    this.state = 508;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 509;
                    this.expr(0);
                    this.state = 510;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.DEFAULT_:
                    this.state = 512;
                    this.match(SQLiteParser.DEFAULT_);
                    this.state = 519;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 513;
                            this.signed_number();
                            break;
                        case 2:
                            this.state = 514;
                            this.literal_value();
                            break;
                        case 3:
                            this.state = 515;
                            this.match(SQLiteParser.OPEN_PAR);
                            this.state = 516;
                            this.expr(0);
                            this.state = 517;
                            this.match(SQLiteParser.CLOSE_PAR);
                            break;
                    }
                    break;
                case SQLiteParser.COLLATE_:
                    this.state = 521;
                    this.match(SQLiteParser.COLLATE_);
                    this.state = 522;
                    this.collation_name();
                    break;
                case SQLiteParser.REFERENCES_:
                    this.state = 523;
                    this.foreign_key_clause();
                    break;
                case SQLiteParser.AS_:
                case SQLiteParser.GENERATED_:
                    this.state = 526;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.GENERATED_) {
                        this.state = 524;
                        this.match(SQLiteParser.GENERATED_);
                        this.state = 525;
                        this.match(SQLiteParser.ALWAYS_);
                    }
                    this.state = 528;
                    this.match(SQLiteParser.AS_);
                    this.state = 529;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 530;
                    this.expr(0);
                    this.state = 531;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 533;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.VIRTUAL_ || _la === SQLiteParser.STORED_) {
                        this.state = 532;
                        _la = this._input.LA(1);
                        if (!(_la === SQLiteParser.VIRTUAL_ || _la === SQLiteParser.STORED_)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    signed_number() {
        const localctx = new Signed_numberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, SQLiteParser.RULE_signed_number);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS) {
                this.state = 537;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 540;
            this.match(SQLiteParser.NUMERIC_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_constraint() {
        const localctx = new Table_constraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, SQLiteParser.RULE_table_constraint);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.CONSTRAINT_) {
                this.state = 542;
                this.match(SQLiteParser.CONSTRAINT_);
                this.state = 543;
                this.name();
            }
            this.state = 583;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.PRIMARY_:
                case SQLiteParser.UNIQUE_:
                    this.state = 549;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case SQLiteParser.PRIMARY_:
                            this.state = 546;
                            this.match(SQLiteParser.PRIMARY_);
                            this.state = 547;
                            this.match(SQLiteParser.KEY_);
                            break;
                        case SQLiteParser.UNIQUE_:
                            this.state = 548;
                            this.match(SQLiteParser.UNIQUE_);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 551;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 552;
                    this.indexed_column();
                    this.state = 557;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 553;
                        this.match(SQLiteParser.COMMA);
                        this.state = 554;
                        this.indexed_column();
                        this.state = 559;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 560;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 562;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ON_) {
                        this.state = 561;
                        this.conflict_clause();
                    }
                    break;
                case SQLiteParser.CHECK_:
                    this.state = 564;
                    this.match(SQLiteParser.CHECK_);
                    this.state = 565;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 566;
                    this.expr(0);
                    this.state = 567;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.FOREIGN_:
                    this.state = 569;
                    this.match(SQLiteParser.FOREIGN_);
                    this.state = 570;
                    this.match(SQLiteParser.KEY_);
                    this.state = 571;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 572;
                    this.column_name();
                    this.state = 577;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 573;
                        this.match(SQLiteParser.COMMA);
                        this.state = 574;
                        this.column_name();
                        this.state = 579;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 580;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 581;
                    this.foreign_key_clause();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    foreign_key_clause() {
        const localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, SQLiteParser.RULE_foreign_key_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 585;
            this.match(SQLiteParser.REFERENCES_);
            this.state = 586;
            this.foreign_table();
            this.state = 598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 587;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 588;
                this.column_name();
                this.state = 593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 589;
                    this.match(SQLiteParser.COMMA);
                    this.state = 590;
                    this.column_name();
                    this.state = 595;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 596;
                this.match(SQLiteParser.CLOSE_PAR);
            }
            this.state = 614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.MATCH_ || _la === SQLiteParser.ON_) {
                this.state = 612;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SQLiteParser.ON_:
                        this.state = 600;
                        this.match(SQLiteParser.ON_);
                        this.state = 601;
                        _la = this._input.LA(1);
                        if (!(_la === SQLiteParser.DELETE_ || _la === SQLiteParser.UPDATE_)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 608;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case SQLiteParser.SET_:
                                this.state = 602;
                                this.match(SQLiteParser.SET_);
                                this.state = 603;
                                _la = this._input.LA(1);
                                if (!(_la === SQLiteParser.DEFAULT_ || _la === SQLiteParser.NULL_)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                break;
                            case SQLiteParser.CASCADE_:
                                this.state = 604;
                                this.match(SQLiteParser.CASCADE_);
                                break;
                            case SQLiteParser.RESTRICT_:
                                this.state = 605;
                                this.match(SQLiteParser.RESTRICT_);
                                break;
                            case SQLiteParser.NO_:
                                this.state = 606;
                                this.match(SQLiteParser.NO_);
                                this.state = 607;
                                this.match(SQLiteParser.ACTION_);
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                        }
                        break;
                    case SQLiteParser.MATCH_:
                        this.state = 610;
                        this.match(SQLiteParser.MATCH_);
                        this.state = 611;
                        this.name();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 616;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 625;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
            if (la_ === 1) {
                this.state = 618;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.NOT_) {
                    this.state = 617;
                    this.match(SQLiteParser.NOT_);
                }
                this.state = 620;
                this.match(SQLiteParser.DEFERRABLE_);
                this.state = 623;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.INITIALLY_) {
                    this.state = 621;
                    this.match(SQLiteParser.INITIALLY_);
                    this.state = 622;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.DEFERRED_ || _la === SQLiteParser.IMMEDIATE_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conflict_clause() {
        const localctx = new Conflict_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, SQLiteParser.RULE_conflict_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 627;
            this.match(SQLiteParser.ON_);
            this.state = 628;
            this.match(SQLiteParser.CONFLICT_);
            this.state = 629;
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    create_trigger_stmt() {
        const localctx = new Create_trigger_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, SQLiteParser.RULE_create_trigger_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 631;
            this.match(SQLiteParser.CREATE_);
            this.state = 633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_) {
                this.state = 632;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 635;
            this.match(SQLiteParser.TRIGGER_);
            this.state = 639;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
            if (la_ === 1) {
                this.state = 636;
                this.match(SQLiteParser.IF_);
                this.state = 637;
                this.match(SQLiteParser.NOT_);
                this.state = 638;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 644;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
            if (la_ === 1) {
                this.state = 641;
                this.schema_name();
                this.state = 642;
                this.match(SQLiteParser.DOT);
            }
            this.state = 646;
            this.trigger_name();
            this.state = 651;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.BEFORE_:
                    this.state = 647;
                    this.match(SQLiteParser.BEFORE_);
                    break;
                case SQLiteParser.AFTER_:
                    this.state = 648;
                    this.match(SQLiteParser.AFTER_);
                    break;
                case SQLiteParser.INSTEAD_:
                    this.state = 649;
                    this.match(SQLiteParser.INSTEAD_);
                    this.state = 650;
                    this.match(SQLiteParser.OF_);
                    break;
                case SQLiteParser.DELETE_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.UPDATE_:
                    break;
                default:
                    break;
            }
            this.state = 667;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.DELETE_:
                    this.state = 653;
                    this.match(SQLiteParser.DELETE_);
                    break;
                case SQLiteParser.INSERT_:
                    this.state = 654;
                    this.match(SQLiteParser.INSERT_);
                    break;
                case SQLiteParser.UPDATE_:
                    this.state = 655;
                    this.match(SQLiteParser.UPDATE_);
                    this.state = 665;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.OF_) {
                        this.state = 656;
                        this.match(SQLiteParser.OF_);
                        this.state = 657;
                        this.column_name();
                        this.state = 662;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 658;
                            this.match(SQLiteParser.COMMA);
                            this.state = 659;
                            this.column_name();
                            this.state = 664;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 669;
            this.match(SQLiteParser.ON_);
            this.state = 670;
            this.table_name();
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.FOR_) {
                this.state = 671;
                this.match(SQLiteParser.FOR_);
                this.state = 672;
                this.match(SQLiteParser.EACH_);
                this.state = 673;
                this.match(SQLiteParser.ROW_);
            }
            this.state = 678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHEN_) {
                this.state = 676;
                this.match(SQLiteParser.WHEN_);
                this.state = 677;
                this.expr(0);
            }
            this.state = 680;
            this.match(SQLiteParser.BEGIN_);
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 685;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 681;
                        this.update_stmt();
                        break;
                    case 2:
                        this.state = 682;
                        this.insert_stmt();
                        break;
                    case 3:
                        this.state = 683;
                        this.delete_stmt();
                        break;
                    case 4:
                        this.state = 684;
                        this.select_stmt();
                        break;
                }
                this.state = 687;
                this.match(SQLiteParser.SCOL);
                this.state = 691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === SQLiteParser.DELETE_ ||
                _la === SQLiteParser.INSERT_ ||
                (((_la - 122) & ~0x1f) == 0 &&
                    ((1 << (_la - 122)) &
                        ((1 << (SQLiteParser.REPLACE_ - 122)) |
                            (1 << (SQLiteParser.SELECT_ - 122)) |
                            (1 << (SQLiteParser.UPDATE_ - 122)) |
                            (1 << (SQLiteParser.VALUES_ - 122)) |
                            (1 << (SQLiteParser.WITH_ - 122)))) !==
                        0));
            this.state = 693;
            this.match(SQLiteParser.END_);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    create_view_stmt() {
        const localctx = new Create_view_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, SQLiteParser.RULE_create_view_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 695;
            this.match(SQLiteParser.CREATE_);
            this.state = 697;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_) {
                this.state = 696;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.TEMP_ || _la === SQLiteParser.TEMPORARY_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 699;
            this.match(SQLiteParser.VIEW_);
            this.state = 703;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
            if (la_ === 1) {
                this.state = 700;
                this.match(SQLiteParser.IF_);
                this.state = 701;
                this.match(SQLiteParser.NOT_);
                this.state = 702;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 708;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
            if (la_ === 1) {
                this.state = 705;
                this.schema_name();
                this.state = 706;
                this.match(SQLiteParser.DOT);
            }
            this.state = 710;
            this.view_name();
            this.state = 722;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 711;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 712;
                this.column_name();
                this.state = 717;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 713;
                    this.match(SQLiteParser.COMMA);
                    this.state = 714;
                    this.column_name();
                    this.state = 719;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 720;
                this.match(SQLiteParser.CLOSE_PAR);
            }
            this.state = 724;
            this.match(SQLiteParser.AS_);
            this.state = 725;
            this.select_stmt();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    create_virtual_table_stmt() {
        const localctx = new Create_virtual_table_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, SQLiteParser.RULE_create_virtual_table_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 727;
            this.match(SQLiteParser.CREATE_);
            this.state = 728;
            this.match(SQLiteParser.VIRTUAL_);
            this.state = 729;
            this.match(SQLiteParser.TABLE_);
            this.state = 733;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
            if (la_ === 1) {
                this.state = 730;
                this.match(SQLiteParser.IF_);
                this.state = 731;
                this.match(SQLiteParser.NOT_);
                this.state = 732;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 738;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
            if (la_ === 1) {
                this.state = 735;
                this.schema_name();
                this.state = 736;
                this.match(SQLiteParser.DOT);
            }
            this.state = 740;
            this.table_name();
            this.state = 741;
            this.match(SQLiteParser.USING_);
            this.state = 742;
            this.module_name();
            this.state = 754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 743;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 744;
                this.module_argument();
                this.state = 749;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 745;
                    this.match(SQLiteParser.COMMA);
                    this.state = 746;
                    this.module_argument();
                    this.state = 751;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 752;
                this.match(SQLiteParser.CLOSE_PAR);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    with_clause() {
        const localctx = new With_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, SQLiteParser.RULE_with_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 756;
            this.match(SQLiteParser.WITH_);
            this.state = 758;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
            if (la_ === 1) {
                this.state = 757;
                this.match(SQLiteParser.RECURSIVE_);
            }
            this.state = 760;
            this.cte_table_name();
            this.state = 761;
            this.match(SQLiteParser.AS_);
            this.state = 762;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 763;
            this.select_stmt();
            this.state = 764;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 765;
                this.match(SQLiteParser.COMMA);
                this.state = 766;
                this.cte_table_name();
                this.state = 767;
                this.match(SQLiteParser.AS_);
                this.state = 768;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 769;
                this.select_stmt();
                this.state = 770;
                this.match(SQLiteParser.CLOSE_PAR);
                this.state = 776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cte_table_name() {
        const localctx = new Cte_table_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, SQLiteParser.RULE_cte_table_name);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 777;
            this.table_name();
            this.state = 789;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 778;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 779;
                this.column_name();
                this.state = 784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 780;
                    this.match(SQLiteParser.COMMA);
                    this.state = 781;
                    this.column_name();
                    this.state = 786;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 787;
                this.match(SQLiteParser.CLOSE_PAR);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    recursive_cte() {
        const localctx = new Recursive_cteContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, SQLiteParser.RULE_recursive_cte);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 791;
            this.cte_table_name();
            this.state = 792;
            this.match(SQLiteParser.AS_);
            this.state = 793;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 794;
            this.initial_select();
            this.state = 795;
            this.match(SQLiteParser.UNION_);
            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ALL_) {
                this.state = 796;
                this.match(SQLiteParser.ALL_);
            }
            this.state = 799;
            this.recursive_select();
            this.state = 800;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    common_table_expression() {
        const localctx = new Common_table_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, SQLiteParser.RULE_common_table_expression);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.table_name();
            this.state = 814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 803;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 804;
                this.column_name();
                this.state = 809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 805;
                    this.match(SQLiteParser.COMMA);
                    this.state = 806;
                    this.column_name();
                    this.state = 811;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 812;
                this.match(SQLiteParser.CLOSE_PAR);
            }
            this.state = 816;
            this.match(SQLiteParser.AS_);
            this.state = 817;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 818;
            this.select_stmt();
            this.state = 819;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    delete_stmt() {
        const localctx = new Delete_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, SQLiteParser.RULE_delete_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 821;
                this.with_clause();
            }
            this.state = 824;
            this.match(SQLiteParser.DELETE_);
            this.state = 825;
            this.match(SQLiteParser.FROM_);
            this.state = 826;
            this.qualified_table_name();
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHERE_) {
                this.state = 827;
                this.match(SQLiteParser.WHERE_);
                this.state = 828;
                this.expr(0);
            }
            this.state = 832;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.RETURNING_) {
                this.state = 831;
                this.returning_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    delete_stmt_limited() {
        const localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, SQLiteParser.RULE_delete_stmt_limited);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 834;
                this.with_clause();
            }
            this.state = 837;
            this.match(SQLiteParser.DELETE_);
            this.state = 838;
            this.match(SQLiteParser.FROM_);
            this.state = 839;
            this.qualified_table_name();
            this.state = 842;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHERE_) {
                this.state = 840;
                this.match(SQLiteParser.WHERE_);
                this.state = 841;
                this.expr(0);
            }
            this.state = 845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.RETURNING_) {
                this.state = 844;
                this.returning_clause();
            }
            this.state = 851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.LIMIT_ || _la === SQLiteParser.ORDER_) {
                this.state = 848;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.ORDER_) {
                    this.state = 847;
                    this.order_by_stmt();
                }
                this.state = 850;
                this.limit_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    detach_stmt() {
        const localctx = new Detach_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, SQLiteParser.RULE_detach_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 853;
            this.match(SQLiteParser.DETACH_);
            this.state = 855;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);
            if (la_ === 1) {
                this.state = 854;
                this.match(SQLiteParser.DATABASE_);
            }
            this.state = 857;
            this.schema_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    drop_stmt() {
        const localctx = new Drop_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, SQLiteParser.RULE_drop_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 859;
            this.match(SQLiteParser.DROP_);
            this.state = 860;
            localctx.object = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.INDEX_ ||
                (((_la - 132) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (SQLiteParser.TABLE_ - 132)) | (1 << (SQLiteParser.TRIGGER_ - 132)) | (1 << (SQLiteParser.VIEW_ - 132)))) !== 0))) {
                localctx.object = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 863;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
            if (la_ === 1) {
                this.state = 861;
                this.match(SQLiteParser.IF_);
                this.state = 862;
                this.match(SQLiteParser.EXISTS_);
            }
            this.state = 868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
            if (la_ === 1) {
                this.state = 865;
                this.schema_name();
                this.state = 866;
                this.match(SQLiteParser.DOT);
            }
            this.state = 870;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expr(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ExprContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 64;
        this.enterRecursionRule(localctx, 64, SQLiteParser.RULE_expr, _p);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 960;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 121, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 873;
                    this.literal_value();
                    break;
                case 2:
                    this.state = 874;
                    this.match(SQLiteParser.BIND_PARAMETER);
                    break;
                case 3:
                    this.state = 883;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
                    if (la_ === 1) {
                        this.state = 878;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
                        if (la_ === 1) {
                            this.state = 875;
                            this.schema_name();
                            this.state = 876;
                            this.match(SQLiteParser.DOT);
                        }
                        this.state = 880;
                        this.table_name();
                        this.state = 881;
                        this.match(SQLiteParser.DOT);
                    }
                    this.state = 885;
                    this.column_name();
                    break;
                case 4:
                    this.state = 886;
                    this.unary_operator();
                    this.state = 887;
                    this.expr(21);
                    break;
                case 5:
                    this.state = 889;
                    this.function_name();
                    this.state = 890;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 903;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case SQLiteParser.OPEN_PAR:
                        case SQLiteParser.PLUS:
                        case SQLiteParser.MINUS:
                        case SQLiteParser.TILDE:
                        case SQLiteParser.ABORT_:
                        case SQLiteParser.ACTION_:
                        case SQLiteParser.ADD_:
                        case SQLiteParser.AFTER_:
                        case SQLiteParser.ALL_:
                        case SQLiteParser.ALTER_:
                        case SQLiteParser.ANALYZE_:
                        case SQLiteParser.AND_:
                        case SQLiteParser.AS_:
                        case SQLiteParser.ASC_:
                        case SQLiteParser.ATTACH_:
                        case SQLiteParser.AUTOINCREMENT_:
                        case SQLiteParser.BEFORE_:
                        case SQLiteParser.BEGIN_:
                        case SQLiteParser.BETWEEN_:
                        case SQLiteParser.BY_:
                        case SQLiteParser.CASCADE_:
                        case SQLiteParser.CASE_:
                        case SQLiteParser.CAST_:
                        case SQLiteParser.CHECK_:
                        case SQLiteParser.COLLATE_:
                        case SQLiteParser.COLUMN_:
                        case SQLiteParser.COMMIT_:
                        case SQLiteParser.CONFLICT_:
                        case SQLiteParser.CONSTRAINT_:
                        case SQLiteParser.CREATE_:
                        case SQLiteParser.CROSS_:
                        case SQLiteParser.CURRENT_DATE_:
                        case SQLiteParser.CURRENT_TIME_:
                        case SQLiteParser.CURRENT_TIMESTAMP_:
                        case SQLiteParser.DATABASE_:
                        case SQLiteParser.DEFAULT_:
                        case SQLiteParser.DEFERRABLE_:
                        case SQLiteParser.DEFERRED_:
                        case SQLiteParser.DELETE_:
                        case SQLiteParser.DESC_:
                        case SQLiteParser.DETACH_:
                        case SQLiteParser.DISTINCT_:
                        case SQLiteParser.DROP_:
                        case SQLiteParser.EACH_:
                        case SQLiteParser.ELSE_:
                        case SQLiteParser.END_:
                        case SQLiteParser.ESCAPE_:
                        case SQLiteParser.EXCEPT_:
                        case SQLiteParser.EXCLUSIVE_:
                        case SQLiteParser.EXISTS_:
                        case SQLiteParser.EXPLAIN_:
                        case SQLiteParser.FAIL_:
                        case SQLiteParser.FOR_:
                        case SQLiteParser.FOREIGN_:
                        case SQLiteParser.FROM_:
                        case SQLiteParser.FULL_:
                        case SQLiteParser.GLOB_:
                        case SQLiteParser.GROUP_:
                        case SQLiteParser.HAVING_:
                        case SQLiteParser.IF_:
                        case SQLiteParser.IGNORE_:
                        case SQLiteParser.IMMEDIATE_:
                        case SQLiteParser.IN_:
                        case SQLiteParser.INDEX_:
                        case SQLiteParser.INDEXED_:
                        case SQLiteParser.INITIALLY_:
                        case SQLiteParser.INNER_:
                        case SQLiteParser.INSERT_:
                        case SQLiteParser.INSTEAD_:
                        case SQLiteParser.INTERSECT_:
                        case SQLiteParser.INTO_:
                        case SQLiteParser.IS_:
                        case SQLiteParser.ISNULL_:
                        case SQLiteParser.JOIN_:
                        case SQLiteParser.KEY_:
                        case SQLiteParser.LEFT_:
                        case SQLiteParser.LIKE_:
                        case SQLiteParser.LIMIT_:
                        case SQLiteParser.MATCH_:
                        case SQLiteParser.NATURAL_:
                        case SQLiteParser.NO_:
                        case SQLiteParser.NOT_:
                        case SQLiteParser.NOTNULL_:
                        case SQLiteParser.NULL_:
                        case SQLiteParser.OF_:
                        case SQLiteParser.OFFSET_:
                        case SQLiteParser.ON_:
                        case SQLiteParser.OR_:
                        case SQLiteParser.ORDER_:
                        case SQLiteParser.OUTER_:
                        case SQLiteParser.PLAN_:
                        case SQLiteParser.PRAGMA_:
                        case SQLiteParser.PRIMARY_:
                        case SQLiteParser.QUERY_:
                        case SQLiteParser.RAISE_:
                        case SQLiteParser.RECURSIVE_:
                        case SQLiteParser.REFERENCES_:
                        case SQLiteParser.REGEXP_:
                        case SQLiteParser.REINDEX_:
                        case SQLiteParser.RELEASE_:
                        case SQLiteParser.RENAME_:
                        case SQLiteParser.REPLACE_:
                        case SQLiteParser.RESTRICT_:
                        case SQLiteParser.RIGHT_:
                        case SQLiteParser.ROLLBACK_:
                        case SQLiteParser.ROW_:
                        case SQLiteParser.ROWS_:
                        case SQLiteParser.SAVEPOINT_:
                        case SQLiteParser.SELECT_:
                        case SQLiteParser.SET_:
                        case SQLiteParser.TABLE_:
                        case SQLiteParser.TEMP_:
                        case SQLiteParser.TEMPORARY_:
                        case SQLiteParser.THEN_:
                        case SQLiteParser.TO_:
                        case SQLiteParser.TRANSACTION_:
                        case SQLiteParser.TRIGGER_:
                        case SQLiteParser.UNION_:
                        case SQLiteParser.UNIQUE_:
                        case SQLiteParser.UPDATE_:
                        case SQLiteParser.USING_:
                        case SQLiteParser.VACUUM_:
                        case SQLiteParser.VALUES_:
                        case SQLiteParser.VIEW_:
                        case SQLiteParser.VIRTUAL_:
                        case SQLiteParser.WHEN_:
                        case SQLiteParser.WHERE_:
                        case SQLiteParser.WITH_:
                        case SQLiteParser.WITHOUT_:
                        case SQLiteParser.FIRST_VALUE_:
                        case SQLiteParser.OVER_:
                        case SQLiteParser.PARTITION_:
                        case SQLiteParser.RANGE_:
                        case SQLiteParser.PRECEDING_:
                        case SQLiteParser.UNBOUNDED_:
                        case SQLiteParser.CURRENT_:
                        case SQLiteParser.FOLLOWING_:
                        case SQLiteParser.CUME_DIST_:
                        case SQLiteParser.DENSE_RANK_:
                        case SQLiteParser.LAG_:
                        case SQLiteParser.LAST_VALUE_:
                        case SQLiteParser.LEAD_:
                        case SQLiteParser.NTH_VALUE_:
                        case SQLiteParser.NTILE_:
                        case SQLiteParser.PERCENT_RANK_:
                        case SQLiteParser.RANK_:
                        case SQLiteParser.ROW_NUMBER_:
                        case SQLiteParser.GENERATED_:
                        case SQLiteParser.ALWAYS_:
                        case SQLiteParser.STORED_:
                        case SQLiteParser.TRUE_:
                        case SQLiteParser.FALSE_:
                        case SQLiteParser.WINDOW_:
                        case SQLiteParser.NULLS_:
                        case SQLiteParser.FIRST_:
                        case SQLiteParser.LAST_:
                        case SQLiteParser.FILTER_:
                        case SQLiteParser.GROUPS_:
                        case SQLiteParser.EXCLUDE_:
                        case SQLiteParser.IDENTIFIER:
                        case SQLiteParser.NUMERIC_LITERAL:
                        case SQLiteParser.BIND_PARAMETER:
                        case SQLiteParser.STRING_LITERAL:
                        case SQLiteParser.BLOB_LITERAL:
                            this.state = 892;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
                            if (la_ === 1) {
                                this.state = 891;
                                this.match(SQLiteParser.DISTINCT_);
                            }
                            this.state = 894;
                            this.expr(0);
                            this.state = 899;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === SQLiteParser.COMMA) {
                                this.state = 895;
                                this.match(SQLiteParser.COMMA);
                                this.state = 896;
                                this.expr(0);
                                this.state = 901;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            break;
                        case SQLiteParser.STAR:
                            this.state = 902;
                            this.match(SQLiteParser.STAR);
                            break;
                        case SQLiteParser.CLOSE_PAR:
                            break;
                        default:
                            break;
                    }
                    this.state = 905;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 907;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
                    if (la_ === 1) {
                        this.state = 906;
                        this.filter_clause();
                    }
                    this.state = 910;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
                    if (la_ === 1) {
                        this.state = 909;
                        this.over_clause();
                    }
                    break;
                case 6:
                    this.state = 912;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 913;
                    this.expr(0);
                    this.state = 918;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 914;
                        this.match(SQLiteParser.COMMA);
                        this.state = 915;
                        this.expr(0);
                        this.state = 920;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 921;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case 7:
                    this.state = 923;
                    this.match(SQLiteParser.CAST_);
                    this.state = 924;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 925;
                    this.expr(0);
                    this.state = 926;
                    this.match(SQLiteParser.AS_);
                    this.state = 927;
                    this.type_name();
                    this.state = 928;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case 8:
                    this.state = 934;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.EXISTS_ || _la === SQLiteParser.NOT_) {
                        this.state = 931;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SQLiteParser.NOT_) {
                            this.state = 930;
                            this.match(SQLiteParser.NOT_);
                        }
                        this.state = 933;
                        this.match(SQLiteParser.EXISTS_);
                    }
                    this.state = 936;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 937;
                    this.select_stmt();
                    this.state = 938;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case 9:
                    this.state = 940;
                    this.match(SQLiteParser.CASE_);
                    this.state = 942;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
                    if (la_ === 1) {
                        this.state = 941;
                        this.expr(0);
                    }
                    this.state = 949;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 944;
                        this.match(SQLiteParser.WHEN_);
                        this.state = 945;
                        this.expr(0);
                        this.state = 946;
                        this.match(SQLiteParser.THEN_);
                        this.state = 947;
                        this.expr(0);
                        this.state = 951;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === SQLiteParser.WHEN_);
                    this.state = 955;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ELSE_) {
                        this.state = 953;
                        this.match(SQLiteParser.ELSE_);
                        this.state = 954;
                        this.expr(0);
                    }
                    this.state = 957;
                    this.match(SQLiteParser.END_);
                    break;
                case 10:
                    this.state = 959;
                    this.raise_function();
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 1081;
            this._errHandler.sync(this);
            let _alt = this._interp.adaptivePredict(this._input, 137, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 1079;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 136, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 962;
                            if (!this.precpred(this._ctx, 20)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                            }
                            this.state = 963;
                            this.match(SQLiteParser.PIPE2);
                            this.state = 964;
                            this.expr(21);
                            break;
                        case 2:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 965;
                            if (!this.precpred(this._ctx, 19)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                            }
                            this.state = 966;
                            _la = this._input.LA(1);
                            if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) !== 0)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 967;
                            this.expr(20);
                            break;
                        case 3:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 968;
                            if (!this.precpred(this._ctx, 18)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                            }
                            this.state = 969;
                            _la = this._input.LA(1);
                            if (!(_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 970;
                            this.expr(19);
                            break;
                        case 4:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 971;
                            if (!this.precpred(this._ctx, 17)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                            }
                            this.state = 972;
                            _la = this._input.LA(1);
                            if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) !== 0)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 973;
                            this.expr(18);
                            break;
                        case 5:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 974;
                            if (!this.precpred(this._ctx, 16)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                            }
                            this.state = 975;
                            _la = this._input.LA(1);
                            if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) !== 0)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 976;
                            this.expr(17);
                            break;
                        case 6:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 977;
                            if (!this.precpred(this._ctx, 15)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                            }
                            this.state = 990;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 978;
                                    this.match(SQLiteParser.ASSIGN);
                                    break;
                                case 2:
                                    this.state = 979;
                                    this.match(SQLiteParser.EQ);
                                    break;
                                case 3:
                                    this.state = 980;
                                    this.match(SQLiteParser.NOT_EQ1);
                                    break;
                                case 4:
                                    this.state = 981;
                                    this.match(SQLiteParser.NOT_EQ2);
                                    break;
                                case 5:
                                    this.state = 982;
                                    this.match(SQLiteParser.IS_);
                                    break;
                                case 6:
                                    this.state = 983;
                                    this.match(SQLiteParser.IS_);
                                    this.state = 984;
                                    this.match(SQLiteParser.NOT_);
                                    break;
                                case 7:
                                    this.state = 985;
                                    this.match(SQLiteParser.IN_);
                                    break;
                                case 8:
                                    this.state = 986;
                                    this.match(SQLiteParser.LIKE_);
                                    break;
                                case 9:
                                    this.state = 987;
                                    this.match(SQLiteParser.GLOB_);
                                    break;
                                case 10:
                                    this.state = 988;
                                    this.match(SQLiteParser.MATCH_);
                                    break;
                                case 11:
                                    this.state = 989;
                                    this.match(SQLiteParser.REGEXP_);
                                    break;
                            }
                            this.state = 992;
                            this.expr(16);
                            break;
                        case 7:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 993;
                            if (!this.precpred(this._ctx, 14)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                            }
                            this.state = 994;
                            this.match(SQLiteParser.AND_);
                            this.state = 995;
                            this.expr(15);
                            break;
                        case 8:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 996;
                            if (!this.precpred(this._ctx, 13)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                            }
                            this.state = 997;
                            this.match(SQLiteParser.OR_);
                            this.state = 998;
                            this.expr(14);
                            break;
                        case 9:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 999;
                            if (!this.precpred(this._ctx, 6)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                            }
                            this.state = 1000;
                            this.match(SQLiteParser.IS_);
                            this.state = 1002;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
                            if (la_ === 1) {
                                this.state = 1001;
                                this.match(SQLiteParser.NOT_);
                            }
                            this.state = 1004;
                            this.expr(7);
                            break;
                        case 10:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 1005;
                            if (!this.precpred(this._ctx, 5)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                            }
                            this.state = 1007;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === SQLiteParser.NOT_) {
                                this.state = 1006;
                                this.match(SQLiteParser.NOT_);
                            }
                            this.state = 1009;
                            this.match(SQLiteParser.BETWEEN_);
                            this.state = 1010;
                            this.expr(0);
                            this.state = 1011;
                            this.match(SQLiteParser.AND_);
                            this.state = 1012;
                            this.expr(6);
                            break;
                        case 11:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 1014;
                            if (!this.precpred(this._ctx, 9)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                            }
                            this.state = 1015;
                            this.match(SQLiteParser.COLLATE_);
                            this.state = 1016;
                            this.collation_name();
                            break;
                        case 12:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 1017;
                            if (!this.precpred(this._ctx, 8)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                            }
                            this.state = 1019;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === SQLiteParser.NOT_) {
                                this.state = 1018;
                                this.match(SQLiteParser.NOT_);
                            }
                            this.state = 1021;
                            _la = this._input.LA(1);
                            if (!((((_la - 77) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB_ - 77)) | (1 << (SQLiteParser.LIKE_ - 77)) | (1 << (SQLiteParser.MATCH_ - 77)))) !== 0) ||
                                _la === SQLiteParser.REGEXP_)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1022;
                            this.expr(0);
                            this.state = 1025;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
                            if (la_ === 1) {
                                this.state = 1023;
                                this.match(SQLiteParser.ESCAPE_);
                                this.state = 1024;
                                this.expr(0);
                            }
                            break;
                        case 13:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 1027;
                            if (!this.precpred(this._ctx, 7)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                            }
                            this.state = 1032;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case SQLiteParser.ISNULL_:
                                    this.state = 1028;
                                    this.match(SQLiteParser.ISNULL_);
                                    break;
                                case SQLiteParser.NOTNULL_:
                                    this.state = 1029;
                                    this.match(SQLiteParser.NOTNULL_);
                                    break;
                                case SQLiteParser.NOT_:
                                    this.state = 1030;
                                    this.match(SQLiteParser.NOT_);
                                    this.state = 1031;
                                    this.match(SQLiteParser.NULL_);
                                    break;
                                default:
                                    throw new antlr4.error.NoViableAltException(this);
                            }
                            break;
                        case 14:
                            localctx = new ExprContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                            this.state = 1034;
                            if (!this.precpred(this._ctx, 4)) {
                                throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                            }
                            this.state = 1036;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === SQLiteParser.NOT_) {
                                this.state = 1035;
                                this.match(SQLiteParser.NOT_);
                            }
                            this.state = 1038;
                            this.match(SQLiteParser.IN_);
                            this.state = 1077;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1039;
                                    this.match(SQLiteParser.OPEN_PAR);
                                    this.state = 1049;
                                    this._errHandler.sync(this);
                                    var la_ = this._interp.adaptivePredict(this._input, 130, this._ctx);
                                    if (la_ === 1) {
                                        this.state = 1040;
                                        this.select_stmt();
                                    }
                                    else if (la_ === 2) {
                                        this.state = 1041;
                                        this.expr(0);
                                        this.state = 1046;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === SQLiteParser.COMMA) {
                                            this.state = 1042;
                                            this.match(SQLiteParser.COMMA);
                                            this.state = 1043;
                                            this.expr(0);
                                            this.state = 1048;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    }
                                    this.state = 1051;
                                    this.match(SQLiteParser.CLOSE_PAR);
                                    break;
                                case 2:
                                    this.state = 1055;
                                    this._errHandler.sync(this);
                                    var la_ = this._interp.adaptivePredict(this._input, 131, this._ctx);
                                    if (la_ === 1) {
                                        this.state = 1052;
                                        this.schema_name();
                                        this.state = 1053;
                                        this.match(SQLiteParser.DOT);
                                    }
                                    this.state = 1057;
                                    this.table_name();
                                    break;
                                case 3:
                                    this.state = 1061;
                                    this._errHandler.sync(this);
                                    var la_ = this._interp.adaptivePredict(this._input, 132, this._ctx);
                                    if (la_ === 1) {
                                        this.state = 1058;
                                        this.schema_name();
                                        this.state = 1059;
                                        this.match(SQLiteParser.DOT);
                                    }
                                    this.state = 1063;
                                    this.table_function_name();
                                    this.state = 1064;
                                    this.match(SQLiteParser.OPEN_PAR);
                                    this.state = 1073;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (((_la & ~0x1f) == 0 &&
                                        ((1 << _la) &
                                            ((1 << SQLiteParser.OPEN_PAR) |
                                                (1 << SQLiteParser.PLUS) |
                                                (1 << SQLiteParser.MINUS) |
                                                (1 << SQLiteParser.TILDE) |
                                                (1 << SQLiteParser.ABORT_) |
                                                (1 << SQLiteParser.ACTION_) |
                                                (1 << SQLiteParser.ADD_) |
                                                (1 << SQLiteParser.AFTER_) |
                                                (1 << SQLiteParser.ALL_) |
                                                (1 << SQLiteParser.ALTER_) |
                                                (1 << SQLiteParser.ANALYZE_))) !==
                                            0) ||
                                        (((_la - 32) & ~0x1f) == 0 &&
                                            ((1 << (_la - 32)) &
                                                ((1 << (SQLiteParser.AND_ - 32)) |
                                                    (1 << (SQLiteParser.AS_ - 32)) |
                                                    (1 << (SQLiteParser.ASC_ - 32)) |
                                                    (1 << (SQLiteParser.ATTACH_ - 32)) |
                                                    (1 << (SQLiteParser.AUTOINCREMENT_ - 32)) |
                                                    (1 << (SQLiteParser.BEFORE_ - 32)) |
                                                    (1 << (SQLiteParser.BEGIN_ - 32)) |
                                                    (1 << (SQLiteParser.BETWEEN_ - 32)) |
                                                    (1 << (SQLiteParser.BY_ - 32)) |
                                                    (1 << (SQLiteParser.CASCADE_ - 32)) |
                                                    (1 << (SQLiteParser.CASE_ - 32)) |
                                                    (1 << (SQLiteParser.CAST_ - 32)) |
                                                    (1 << (SQLiteParser.CHECK_ - 32)) |
                                                    (1 << (SQLiteParser.COLLATE_ - 32)) |
                                                    (1 << (SQLiteParser.COLUMN_ - 32)) |
                                                    (1 << (SQLiteParser.COMMIT_ - 32)) |
                                                    (1 << (SQLiteParser.CONFLICT_ - 32)) |
                                                    (1 << (SQLiteParser.CONSTRAINT_ - 32)) |
                                                    (1 << (SQLiteParser.CREATE_ - 32)) |
                                                    (1 << (SQLiteParser.CROSS_ - 32)) |
                                                    (1 << (SQLiteParser.CURRENT_DATE_ - 32)) |
                                                    (1 << (SQLiteParser.CURRENT_TIME_ - 32)) |
                                                    (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) |
                                                    (1 << (SQLiteParser.DATABASE_ - 32)) |
                                                    (1 << (SQLiteParser.DEFAULT_ - 32)) |
                                                    (1 << (SQLiteParser.DEFERRABLE_ - 32)) |
                                                    (1 << (SQLiteParser.DEFERRED_ - 32)) |
                                                    (1 << (SQLiteParser.DELETE_ - 32)) |
                                                    (1 << (SQLiteParser.DESC_ - 32)) |
                                                    (1 << (SQLiteParser.DETACH_ - 32)) |
                                                    (1 << (SQLiteParser.DISTINCT_ - 32)) |
                                                    (1 << (SQLiteParser.DROP_ - 32)))) !==
                                                0) ||
                                        (((_la - 64) & ~0x1f) == 0 &&
                                            ((1 << (_la - 64)) &
                                                ((1 << (SQLiteParser.EACH_ - 64)) |
                                                    (1 << (SQLiteParser.ELSE_ - 64)) |
                                                    (1 << (SQLiteParser.END_ - 64)) |
                                                    (1 << (SQLiteParser.ESCAPE_ - 64)) |
                                                    (1 << (SQLiteParser.EXCEPT_ - 64)) |
                                                    (1 << (SQLiteParser.EXCLUSIVE_ - 64)) |
                                                    (1 << (SQLiteParser.EXISTS_ - 64)) |
                                                    (1 << (SQLiteParser.EXPLAIN_ - 64)) |
                                                    (1 << (SQLiteParser.FAIL_ - 64)) |
                                                    (1 << (SQLiteParser.FOR_ - 64)) |
                                                    (1 << (SQLiteParser.FOREIGN_ - 64)) |
                                                    (1 << (SQLiteParser.FROM_ - 64)) |
                                                    (1 << (SQLiteParser.FULL_ - 64)) |
                                                    (1 << (SQLiteParser.GLOB_ - 64)) |
                                                    (1 << (SQLiteParser.GROUP_ - 64)) |
                                                    (1 << (SQLiteParser.HAVING_ - 64)) |
                                                    (1 << (SQLiteParser.IF_ - 64)) |
                                                    (1 << (SQLiteParser.IGNORE_ - 64)) |
                                                    (1 << (SQLiteParser.IMMEDIATE_ - 64)) |
                                                    (1 << (SQLiteParser.IN_ - 64)) |
                                                    (1 << (SQLiteParser.INDEX_ - 64)) |
                                                    (1 << (SQLiteParser.INDEXED_ - 64)) |
                                                    (1 << (SQLiteParser.INITIALLY_ - 64)) |
                                                    (1 << (SQLiteParser.INNER_ - 64)) |
                                                    (1 << (SQLiteParser.INSERT_ - 64)) |
                                                    (1 << (SQLiteParser.INSTEAD_ - 64)) |
                                                    (1 << (SQLiteParser.INTERSECT_ - 64)) |
                                                    (1 << (SQLiteParser.INTO_ - 64)) |
                                                    (1 << (SQLiteParser.IS_ - 64)) |
                                                    (1 << (SQLiteParser.ISNULL_ - 64)) |
                                                    (1 << (SQLiteParser.JOIN_ - 64)) |
                                                    (1 << (SQLiteParser.KEY_ - 64)))) !==
                                                0) ||
                                        (((_la - 96) & ~0x1f) == 0 &&
                                            ((1 << (_la - 96)) &
                                                ((1 << (SQLiteParser.LEFT_ - 96)) |
                                                    (1 << (SQLiteParser.LIKE_ - 96)) |
                                                    (1 << (SQLiteParser.LIMIT_ - 96)) |
                                                    (1 << (SQLiteParser.MATCH_ - 96)) |
                                                    (1 << (SQLiteParser.NATURAL_ - 96)) |
                                                    (1 << (SQLiteParser.NO_ - 96)) |
                                                    (1 << (SQLiteParser.NOT_ - 96)) |
                                                    (1 << (SQLiteParser.NOTNULL_ - 96)) |
                                                    (1 << (SQLiteParser.NULL_ - 96)) |
                                                    (1 << (SQLiteParser.OF_ - 96)) |
                                                    (1 << (SQLiteParser.OFFSET_ - 96)) |
                                                    (1 << (SQLiteParser.ON_ - 96)) |
                                                    (1 << (SQLiteParser.OR_ - 96)) |
                                                    (1 << (SQLiteParser.ORDER_ - 96)) |
                                                    (1 << (SQLiteParser.OUTER_ - 96)) |
                                                    (1 << (SQLiteParser.PLAN_ - 96)) |
                                                    (1 << (SQLiteParser.PRAGMA_ - 96)) |
                                                    (1 << (SQLiteParser.PRIMARY_ - 96)) |
                                                    (1 << (SQLiteParser.QUERY_ - 96)) |
                                                    (1 << (SQLiteParser.RAISE_ - 96)) |
                                                    (1 << (SQLiteParser.RECURSIVE_ - 96)) |
                                                    (1 << (SQLiteParser.REFERENCES_ - 96)) |
                                                    (1 << (SQLiteParser.REGEXP_ - 96)) |
                                                    (1 << (SQLiteParser.REINDEX_ - 96)) |
                                                    (1 << (SQLiteParser.RELEASE_ - 96)) |
                                                    (1 << (SQLiteParser.RENAME_ - 96)) |
                                                    (1 << (SQLiteParser.REPLACE_ - 96)) |
                                                    (1 << (SQLiteParser.RESTRICT_ - 96)) |
                                                    (1 << (SQLiteParser.RIGHT_ - 96)) |
                                                    (1 << (SQLiteParser.ROLLBACK_ - 96)) |
                                                    (1 << (SQLiteParser.ROW_ - 96)))) !==
                                                0) ||
                                        (((_la - 128) & ~0x1f) == 0 &&
                                            ((1 << (_la - 128)) &
                                                ((1 << (SQLiteParser.ROWS_ - 128)) |
                                                    (1 << (SQLiteParser.SAVEPOINT_ - 128)) |
                                                    (1 << (SQLiteParser.SELECT_ - 128)) |
                                                    (1 << (SQLiteParser.SET_ - 128)) |
                                                    (1 << (SQLiteParser.TABLE_ - 128)) |
                                                    (1 << (SQLiteParser.TEMP_ - 128)) |
                                                    (1 << (SQLiteParser.TEMPORARY_ - 128)) |
                                                    (1 << (SQLiteParser.THEN_ - 128)) |
                                                    (1 << (SQLiteParser.TO_ - 128)) |
                                                    (1 << (SQLiteParser.TRANSACTION_ - 128)) |
                                                    (1 << (SQLiteParser.TRIGGER_ - 128)) |
                                                    (1 << (SQLiteParser.UNION_ - 128)) |
                                                    (1 << (SQLiteParser.UNIQUE_ - 128)) |
                                                    (1 << (SQLiteParser.UPDATE_ - 128)) |
                                                    (1 << (SQLiteParser.USING_ - 128)) |
                                                    (1 << (SQLiteParser.VACUUM_ - 128)) |
                                                    (1 << (SQLiteParser.VALUES_ - 128)) |
                                                    (1 << (SQLiteParser.VIEW_ - 128)) |
                                                    (1 << (SQLiteParser.VIRTUAL_ - 128)) |
                                                    (1 << (SQLiteParser.WHEN_ - 128)) |
                                                    (1 << (SQLiteParser.WHERE_ - 128)) |
                                                    (1 << (SQLiteParser.WITH_ - 128)) |
                                                    (1 << (SQLiteParser.WITHOUT_ - 128)) |
                                                    (1 << (SQLiteParser.FIRST_VALUE_ - 128)) |
                                                    (1 << (SQLiteParser.OVER_ - 128)) |
                                                    (1 << (SQLiteParser.PARTITION_ - 128)) |
                                                    (1 << (SQLiteParser.RANGE_ - 128)) |
                                                    (1 << (SQLiteParser.PRECEDING_ - 128)) |
                                                    (1 << (SQLiteParser.UNBOUNDED_ - 128)) |
                                                    (1 << (SQLiteParser.CURRENT_ - 128)) |
                                                    (1 << (SQLiteParser.FOLLOWING_ - 128)) |
                                                    (1 << (SQLiteParser.CUME_DIST_ - 128)))) !==
                                                0) ||
                                        (((_la - 160) & ~0x1f) == 0 &&
                                            ((1 << (_la - 160)) &
                                                ((1 << (SQLiteParser.DENSE_RANK_ - 160)) |
                                                    (1 << (SQLiteParser.LAG_ - 160)) |
                                                    (1 << (SQLiteParser.LAST_VALUE_ - 160)) |
                                                    (1 << (SQLiteParser.LEAD_ - 160)) |
                                                    (1 << (SQLiteParser.NTH_VALUE_ - 160)) |
                                                    (1 << (SQLiteParser.NTILE_ - 160)) |
                                                    (1 << (SQLiteParser.PERCENT_RANK_ - 160)) |
                                                    (1 << (SQLiteParser.RANK_ - 160)) |
                                                    (1 << (SQLiteParser.ROW_NUMBER_ - 160)) |
                                                    (1 << (SQLiteParser.GENERATED_ - 160)) |
                                                    (1 << (SQLiteParser.ALWAYS_ - 160)) |
                                                    (1 << (SQLiteParser.STORED_ - 160)) |
                                                    (1 << (SQLiteParser.TRUE_ - 160)) |
                                                    (1 << (SQLiteParser.FALSE_ - 160)) |
                                                    (1 << (SQLiteParser.WINDOW_ - 160)) |
                                                    (1 << (SQLiteParser.NULLS_ - 160)) |
                                                    (1 << (SQLiteParser.FIRST_ - 160)) |
                                                    (1 << (SQLiteParser.LAST_ - 160)) |
                                                    (1 << (SQLiteParser.FILTER_ - 160)) |
                                                    (1 << (SQLiteParser.GROUPS_ - 160)) |
                                                    (1 << (SQLiteParser.EXCLUDE_ - 160)) |
                                                    (1 << (SQLiteParser.IDENTIFIER - 160)) |
                                                    (1 << (SQLiteParser.NUMERIC_LITERAL - 160)) |
                                                    (1 << (SQLiteParser.BIND_PARAMETER - 160)) |
                                                    (1 << (SQLiteParser.STRING_LITERAL - 160)) |
                                                    (1 << (SQLiteParser.BLOB_LITERAL - 160)))) !==
                                                0)) {
                                        this.state = 1065;
                                        this.expr(0);
                                        this.state = 1070;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === SQLiteParser.COMMA) {
                                            this.state = 1066;
                                            this.match(SQLiteParser.COMMA);
                                            this.state = 1067;
                                            this.expr(0);
                                            this.state = 1072;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                    }
                                    this.state = 1075;
                                    this.match(SQLiteParser.CLOSE_PAR);
                                    break;
                            }
                            break;
                    }
                }
                this.state = 1083;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 137, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    raise_function() {
        const localctx = new Raise_functionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, SQLiteParser.RULE_raise_function);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1084;
            this.match(SQLiteParser.RAISE_);
            this.state = 1085;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1090;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.IGNORE_:
                    this.state = 1086;
                    this.match(SQLiteParser.IGNORE_);
                    break;
                case SQLiteParser.ABORT_:
                case SQLiteParser.FAIL_:
                case SQLiteParser.ROLLBACK_:
                    this.state = 1087;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.ROLLBACK_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1088;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1089;
                    this.error_message();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1092;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal_value() {
        const localctx = new Literal_valueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, SQLiteParser.RULE_literal_value);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1094;
            _la = this._input.LA(1);
            if (!((((_la - 52) & ~0x1f) == 0 &&
                ((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE_ - 52)) | (1 << (SQLiteParser.CURRENT_TIME_ - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 52)))) !== 0) ||
                _la === SQLiteParser.NULL_ ||
                (((_la - 172) & ~0x1f) == 0 &&
                    ((1 << (_la - 172)) &
                        ((1 << (SQLiteParser.TRUE_ - 172)) |
                            (1 << (SQLiteParser.FALSE_ - 172)) |
                            (1 << (SQLiteParser.NUMERIC_LITERAL - 172)) |
                            (1 << (SQLiteParser.STRING_LITERAL - 172)) |
                            (1 << (SQLiteParser.BLOB_LITERAL - 172)))) !==
                        0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    insert_stmt() {
        const localctx = new Insert_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, SQLiteParser.RULE_insert_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1096;
                this.with_clause();
            }
            this.state = 1104;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1099;
                    this.match(SQLiteParser.INSERT_);
                    break;
                case 2:
                    this.state = 1100;
                    this.match(SQLiteParser.REPLACE_);
                    break;
                case 3:
                    this.state = 1101;
                    this.match(SQLiteParser.INSERT_);
                    this.state = 1102;
                    this.match(SQLiteParser.OR_);
                    this.state = 1103;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
            }
            this.state = 1106;
            this.match(SQLiteParser.INTO_);
            this.state = 1110;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
            if (la_ === 1) {
                this.state = 1107;
                this.schema_name();
                this.state = 1108;
                this.match(SQLiteParser.DOT);
            }
            this.state = 1112;
            this.table_name();
            this.state = 1115;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.AS_) {
                this.state = 1113;
                this.match(SQLiteParser.AS_);
                this.state = 1114;
                this.table_alias();
            }
            this.state = 1128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 1117;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 1118;
                this.column_name();
                this.state = 1123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 1119;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1120;
                    this.column_name();
                    this.state = 1125;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1126;
                this.match(SQLiteParser.CLOSE_PAR);
            }
            this.state = 1166;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.SELECT_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.WITH_:
                    this.state = 1159;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1130;
                            this.match(SQLiteParser.VALUES_);
                            this.state = 1131;
                            this.match(SQLiteParser.OPEN_PAR);
                            this.state = 1132;
                            this.expr(0);
                            this.state = 1137;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === SQLiteParser.COMMA) {
                                this.state = 1133;
                                this.match(SQLiteParser.COMMA);
                                this.state = 1134;
                                this.expr(0);
                                this.state = 1139;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1140;
                            this.match(SQLiteParser.CLOSE_PAR);
                            this.state = 1155;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === SQLiteParser.COMMA) {
                                this.state = 1141;
                                this.match(SQLiteParser.COMMA);
                                this.state = 1142;
                                this.match(SQLiteParser.OPEN_PAR);
                                this.state = 1143;
                                this.expr(0);
                                this.state = 1148;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === SQLiteParser.COMMA) {
                                    this.state = 1144;
                                    this.match(SQLiteParser.COMMA);
                                    this.state = 1145;
                                    this.expr(0);
                                    this.state = 1150;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 1151;
                                this.match(SQLiteParser.CLOSE_PAR);
                                this.state = 1157;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            break;
                        case 2:
                            this.state = 1158;
                            this.select_stmt();
                            break;
                    }
                    this.state = 1162;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ON_) {
                        this.state = 1161;
                        this.upsert_clause();
                    }
                    break;
                case SQLiteParser.DEFAULT_:
                    this.state = 1164;
                    this.match(SQLiteParser.DEFAULT_);
                    this.state = 1165;
                    this.match(SQLiteParser.VALUES_);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.RETURNING_) {
                this.state = 1168;
                this.returning_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    returning_clause() {
        const localctx = new Returning_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, SQLiteParser.RULE_returning_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1171;
            this.match(SQLiteParser.RETURNING_);
            this.state = 1172;
            this.result_column();
            this.state = 1177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1173;
                this.match(SQLiteParser.COMMA);
                this.state = 1174;
                this.result_column();
                this.state = 1179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    upsert_clause() {
        const localctx = new Upsert_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, SQLiteParser.RULE_upsert_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1180;
            this.match(SQLiteParser.ON_);
            this.state = 1181;
            this.match(SQLiteParser.CONFLICT_);
            this.state = 1196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.OPEN_PAR) {
                this.state = 1182;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 1183;
                this.indexed_column();
                this.state = 1188;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 1184;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1185;
                    this.indexed_column();
                    this.state = 1190;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1191;
                this.match(SQLiteParser.CLOSE_PAR);
                this.state = 1194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.WHERE_) {
                    this.state = 1192;
                    this.match(SQLiteParser.WHERE_);
                    this.state = 1193;
                    this.expr(0);
                }
            }
            this.state = 1198;
            this.match(SQLiteParser.DO_);
            this.state = 1225;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.NOTHING_:
                    this.state = 1199;
                    this.match(SQLiteParser.NOTHING_);
                    break;
                case SQLiteParser.UPDATE_:
                    this.state = 1200;
                    this.match(SQLiteParser.UPDATE_);
                    this.state = 1201;
                    this.match(SQLiteParser.SET_);
                    this.state = 1204;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1202;
                            this.column_name();
                            break;
                        case 2:
                            this.state = 1203;
                            this.column_name_list();
                            break;
                    }
                    this.state = 1206;
                    this.match(SQLiteParser.ASSIGN);
                    this.state = 1207;
                    this.expr(0);
                    this.state = 1218;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1208;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1211;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
                        switch (la_) {
                            case 1:
                                this.state = 1209;
                                this.column_name();
                                break;
                            case 2:
                                this.state = 1210;
                                this.column_name_list();
                                break;
                        }
                        this.state = 1213;
                        this.match(SQLiteParser.ASSIGN);
                        this.state = 1214;
                        this.expr(0);
                        this.state = 1220;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1223;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.WHERE_) {
                        this.state = 1221;
                        this.match(SQLiteParser.WHERE_);
                        this.state = 1222;
                        this.expr(0);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pragma_stmt() {
        const localctx = new Pragma_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, SQLiteParser.RULE_pragma_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1227;
            this.match(SQLiteParser.PRAGMA_);
            this.state = 1231;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
            if (la_ === 1) {
                this.state = 1228;
                this.schema_name();
                this.state = 1229;
                this.match(SQLiteParser.DOT);
            }
            this.state = 1233;
            this.pragma_name();
            this.state = 1240;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.ASSIGN:
                    this.state = 1234;
                    this.match(SQLiteParser.ASSIGN);
                    this.state = 1235;
                    this.pragma_value();
                    break;
                case SQLiteParser.OPEN_PAR:
                    this.state = 1236;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1237;
                    this.pragma_value();
                    this.state = 1238;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.EOF:
                case SQLiteParser.SCOL:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DROP_:
                case SQLiteParser.END_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.WITH_:
                    break;
                default:
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pragma_value() {
        const localctx = new Pragma_valueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, SQLiteParser.RULE_pragma_value);
        try {
            this.state = 1245;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 163, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1242;
                    this.signed_number();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1243;
                    this.name();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1244;
                    this.match(SQLiteParser.STRING_LITERAL);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    reindex_stmt() {
        const localctx = new Reindex_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, SQLiteParser.RULE_reindex_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1247;
            this.match(SQLiteParser.REINDEX_);
            this.state = 1258;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
            if (la_ === 1) {
                this.state = 1248;
                this.collation_name();
            }
            else if (la_ === 2) {
                this.state = 1252;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
                if (la_ === 1) {
                    this.state = 1249;
                    this.schema_name();
                    this.state = 1250;
                    this.match(SQLiteParser.DOT);
                }
                this.state = 1256;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1254;
                        this.table_name();
                        break;
                    case 2:
                        this.state = 1255;
                        this.index_name();
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    select_stmt() {
        const localctx = new Select_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, SQLiteParser.RULE_select_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1261;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1260;
                this.common_table_stmt();
            }
            this.state = 1263;
            this.select_core();
            this.state = 1269;
            this._errHandler.sync(this);
            let _alt = this._interp.adaptivePredict(this._input, 168, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1264;
                    this.compound_operator();
                    this.state = 1265;
                    this.select_core();
                }
                this.state = 1271;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 168, this._ctx);
            }
            this.state = 1273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ORDER_) {
                this.state = 1272;
                this.order_by_stmt();
            }
            this.state = 1276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.LIMIT_) {
                this.state = 1275;
                this.limit_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    join_clause() {
        const localctx = new Join_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, SQLiteParser.RULE_join_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1278;
            this.table_or_subquery();
            this.state = 1286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA ||
                _la === SQLiteParser.CROSS_ ||
                (((_la - 87) & ~0x1f) == 0 &&
                    ((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER_ - 87)) | (1 << (SQLiteParser.JOIN_ - 87)) | (1 << (SQLiteParser.LEFT_ - 87)) | (1 << (SQLiteParser.NATURAL_ - 87)))) !== 0)) {
                this.state = 1279;
                this.join_operator();
                this.state = 1280;
                this.table_or_subquery();
                this.state = 1282;
                this._errHandler.sync(this);
                const la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);
                if (la_ === 1) {
                    this.state = 1281;
                    this.join_constraint();
                }
                this.state = 1288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    select_core() {
        const localctx = new Select_coreContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, SQLiteParser.RULE_select_core);
        let _la = 0; // Token type
        try {
            this.state = 1379;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.SELECT_:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1289;
                    this.match(SQLiteParser.SELECT_);
                    this.state = 1291;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
                    if (la_ === 1) {
                        this.state = 1290;
                        _la = this._input.LA(1);
                        if (!(_la === SQLiteParser.ALL_ || _la === SQLiteParser.DISTINCT_)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    this.state = 1293;
                    this.result_column();
                    this.state = 1298;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1294;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1295;
                        this.result_column();
                        this.state = 1300;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1313;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.FROM_) {
                        this.state = 1301;
                        this.match(SQLiteParser.FROM_);
                        this.state = 1311;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
                        switch (la_) {
                            case 1:
                                this.state = 1302;
                                this.table_or_subquery();
                                this.state = 1307;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === SQLiteParser.COMMA) {
                                    this.state = 1303;
                                    this.match(SQLiteParser.COMMA);
                                    this.state = 1304;
                                    this.table_or_subquery();
                                    this.state = 1309;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                break;
                            case 2:
                                this.state = 1310;
                                this.join_clause();
                                break;
                        }
                    }
                    this.state = 1317;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.WHERE_) {
                        this.state = 1315;
                        this.match(SQLiteParser.WHERE_);
                        this.state = 1316;
                        this.expr(0);
                    }
                    this.state = 1333;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.GROUP_) {
                        this.state = 1319;
                        this.match(SQLiteParser.GROUP_);
                        this.state = 1320;
                        this.match(SQLiteParser.BY_);
                        this.state = 1321;
                        this.expr(0);
                        this.state = 1326;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1322;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1323;
                            this.expr(0);
                            this.state = 1328;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1331;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SQLiteParser.HAVING_) {
                            this.state = 1329;
                            this.match(SQLiteParser.HAVING_);
                            this.state = 1330;
                            this.expr(0);
                        }
                    }
                    this.state = 1349;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.WINDOW_) {
                        this.state = 1335;
                        this.match(SQLiteParser.WINDOW_);
                        this.state = 1336;
                        this.window_name();
                        this.state = 1337;
                        this.match(SQLiteParser.AS_);
                        this.state = 1338;
                        this.window_defn();
                        this.state = 1346;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1339;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1340;
                            this.window_name();
                            this.state = 1341;
                            this.match(SQLiteParser.AS_);
                            this.state = 1342;
                            this.window_defn();
                            this.state = 1348;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    break;
                case SQLiteParser.VALUES_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1351;
                    this.match(SQLiteParser.VALUES_);
                    this.state = 1352;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1353;
                    this.expr(0);
                    this.state = 1358;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1354;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1355;
                        this.expr(0);
                        this.state = 1360;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1361;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1376;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1362;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1363;
                        this.match(SQLiteParser.OPEN_PAR);
                        this.state = 1364;
                        this.expr(0);
                        this.state = 1369;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1365;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1366;
                            this.expr(0);
                            this.state = 1371;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1372;
                        this.match(SQLiteParser.CLOSE_PAR);
                        this.state = 1378;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    factored_select_stmt() {
        const localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, SQLiteParser.RULE_factored_select_stmt);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1381;
            this.select_stmt();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simple_select_stmt() {
        const localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, SQLiteParser.RULE_simple_select_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1383;
                this.common_table_stmt();
            }
            this.state = 1386;
            this.select_core();
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ORDER_) {
                this.state = 1387;
                this.order_by_stmt();
            }
            this.state = 1391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.LIMIT_) {
                this.state = 1390;
                this.limit_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compound_select_stmt() {
        const localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, SQLiteParser.RULE_compound_select_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1393;
                this.common_table_stmt();
            }
            this.state = 1396;
            this.select_core();
            this.state = 1406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1403;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case SQLiteParser.UNION_:
                        this.state = 1397;
                        this.match(SQLiteParser.UNION_);
                        this.state = 1399;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SQLiteParser.ALL_) {
                            this.state = 1398;
                            this.match(SQLiteParser.ALL_);
                        }
                        break;
                    case SQLiteParser.INTERSECT_:
                        this.state = 1401;
                        this.match(SQLiteParser.INTERSECT_);
                        break;
                    case SQLiteParser.EXCEPT_:
                        this.state = 1402;
                        this.match(SQLiteParser.EXCEPT_);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1405;
                this.select_core();
                this.state = 1408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === SQLiteParser.EXCEPT_ || _la === SQLiteParser.INTERSECT_ || _la === SQLiteParser.UNION_);
            this.state = 1411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ORDER_) {
                this.state = 1410;
                this.order_by_stmt();
            }
            this.state = 1414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.LIMIT_) {
                this.state = 1413;
                this.limit_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_or_subquery() {
        const localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, SQLiteParser.RULE_table_or_subquery);
        let _la = 0; // Token type
        try {
            this.state = 1480;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1419;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
                    if (la_ === 1) {
                        this.state = 1416;
                        this.schema_name();
                        this.state = 1417;
                        this.match(SQLiteParser.DOT);
                    }
                    this.state = 1421;
                    this.table_name();
                    this.state = 1426;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
                    if (la_ === 1) {
                        this.state = 1423;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 198, this._ctx);
                        if (la_ === 1) {
                            this.state = 1422;
                            this.match(SQLiteParser.AS_);
                        }
                        this.state = 1425;
                        this.table_alias();
                    }
                    this.state = 1433;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case SQLiteParser.INDEXED_:
                            this.state = 1428;
                            this.match(SQLiteParser.INDEXED_);
                            this.state = 1429;
                            this.match(SQLiteParser.BY_);
                            this.state = 1430;
                            this.index_name();
                            break;
                        case SQLiteParser.NOT_:
                            this.state = 1431;
                            this.match(SQLiteParser.NOT_);
                            this.state = 1432;
                            this.match(SQLiteParser.INDEXED_);
                            break;
                        case SQLiteParser.EOF:
                        case SQLiteParser.SCOL:
                        case SQLiteParser.CLOSE_PAR:
                        case SQLiteParser.COMMA:
                        case SQLiteParser.ALTER_:
                        case SQLiteParser.ANALYZE_:
                        case SQLiteParser.ATTACH_:
                        case SQLiteParser.BEGIN_:
                        case SQLiteParser.COMMIT_:
                        case SQLiteParser.CREATE_:
                        case SQLiteParser.CROSS_:
                        case SQLiteParser.DELETE_:
                        case SQLiteParser.DETACH_:
                        case SQLiteParser.DROP_:
                        case SQLiteParser.END_:
                        case SQLiteParser.EXCEPT_:
                        case SQLiteParser.EXPLAIN_:
                        case SQLiteParser.GROUP_:
                        case SQLiteParser.INNER_:
                        case SQLiteParser.INSERT_:
                        case SQLiteParser.INTERSECT_:
                        case SQLiteParser.JOIN_:
                        case SQLiteParser.LEFT_:
                        case SQLiteParser.LIMIT_:
                        case SQLiteParser.NATURAL_:
                        case SQLiteParser.ON_:
                        case SQLiteParser.ORDER_:
                        case SQLiteParser.PRAGMA_:
                        case SQLiteParser.REINDEX_:
                        case SQLiteParser.RELEASE_:
                        case SQLiteParser.REPLACE_:
                        case SQLiteParser.RETURNING_:
                        case SQLiteParser.ROLLBACK_:
                        case SQLiteParser.SAVEPOINT_:
                        case SQLiteParser.SELECT_:
                        case SQLiteParser.UNION_:
                        case SQLiteParser.UPDATE_:
                        case SQLiteParser.USING_:
                        case SQLiteParser.VACUUM_:
                        case SQLiteParser.VALUES_:
                        case SQLiteParser.WHERE_:
                        case SQLiteParser.WITH_:
                        case SQLiteParser.WINDOW_:
                            break;
                        default:
                            break;
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1438;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 201, this._ctx);
                    if (la_ === 1) {
                        this.state = 1435;
                        this.schema_name();
                        this.state = 1436;
                        this.match(SQLiteParser.DOT);
                    }
                    this.state = 1440;
                    this.table_function_name();
                    this.state = 1441;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1442;
                    this.expr(0);
                    this.state = 1447;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1443;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1444;
                        this.expr(0);
                        this.state = 1449;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1450;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1455;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
                    if (la_ === 1) {
                        this.state = 1452;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 203, this._ctx);
                        if (la_ === 1) {
                            this.state = 1451;
                            this.match(SQLiteParser.AS_);
                        }
                        this.state = 1454;
                        this.table_alias();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1457;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1467;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1458;
                            this.table_or_subquery();
                            this.state = 1463;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === SQLiteParser.COMMA) {
                                this.state = 1459;
                                this.match(SQLiteParser.COMMA);
                                this.state = 1460;
                                this.table_or_subquery();
                                this.state = 1465;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            break;
                        case 2:
                            this.state = 1466;
                            this.join_clause();
                            break;
                    }
                    this.state = 1469;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1471;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1472;
                    this.select_stmt();
                    this.state = 1473;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1478;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
                    if (la_ === 1) {
                        this.state = 1475;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 207, this._ctx);
                        if (la_ === 1) {
                            this.state = 1474;
                            this.match(SQLiteParser.AS_);
                        }
                        this.state = 1477;
                        this.table_alias();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    result_column() {
        const localctx = new Result_columnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, SQLiteParser.RULE_result_column);
        let _la = 0; // Token type
        try {
            this.state = 1494;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 212, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1482;
                    this.match(SQLiteParser.STAR);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1483;
                    this.table_name();
                    this.state = 1484;
                    this.match(SQLiteParser.DOT);
                    this.state = 1485;
                    this.match(SQLiteParser.STAR);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1487;
                    this.expr(0);
                    this.state = 1492;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.AS_ || _la === SQLiteParser.IDENTIFIER || _la === SQLiteParser.STRING_LITERAL) {
                        this.state = 1489;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === SQLiteParser.AS_) {
                            this.state = 1488;
                            this.match(SQLiteParser.AS_);
                        }
                        this.state = 1491;
                        this.column_alias();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    join_operator() {
        const localctx = new Join_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, SQLiteParser.RULE_join_operator);
        let _la = 0; // Token type
        try {
            this.state = 1509;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.COMMA:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1496;
                    this.match(SQLiteParser.COMMA);
                    break;
                case SQLiteParser.CROSS_:
                case SQLiteParser.INNER_:
                case SQLiteParser.JOIN_:
                case SQLiteParser.LEFT_:
                case SQLiteParser.NATURAL_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1498;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.NATURAL_) {
                        this.state = 1497;
                        this.match(SQLiteParser.NATURAL_);
                    }
                    this.state = 1506;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case SQLiteParser.LEFT_:
                            this.state = 1500;
                            this.match(SQLiteParser.LEFT_);
                            this.state = 1502;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === SQLiteParser.OUTER_) {
                                this.state = 1501;
                                this.match(SQLiteParser.OUTER_);
                            }
                            break;
                        case SQLiteParser.INNER_:
                            this.state = 1504;
                            this.match(SQLiteParser.INNER_);
                            break;
                        case SQLiteParser.CROSS_:
                            this.state = 1505;
                            this.match(SQLiteParser.CROSS_);
                            break;
                        case SQLiteParser.JOIN_:
                            break;
                        default:
                            break;
                    }
                    this.state = 1508;
                    this.match(SQLiteParser.JOIN_);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    join_constraint() {
        const localctx = new Join_constraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, SQLiteParser.RULE_join_constraint);
        let _la = 0; // Token type
        try {
            this.state = 1525;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.ON_:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1511;
                    this.match(SQLiteParser.ON_);
                    this.state = 1512;
                    this.expr(0);
                    break;
                case SQLiteParser.USING_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1513;
                    this.match(SQLiteParser.USING_);
                    this.state = 1514;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1515;
                    this.column_name();
                    this.state = 1520;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1516;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1517;
                        this.column_name();
                        this.state = 1522;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1523;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compound_operator() {
        const localctx = new Compound_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, SQLiteParser.RULE_compound_operator);
        let _la = 0; // Token type
        try {
            this.state = 1533;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.UNION_:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1527;
                    this.match(SQLiteParser.UNION_);
                    this.state = 1529;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ALL_) {
                        this.state = 1528;
                        this.match(SQLiteParser.ALL_);
                    }
                    break;
                case SQLiteParser.INTERSECT_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1531;
                    this.match(SQLiteParser.INTERSECT_);
                    break;
                case SQLiteParser.EXCEPT_:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1532;
                    this.match(SQLiteParser.EXCEPT_);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    update_stmt() {
        const localctx = new Update_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, SQLiteParser.RULE_update_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1535;
                this.with_clause();
            }
            this.state = 1538;
            this.match(SQLiteParser.UPDATE_);
            this.state = 1541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 222, this._ctx);
            if (la_ === 1) {
                this.state = 1539;
                this.match(SQLiteParser.OR_);
                this.state = 1540;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 1543;
            this.qualified_table_name();
            this.state = 1544;
            this.match(SQLiteParser.SET_);
            this.state = 1547;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1545;
                    this.column_name();
                    break;
                case 2:
                    this.state = 1546;
                    this.column_name_list();
                    break;
            }
            this.state = 1549;
            this.match(SQLiteParser.ASSIGN);
            this.state = 1550;
            this.expr(0);
            this.state = 1561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1551;
                this.match(SQLiteParser.COMMA);
                this.state = 1554;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1552;
                        this.column_name();
                        break;
                    case 2:
                        this.state = 1553;
                        this.column_name_list();
                        break;
                }
                this.state = 1556;
                this.match(SQLiteParser.ASSIGN);
                this.state = 1557;
                this.expr(0);
                this.state = 1563;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1576;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.FROM_) {
                this.state = 1564;
                this.match(SQLiteParser.FROM_);
                this.state = 1574;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 227, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1565;
                        this.table_or_subquery();
                        this.state = 1570;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1566;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1567;
                            this.table_or_subquery();
                            this.state = 1572;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        break;
                    case 2:
                        this.state = 1573;
                        this.join_clause();
                        break;
                }
            }
            this.state = 1580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHERE_) {
                this.state = 1578;
                this.match(SQLiteParser.WHERE_);
                this.state = 1579;
                this.expr(0);
            }
            this.state = 1583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.RETURNING_) {
                this.state = 1582;
                this.returning_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    column_name_list() {
        const localctx = new Column_name_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, SQLiteParser.RULE_column_name_list);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1585;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1586;
            this.column_name();
            this.state = 1591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1587;
                this.match(SQLiteParser.COMMA);
                this.state = 1588;
                this.column_name();
                this.state = 1593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1594;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    update_stmt_limited() {
        const localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, SQLiteParser.RULE_update_stmt_limited);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WITH_) {
                this.state = 1596;
                this.with_clause();
            }
            this.state = 1599;
            this.match(SQLiteParser.UPDATE_);
            this.state = 1602;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
            if (la_ === 1) {
                this.state = 1600;
                this.match(SQLiteParser.OR_);
                this.state = 1601;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 1604;
            this.qualified_table_name();
            this.state = 1605;
            this.match(SQLiteParser.SET_);
            this.state = 1608;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1606;
                    this.column_name();
                    break;
                case 2:
                    this.state = 1607;
                    this.column_name_list();
                    break;
            }
            this.state = 1610;
            this.match(SQLiteParser.ASSIGN);
            this.state = 1611;
            this.expr(0);
            this.state = 1622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1612;
                this.match(SQLiteParser.COMMA);
                this.state = 1615;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 235, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1613;
                        this.column_name();
                        break;
                    case 2:
                        this.state = 1614;
                        this.column_name_list();
                        break;
                }
                this.state = 1617;
                this.match(SQLiteParser.ASSIGN);
                this.state = 1618;
                this.expr(0);
                this.state = 1624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.WHERE_) {
                this.state = 1625;
                this.match(SQLiteParser.WHERE_);
                this.state = 1626;
                this.expr(0);
            }
            this.state = 1630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.RETURNING_) {
                this.state = 1629;
                this.returning_clause();
            }
            this.state = 1636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.LIMIT_ || _la === SQLiteParser.ORDER_) {
                this.state = 1633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.ORDER_) {
                    this.state = 1632;
                    this.order_by_stmt();
                }
                this.state = 1635;
                this.limit_stmt();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualified_table_name() {
        const localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, SQLiteParser.RULE_qualified_table_name);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1641;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
            if (la_ === 1) {
                this.state = 1638;
                this.schema_name();
                this.state = 1639;
                this.match(SQLiteParser.DOT);
            }
            this.state = 1643;
            this.table_name();
            this.state = 1646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.AS_) {
                this.state = 1644;
                this.match(SQLiteParser.AS_);
                this.state = 1645;
                this.alias();
            }
            this.state = 1653;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.INDEXED_:
                    this.state = 1648;
                    this.match(SQLiteParser.INDEXED_);
                    this.state = 1649;
                    this.match(SQLiteParser.BY_);
                    this.state = 1650;
                    this.index_name();
                    break;
                case SQLiteParser.NOT_:
                    this.state = 1651;
                    this.match(SQLiteParser.NOT_);
                    this.state = 1652;
                    this.match(SQLiteParser.INDEXED_);
                    break;
                case SQLiteParser.EOF:
                case SQLiteParser.SCOL:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DROP_:
                case SQLiteParser.END_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.LIMIT_:
                case SQLiteParser.ORDER_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.RETURNING_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.SET_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.WHERE_:
                case SQLiteParser.WITH_:
                    break;
                default:
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    vacuum_stmt() {
        const localctx = new Vacuum_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, SQLiteParser.RULE_vacuum_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1655;
            this.match(SQLiteParser.VACUUM_);
            this.state = 1657;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 244, this._ctx);
            if (la_ === 1) {
                this.state = 1656;
                this.schema_name();
            }
            this.state = 1661;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.INTO_) {
                this.state = 1659;
                this.match(SQLiteParser.INTO_);
                this.state = 1660;
                this.filename();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    filter_clause() {
        const localctx = new Filter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, SQLiteParser.RULE_filter_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1663;
            this.match(SQLiteParser.FILTER_);
            this.state = 1664;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1665;
            this.match(SQLiteParser.WHERE_);
            this.state = 1666;
            this.expr(0);
            this.state = 1667;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    window_defn() {
        const localctx = new Window_defnContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, SQLiteParser.RULE_window_defn);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1669;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1671;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 246, this._ctx);
            if (la_ === 1) {
                this.state = 1670;
                this.base_window_name();
            }
            this.state = 1683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.PARTITION_) {
                this.state = 1673;
                this.match(SQLiteParser.PARTITION_);
                this.state = 1674;
                this.match(SQLiteParser.BY_);
                this.state = 1675;
                this.expr(0);
                this.state = 1680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === SQLiteParser.COMMA) {
                    this.state = 1676;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1677;
                    this.expr(0);
                    this.state = 1682;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1685;
            this.match(SQLiteParser.ORDER_);
            this.state = 1686;
            this.match(SQLiteParser.BY_);
            this.state = 1687;
            this.ordering_term();
            this.state = 1692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1688;
                this.match(SQLiteParser.COMMA);
                this.state = 1689;
                this.ordering_term();
                this.state = 1694;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
                this.state = 1695;
                this.frame_spec();
            }
            this.state = 1698;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    over_clause() {
        const localctx = new Over_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, SQLiteParser.RULE_over_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1700;
            this.match(SQLiteParser.OVER_);
            this.state = 1734;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 257, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1701;
                    this.window_name();
                    break;
                case 2:
                    this.state = 1702;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1704;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 251, this._ctx);
                    if (la_ === 1) {
                        this.state = 1703;
                        this.base_window_name();
                    }
                    this.state = 1716;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1706;
                        this.match(SQLiteParser.PARTITION_);
                        this.state = 1707;
                        this.match(SQLiteParser.BY_);
                        this.state = 1708;
                        this.expr(0);
                        this.state = 1713;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1709;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1710;
                            this.expr(0);
                            this.state = 1715;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 1728;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ORDER_) {
                        this.state = 1718;
                        this.match(SQLiteParser.ORDER_);
                        this.state = 1719;
                        this.match(SQLiteParser.BY_);
                        this.state = 1720;
                        this.ordering_term();
                        this.state = 1725;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === SQLiteParser.COMMA) {
                            this.state = 1721;
                            this.match(SQLiteParser.COMMA);
                            this.state = 1722;
                            this.ordering_term();
                            this.state = 1727;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 1731;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
                        this.state = 1730;
                        this.frame_spec();
                    }
                    this.state = 1733;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    frame_spec() {
        const localctx = new Frame_specContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, SQLiteParser.RULE_frame_spec);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1736;
            this.frame_clause();
            this.state = 1744;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.EXCLUDE_:
                    this.state = 1737;
                    this.match(SQLiteParser.EXCLUDE_);
                    this.state = 1738;
                    this.match(SQLiteParser.NO_);
                    this.state = 1739;
                    this.match(SQLiteParser.OTHERS_);
                    break;
                case SQLiteParser.CURRENT_:
                    this.state = 1740;
                    this.match(SQLiteParser.CURRENT_);
                    this.state = 1741;
                    this.match(SQLiteParser.ROW_);
                    break;
                case SQLiteParser.GROUP_:
                    this.state = 1742;
                    this.match(SQLiteParser.GROUP_);
                    break;
                case SQLiteParser.TIES_:
                    this.state = 1743;
                    this.match(SQLiteParser.TIES_);
                    break;
                case SQLiteParser.CLOSE_PAR:
                    break;
                default:
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    frame_clause() {
        const localctx = new Frame_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, SQLiteParser.RULE_frame_clause);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1746;
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1753;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 259, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1747;
                    this.frame_single();
                    break;
                case 2:
                    this.state = 1748;
                    this.match(SQLiteParser.BETWEEN_);
                    this.state = 1749;
                    this.frame_left();
                    this.state = 1750;
                    this.match(SQLiteParser.AND_);
                    this.state = 1751;
                    this.frame_right();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simple_function_invocation() {
        const localctx = new Simple_function_invocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, SQLiteParser.RULE_simple_function_invocation);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1755;
            this.simple_func();
            this.state = 1756;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1766;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.OPEN_PAR:
                case SQLiteParser.PLUS:
                case SQLiteParser.MINUS:
                case SQLiteParser.TILDE:
                case SQLiteParser.ABORT_:
                case SQLiteParser.ACTION_:
                case SQLiteParser.ADD_:
                case SQLiteParser.AFTER_:
                case SQLiteParser.ALL_:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.AND_:
                case SQLiteParser.AS_:
                case SQLiteParser.ASC_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.AUTOINCREMENT_:
                case SQLiteParser.BEFORE_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.BETWEEN_:
                case SQLiteParser.BY_:
                case SQLiteParser.CASCADE_:
                case SQLiteParser.CASE_:
                case SQLiteParser.CAST_:
                case SQLiteParser.CHECK_:
                case SQLiteParser.COLLATE_:
                case SQLiteParser.COLUMN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CONFLICT_:
                case SQLiteParser.CONSTRAINT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.CROSS_:
                case SQLiteParser.CURRENT_DATE_:
                case SQLiteParser.CURRENT_TIME_:
                case SQLiteParser.CURRENT_TIMESTAMP_:
                case SQLiteParser.DATABASE_:
                case SQLiteParser.DEFAULT_:
                case SQLiteParser.DEFERRABLE_:
                case SQLiteParser.DEFERRED_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DESC_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DISTINCT_:
                case SQLiteParser.DROP_:
                case SQLiteParser.EACH_:
                case SQLiteParser.ELSE_:
                case SQLiteParser.END_:
                case SQLiteParser.ESCAPE_:
                case SQLiteParser.EXCEPT_:
                case SQLiteParser.EXCLUSIVE_:
                case SQLiteParser.EXISTS_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.FAIL_:
                case SQLiteParser.FOR_:
                case SQLiteParser.FOREIGN_:
                case SQLiteParser.FROM_:
                case SQLiteParser.FULL_:
                case SQLiteParser.GLOB_:
                case SQLiteParser.GROUP_:
                case SQLiteParser.HAVING_:
                case SQLiteParser.IF_:
                case SQLiteParser.IGNORE_:
                case SQLiteParser.IMMEDIATE_:
                case SQLiteParser.IN_:
                case SQLiteParser.INDEX_:
                case SQLiteParser.INDEXED_:
                case SQLiteParser.INITIALLY_:
                case SQLiteParser.INNER_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.INSTEAD_:
                case SQLiteParser.INTERSECT_:
                case SQLiteParser.INTO_:
                case SQLiteParser.IS_:
                case SQLiteParser.ISNULL_:
                case SQLiteParser.JOIN_:
                case SQLiteParser.KEY_:
                case SQLiteParser.LEFT_:
                case SQLiteParser.LIKE_:
                case SQLiteParser.LIMIT_:
                case SQLiteParser.MATCH_:
                case SQLiteParser.NATURAL_:
                case SQLiteParser.NO_:
                case SQLiteParser.NOT_:
                case SQLiteParser.NOTNULL_:
                case SQLiteParser.NULL_:
                case SQLiteParser.OF_:
                case SQLiteParser.OFFSET_:
                case SQLiteParser.ON_:
                case SQLiteParser.OR_:
                case SQLiteParser.ORDER_:
                case SQLiteParser.OUTER_:
                case SQLiteParser.PLAN_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.PRIMARY_:
                case SQLiteParser.QUERY_:
                case SQLiteParser.RAISE_:
                case SQLiteParser.RECURSIVE_:
                case SQLiteParser.REFERENCES_:
                case SQLiteParser.REGEXP_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.RENAME_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.RESTRICT_:
                case SQLiteParser.RIGHT_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.ROW_:
                case SQLiteParser.ROWS_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.SET_:
                case SQLiteParser.TABLE_:
                case SQLiteParser.TEMP_:
                case SQLiteParser.TEMPORARY_:
                case SQLiteParser.THEN_:
                case SQLiteParser.TO_:
                case SQLiteParser.TRANSACTION_:
                case SQLiteParser.TRIGGER_:
                case SQLiteParser.UNION_:
                case SQLiteParser.UNIQUE_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.USING_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.VIEW_:
                case SQLiteParser.VIRTUAL_:
                case SQLiteParser.WHEN_:
                case SQLiteParser.WHERE_:
                case SQLiteParser.WITH_:
                case SQLiteParser.WITHOUT_:
                case SQLiteParser.FIRST_VALUE_:
                case SQLiteParser.OVER_:
                case SQLiteParser.PARTITION_:
                case SQLiteParser.RANGE_:
                case SQLiteParser.PRECEDING_:
                case SQLiteParser.UNBOUNDED_:
                case SQLiteParser.CURRENT_:
                case SQLiteParser.FOLLOWING_:
                case SQLiteParser.CUME_DIST_:
                case SQLiteParser.DENSE_RANK_:
                case SQLiteParser.LAG_:
                case SQLiteParser.LAST_VALUE_:
                case SQLiteParser.LEAD_:
                case SQLiteParser.NTH_VALUE_:
                case SQLiteParser.NTILE_:
                case SQLiteParser.PERCENT_RANK_:
                case SQLiteParser.RANK_:
                case SQLiteParser.ROW_NUMBER_:
                case SQLiteParser.GENERATED_:
                case SQLiteParser.ALWAYS_:
                case SQLiteParser.STORED_:
                case SQLiteParser.TRUE_:
                case SQLiteParser.FALSE_:
                case SQLiteParser.WINDOW_:
                case SQLiteParser.NULLS_:
                case SQLiteParser.FIRST_:
                case SQLiteParser.LAST_:
                case SQLiteParser.FILTER_:
                case SQLiteParser.GROUPS_:
                case SQLiteParser.EXCLUDE_:
                case SQLiteParser.IDENTIFIER:
                case SQLiteParser.NUMERIC_LITERAL:
                case SQLiteParser.BIND_PARAMETER:
                case SQLiteParser.STRING_LITERAL:
                case SQLiteParser.BLOB_LITERAL:
                    this.state = 1757;
                    this.expr(0);
                    this.state = 1762;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1758;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1759;
                        this.expr(0);
                        this.state = 1764;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case SQLiteParser.STAR:
                    this.state = 1765;
                    this.match(SQLiteParser.STAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1768;
            this.match(SQLiteParser.CLOSE_PAR);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aggregate_function_invocation() {
        const localctx = new Aggregate_function_invocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, SQLiteParser.RULE_aggregate_function_invocation);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1770;
            this.aggregate_func();
            this.state = 1771;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1784;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.OPEN_PAR:
                case SQLiteParser.PLUS:
                case SQLiteParser.MINUS:
                case SQLiteParser.TILDE:
                case SQLiteParser.ABORT_:
                case SQLiteParser.ACTION_:
                case SQLiteParser.ADD_:
                case SQLiteParser.AFTER_:
                case SQLiteParser.ALL_:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.AND_:
                case SQLiteParser.AS_:
                case SQLiteParser.ASC_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.AUTOINCREMENT_:
                case SQLiteParser.BEFORE_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.BETWEEN_:
                case SQLiteParser.BY_:
                case SQLiteParser.CASCADE_:
                case SQLiteParser.CASE_:
                case SQLiteParser.CAST_:
                case SQLiteParser.CHECK_:
                case SQLiteParser.COLLATE_:
                case SQLiteParser.COLUMN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CONFLICT_:
                case SQLiteParser.CONSTRAINT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.CROSS_:
                case SQLiteParser.CURRENT_DATE_:
                case SQLiteParser.CURRENT_TIME_:
                case SQLiteParser.CURRENT_TIMESTAMP_:
                case SQLiteParser.DATABASE_:
                case SQLiteParser.DEFAULT_:
                case SQLiteParser.DEFERRABLE_:
                case SQLiteParser.DEFERRED_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DESC_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DISTINCT_:
                case SQLiteParser.DROP_:
                case SQLiteParser.EACH_:
                case SQLiteParser.ELSE_:
                case SQLiteParser.END_:
                case SQLiteParser.ESCAPE_:
                case SQLiteParser.EXCEPT_:
                case SQLiteParser.EXCLUSIVE_:
                case SQLiteParser.EXISTS_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.FAIL_:
                case SQLiteParser.FOR_:
                case SQLiteParser.FOREIGN_:
                case SQLiteParser.FROM_:
                case SQLiteParser.FULL_:
                case SQLiteParser.GLOB_:
                case SQLiteParser.GROUP_:
                case SQLiteParser.HAVING_:
                case SQLiteParser.IF_:
                case SQLiteParser.IGNORE_:
                case SQLiteParser.IMMEDIATE_:
                case SQLiteParser.IN_:
                case SQLiteParser.INDEX_:
                case SQLiteParser.INDEXED_:
                case SQLiteParser.INITIALLY_:
                case SQLiteParser.INNER_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.INSTEAD_:
                case SQLiteParser.INTERSECT_:
                case SQLiteParser.INTO_:
                case SQLiteParser.IS_:
                case SQLiteParser.ISNULL_:
                case SQLiteParser.JOIN_:
                case SQLiteParser.KEY_:
                case SQLiteParser.LEFT_:
                case SQLiteParser.LIKE_:
                case SQLiteParser.LIMIT_:
                case SQLiteParser.MATCH_:
                case SQLiteParser.NATURAL_:
                case SQLiteParser.NO_:
                case SQLiteParser.NOT_:
                case SQLiteParser.NOTNULL_:
                case SQLiteParser.NULL_:
                case SQLiteParser.OF_:
                case SQLiteParser.OFFSET_:
                case SQLiteParser.ON_:
                case SQLiteParser.OR_:
                case SQLiteParser.ORDER_:
                case SQLiteParser.OUTER_:
                case SQLiteParser.PLAN_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.PRIMARY_:
                case SQLiteParser.QUERY_:
                case SQLiteParser.RAISE_:
                case SQLiteParser.RECURSIVE_:
                case SQLiteParser.REFERENCES_:
                case SQLiteParser.REGEXP_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.RENAME_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.RESTRICT_:
                case SQLiteParser.RIGHT_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.ROW_:
                case SQLiteParser.ROWS_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.SET_:
                case SQLiteParser.TABLE_:
                case SQLiteParser.TEMP_:
                case SQLiteParser.TEMPORARY_:
                case SQLiteParser.THEN_:
                case SQLiteParser.TO_:
                case SQLiteParser.TRANSACTION_:
                case SQLiteParser.TRIGGER_:
                case SQLiteParser.UNION_:
                case SQLiteParser.UNIQUE_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.USING_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.VIEW_:
                case SQLiteParser.VIRTUAL_:
                case SQLiteParser.WHEN_:
                case SQLiteParser.WHERE_:
                case SQLiteParser.WITH_:
                case SQLiteParser.WITHOUT_:
                case SQLiteParser.FIRST_VALUE_:
                case SQLiteParser.OVER_:
                case SQLiteParser.PARTITION_:
                case SQLiteParser.RANGE_:
                case SQLiteParser.PRECEDING_:
                case SQLiteParser.UNBOUNDED_:
                case SQLiteParser.CURRENT_:
                case SQLiteParser.FOLLOWING_:
                case SQLiteParser.CUME_DIST_:
                case SQLiteParser.DENSE_RANK_:
                case SQLiteParser.LAG_:
                case SQLiteParser.LAST_VALUE_:
                case SQLiteParser.LEAD_:
                case SQLiteParser.NTH_VALUE_:
                case SQLiteParser.NTILE_:
                case SQLiteParser.PERCENT_RANK_:
                case SQLiteParser.RANK_:
                case SQLiteParser.ROW_NUMBER_:
                case SQLiteParser.GENERATED_:
                case SQLiteParser.ALWAYS_:
                case SQLiteParser.STORED_:
                case SQLiteParser.TRUE_:
                case SQLiteParser.FALSE_:
                case SQLiteParser.WINDOW_:
                case SQLiteParser.NULLS_:
                case SQLiteParser.FIRST_:
                case SQLiteParser.LAST_:
                case SQLiteParser.FILTER_:
                case SQLiteParser.GROUPS_:
                case SQLiteParser.EXCLUDE_:
                case SQLiteParser.IDENTIFIER:
                case SQLiteParser.NUMERIC_LITERAL:
                case SQLiteParser.BIND_PARAMETER:
                case SQLiteParser.STRING_LITERAL:
                case SQLiteParser.BLOB_LITERAL:
                    this.state = 1773;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
                    if (la_ === 1) {
                        this.state = 1772;
                        this.match(SQLiteParser.DISTINCT_);
                    }
                    this.state = 1775;
                    this.expr(0);
                    this.state = 1780;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1776;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1777;
                        this.expr(0);
                        this.state = 1782;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case SQLiteParser.STAR:
                    this.state = 1783;
                    this.match(SQLiteParser.STAR);
                    break;
                case SQLiteParser.CLOSE_PAR:
                    break;
                default:
                    break;
            }
            this.state = 1786;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.FILTER_) {
                this.state = 1787;
                this.filter_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    window_function_invocation() {
        const localctx = new Window_function_invocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, SQLiteParser.RULE_window_function_invocation);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1790;
            this.window_function();
            this.state = 1791;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1801;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.OPEN_PAR:
                case SQLiteParser.PLUS:
                case SQLiteParser.MINUS:
                case SQLiteParser.TILDE:
                case SQLiteParser.ABORT_:
                case SQLiteParser.ACTION_:
                case SQLiteParser.ADD_:
                case SQLiteParser.AFTER_:
                case SQLiteParser.ALL_:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.AND_:
                case SQLiteParser.AS_:
                case SQLiteParser.ASC_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.AUTOINCREMENT_:
                case SQLiteParser.BEFORE_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.BETWEEN_:
                case SQLiteParser.BY_:
                case SQLiteParser.CASCADE_:
                case SQLiteParser.CASE_:
                case SQLiteParser.CAST_:
                case SQLiteParser.CHECK_:
                case SQLiteParser.COLLATE_:
                case SQLiteParser.COLUMN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CONFLICT_:
                case SQLiteParser.CONSTRAINT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.CROSS_:
                case SQLiteParser.CURRENT_DATE_:
                case SQLiteParser.CURRENT_TIME_:
                case SQLiteParser.CURRENT_TIMESTAMP_:
                case SQLiteParser.DATABASE_:
                case SQLiteParser.DEFAULT_:
                case SQLiteParser.DEFERRABLE_:
                case SQLiteParser.DEFERRED_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DESC_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DISTINCT_:
                case SQLiteParser.DROP_:
                case SQLiteParser.EACH_:
                case SQLiteParser.ELSE_:
                case SQLiteParser.END_:
                case SQLiteParser.ESCAPE_:
                case SQLiteParser.EXCEPT_:
                case SQLiteParser.EXCLUSIVE_:
                case SQLiteParser.EXISTS_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.FAIL_:
                case SQLiteParser.FOR_:
                case SQLiteParser.FOREIGN_:
                case SQLiteParser.FROM_:
                case SQLiteParser.FULL_:
                case SQLiteParser.GLOB_:
                case SQLiteParser.GROUP_:
                case SQLiteParser.HAVING_:
                case SQLiteParser.IF_:
                case SQLiteParser.IGNORE_:
                case SQLiteParser.IMMEDIATE_:
                case SQLiteParser.IN_:
                case SQLiteParser.INDEX_:
                case SQLiteParser.INDEXED_:
                case SQLiteParser.INITIALLY_:
                case SQLiteParser.INNER_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.INSTEAD_:
                case SQLiteParser.INTERSECT_:
                case SQLiteParser.INTO_:
                case SQLiteParser.IS_:
                case SQLiteParser.ISNULL_:
                case SQLiteParser.JOIN_:
                case SQLiteParser.KEY_:
                case SQLiteParser.LEFT_:
                case SQLiteParser.LIKE_:
                case SQLiteParser.LIMIT_:
                case SQLiteParser.MATCH_:
                case SQLiteParser.NATURAL_:
                case SQLiteParser.NO_:
                case SQLiteParser.NOT_:
                case SQLiteParser.NOTNULL_:
                case SQLiteParser.NULL_:
                case SQLiteParser.OF_:
                case SQLiteParser.OFFSET_:
                case SQLiteParser.ON_:
                case SQLiteParser.OR_:
                case SQLiteParser.ORDER_:
                case SQLiteParser.OUTER_:
                case SQLiteParser.PLAN_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.PRIMARY_:
                case SQLiteParser.QUERY_:
                case SQLiteParser.RAISE_:
                case SQLiteParser.RECURSIVE_:
                case SQLiteParser.REFERENCES_:
                case SQLiteParser.REGEXP_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.RENAME_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.RESTRICT_:
                case SQLiteParser.RIGHT_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.ROW_:
                case SQLiteParser.ROWS_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.SET_:
                case SQLiteParser.TABLE_:
                case SQLiteParser.TEMP_:
                case SQLiteParser.TEMPORARY_:
                case SQLiteParser.THEN_:
                case SQLiteParser.TO_:
                case SQLiteParser.TRANSACTION_:
                case SQLiteParser.TRIGGER_:
                case SQLiteParser.UNION_:
                case SQLiteParser.UNIQUE_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.USING_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.VIEW_:
                case SQLiteParser.VIRTUAL_:
                case SQLiteParser.WHEN_:
                case SQLiteParser.WHERE_:
                case SQLiteParser.WITH_:
                case SQLiteParser.WITHOUT_:
                case SQLiteParser.FIRST_VALUE_:
                case SQLiteParser.OVER_:
                case SQLiteParser.PARTITION_:
                case SQLiteParser.RANGE_:
                case SQLiteParser.PRECEDING_:
                case SQLiteParser.UNBOUNDED_:
                case SQLiteParser.CURRENT_:
                case SQLiteParser.FOLLOWING_:
                case SQLiteParser.CUME_DIST_:
                case SQLiteParser.DENSE_RANK_:
                case SQLiteParser.LAG_:
                case SQLiteParser.LAST_VALUE_:
                case SQLiteParser.LEAD_:
                case SQLiteParser.NTH_VALUE_:
                case SQLiteParser.NTILE_:
                case SQLiteParser.PERCENT_RANK_:
                case SQLiteParser.RANK_:
                case SQLiteParser.ROW_NUMBER_:
                case SQLiteParser.GENERATED_:
                case SQLiteParser.ALWAYS_:
                case SQLiteParser.STORED_:
                case SQLiteParser.TRUE_:
                case SQLiteParser.FALSE_:
                case SQLiteParser.WINDOW_:
                case SQLiteParser.NULLS_:
                case SQLiteParser.FIRST_:
                case SQLiteParser.LAST_:
                case SQLiteParser.FILTER_:
                case SQLiteParser.GROUPS_:
                case SQLiteParser.EXCLUDE_:
                case SQLiteParser.IDENTIFIER:
                case SQLiteParser.NUMERIC_LITERAL:
                case SQLiteParser.BIND_PARAMETER:
                case SQLiteParser.STRING_LITERAL:
                case SQLiteParser.BLOB_LITERAL:
                    this.state = 1792;
                    this.expr(0);
                    this.state = 1797;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === SQLiteParser.COMMA) {
                        this.state = 1793;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1794;
                        this.expr(0);
                        this.state = 1799;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case SQLiteParser.STAR:
                    this.state = 1800;
                    this.match(SQLiteParser.STAR);
                    break;
                case SQLiteParser.CLOSE_PAR:
                    break;
                default:
                    break;
            }
            this.state = 1803;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.FILTER_) {
                this.state = 1804;
                this.filter_clause();
            }
            this.state = 1807;
            this.match(SQLiteParser.OVER_);
            this.state = 1810;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1808;
                    this.window_defn();
                    break;
                case 2:
                    this.state = 1809;
                    this.window_name();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    common_table_stmt() {
        const localctx = new Common_table_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, SQLiteParser.RULE_common_table_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1812;
            this.match(SQLiteParser.WITH_);
            this.state = 1814;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 270, this._ctx);
            if (la_ === 1) {
                this.state = 1813;
                this.match(SQLiteParser.RECURSIVE_);
            }
            this.state = 1816;
            this.common_table_expression();
            this.state = 1821;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1817;
                this.match(SQLiteParser.COMMA);
                this.state = 1818;
                this.common_table_expression();
                this.state = 1823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    order_by_stmt() {
        const localctx = new Order_by_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, SQLiteParser.RULE_order_by_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1824;
            this.match(SQLiteParser.ORDER_);
            this.state = 1825;
            this.match(SQLiteParser.BY_);
            this.state = 1826;
            this.ordering_term();
            this.state = 1831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 1827;
                this.match(SQLiteParser.COMMA);
                this.state = 1828;
                this.ordering_term();
                this.state = 1833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    limit_stmt() {
        const localctx = new Limit_stmtContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, SQLiteParser.RULE_limit_stmt);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1834;
            this.match(SQLiteParser.LIMIT_);
            this.state = 1835;
            this.expr(0);
            this.state = 1838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.COMMA || _la === SQLiteParser.OFFSET_) {
                this.state = 1836;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.COMMA || _la === SQLiteParser.OFFSET_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1837;
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ordering_term() {
        const localctx = new Ordering_termContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, SQLiteParser.RULE_ordering_term);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1840;
            this.expr(0);
            this.state = 1843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.COLLATE_) {
                this.state = 1841;
                this.match(SQLiteParser.COLLATE_);
                this.state = 1842;
                this.collation_name();
            }
            this.state = 1846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
                this.state = 1845;
                this.asc_desc();
            }
            this.state = 1850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.NULLS_) {
                this.state = 1848;
                this.match(SQLiteParser.NULLS_);
                this.state = 1849;
                _la = this._input.LA(1);
                if (!(_la === SQLiteParser.FIRST_ || _la === SQLiteParser.LAST_)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    asc_desc() {
        const localctx = new Asc_descContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, SQLiteParser.RULE_asc_desc);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1852;
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    frame_left() {
        const localctx = new Frame_leftContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, SQLiteParser.RULE_frame_left);
        try {
            this.state = 1864;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 277, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1854;
                    this.expr(0);
                    this.state = 1855;
                    this.match(SQLiteParser.PRECEDING_);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1857;
                    this.expr(0);
                    this.state = 1858;
                    this.match(SQLiteParser.FOLLOWING_);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1860;
                    this.match(SQLiteParser.CURRENT_);
                    this.state = 1861;
                    this.match(SQLiteParser.ROW_);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1862;
                    this.match(SQLiteParser.UNBOUNDED_);
                    this.state = 1863;
                    this.match(SQLiteParser.PRECEDING_);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    frame_right() {
        const localctx = new Frame_rightContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, SQLiteParser.RULE_frame_right);
        try {
            this.state = 1876;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 278, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1866;
                    this.expr(0);
                    this.state = 1867;
                    this.match(SQLiteParser.PRECEDING_);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1869;
                    this.expr(0);
                    this.state = 1870;
                    this.match(SQLiteParser.FOLLOWING_);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1872;
                    this.match(SQLiteParser.CURRENT_);
                    this.state = 1873;
                    this.match(SQLiteParser.ROW_);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1874;
                    this.match(SQLiteParser.UNBOUNDED_);
                    this.state = 1875;
                    this.match(SQLiteParser.FOLLOWING_);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    frame_single() {
        const localctx = new Frame_singleContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, SQLiteParser.RULE_frame_single);
        try {
            this.state = 1885;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 279, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1878;
                    this.expr(0);
                    this.state = 1879;
                    this.match(SQLiteParser.PRECEDING_);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1881;
                    this.match(SQLiteParser.UNBOUNDED_);
                    this.state = 1882;
                    this.match(SQLiteParser.PRECEDING_);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1883;
                    this.match(SQLiteParser.CURRENT_);
                    this.state = 1884;
                    this.match(SQLiteParser.ROW_);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    window_function() {
        const localctx = new Window_functionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, SQLiteParser.RULE_window_function);
        let _la = 0; // Token type
        try {
            this.state = 1972;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.FIRST_VALUE_:
                case SQLiteParser.LAST_VALUE_:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1887;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.FIRST_VALUE_ || _la === SQLiteParser.LAST_VALUE_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1888;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1889;
                    this.expr(0);
                    this.state = 1890;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1891;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1892;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1894;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1893;
                        this.partition_by();
                    }
                    this.state = 1896;
                    this.order_by_expr_asc_desc();
                    this.state = 1898;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
                        this.state = 1897;
                        this.frame_clause();
                    }
                    this.state = 1900;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.CUME_DIST_:
                case SQLiteParser.PERCENT_RANK_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1902;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.CUME_DIST_ || _la === SQLiteParser.PERCENT_RANK_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1903;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1904;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1905;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1906;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1908;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1907;
                        this.partition_by();
                    }
                    this.state = 1911;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ORDER_) {
                        this.state = 1910;
                        this.order_by_expr();
                    }
                    this.state = 1913;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.DENSE_RANK_:
                case SQLiteParser.RANK_:
                case SQLiteParser.ROW_NUMBER_:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1914;
                    _la = this._input.LA(1);
                    if (!(((_la - 160) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SQLiteParser.DENSE_RANK_ - 160)) | (1 << (SQLiteParser.RANK_ - 160)) | (1 << (SQLiteParser.ROW_NUMBER_ - 160)))) !== 0)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1915;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1916;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1917;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1918;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1920;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1919;
                        this.partition_by();
                    }
                    this.state = 1922;
                    this.order_by_expr_asc_desc();
                    this.state = 1923;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.LAG_:
                case SQLiteParser.LEAD_:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1925;
                    _la = this._input.LA(1);
                    if (!(_la === SQLiteParser.LAG_ || _la === SQLiteParser.LEAD_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1926;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1927;
                    this.expr(0);
                    this.state = 1929;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 285, this._ctx);
                    if (la_ === 1) {
                        this.state = 1928;
                        this.offset();
                    }
                    this.state = 1932;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.COMMA) {
                        this.state = 1931;
                        this.default_value();
                    }
                    this.state = 1934;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1935;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1936;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1938;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1937;
                        this.partition_by();
                    }
                    this.state = 1940;
                    this.order_by_expr_asc_desc();
                    this.state = 1941;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.NTH_VALUE_:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1943;
                    this.match(SQLiteParser.NTH_VALUE_);
                    this.state = 1944;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1945;
                    this.expr(0);
                    this.state = 1946;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1947;
                    this.signed_number();
                    this.state = 1948;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1949;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1950;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1952;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1951;
                        this.partition_by();
                    }
                    this.state = 1954;
                    this.order_by_expr_asc_desc();
                    this.state = 1956;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
                        this.state = 1955;
                        this.frame_clause();
                    }
                    this.state = 1958;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                case SQLiteParser.NTILE_:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1960;
                    this.match(SQLiteParser.NTILE_);
                    this.state = 1961;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1962;
                    this.expr(0);
                    this.state = 1963;
                    this.match(SQLiteParser.CLOSE_PAR);
                    this.state = 1964;
                    this.match(SQLiteParser.OVER_);
                    this.state = 1965;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 1967;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === SQLiteParser.PARTITION_) {
                        this.state = 1966;
                        this.partition_by();
                    }
                    this.state = 1969;
                    this.order_by_expr_asc_desc();
                    this.state = 1970;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    offset() {
        const localctx = new OffsetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, SQLiteParser.RULE_offset);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1974;
            this.match(SQLiteParser.COMMA);
            this.state = 1975;
            this.signed_number();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    default_value() {
        const localctx = new Default_valueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, SQLiteParser.RULE_default_value);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1977;
            this.match(SQLiteParser.COMMA);
            this.state = 1978;
            this.signed_number();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    partition_by() {
        const localctx = new Partition_byContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, SQLiteParser.RULE_partition_by);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1980;
            this.match(SQLiteParser.PARTITION_);
            this.state = 1981;
            this.match(SQLiteParser.BY_);
            this.state = 1983;
            this._errHandler.sync(this);
            let _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1982;
                        this.expr(0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1985;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
            } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    order_by_expr() {
        const localctx = new Order_by_exprContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, SQLiteParser.RULE_order_by_expr);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1987;
            this.match(SQLiteParser.ORDER_);
            this.state = 1988;
            this.match(SQLiteParser.BY_);
            this.state = 1990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1989;
                this.expr(0);
                this.state = 1992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((_la & ~0x1f) == 0 &&
                ((1 << _la) &
                    ((1 << SQLiteParser.OPEN_PAR) |
                        (1 << SQLiteParser.PLUS) |
                        (1 << SQLiteParser.MINUS) |
                        (1 << SQLiteParser.TILDE) |
                        (1 << SQLiteParser.ABORT_) |
                        (1 << SQLiteParser.ACTION_) |
                        (1 << SQLiteParser.ADD_) |
                        (1 << SQLiteParser.AFTER_) |
                        (1 << SQLiteParser.ALL_) |
                        (1 << SQLiteParser.ALTER_) |
                        (1 << SQLiteParser.ANALYZE_))) !==
                    0) ||
                (((_la - 32) & ~0x1f) == 0 &&
                    ((1 << (_la - 32)) &
                        ((1 << (SQLiteParser.AND_ - 32)) |
                            (1 << (SQLiteParser.AS_ - 32)) |
                            (1 << (SQLiteParser.ASC_ - 32)) |
                            (1 << (SQLiteParser.ATTACH_ - 32)) |
                            (1 << (SQLiteParser.AUTOINCREMENT_ - 32)) |
                            (1 << (SQLiteParser.BEFORE_ - 32)) |
                            (1 << (SQLiteParser.BEGIN_ - 32)) |
                            (1 << (SQLiteParser.BETWEEN_ - 32)) |
                            (1 << (SQLiteParser.BY_ - 32)) |
                            (1 << (SQLiteParser.CASCADE_ - 32)) |
                            (1 << (SQLiteParser.CASE_ - 32)) |
                            (1 << (SQLiteParser.CAST_ - 32)) |
                            (1 << (SQLiteParser.CHECK_ - 32)) |
                            (1 << (SQLiteParser.COLLATE_ - 32)) |
                            (1 << (SQLiteParser.COLUMN_ - 32)) |
                            (1 << (SQLiteParser.COMMIT_ - 32)) |
                            (1 << (SQLiteParser.CONFLICT_ - 32)) |
                            (1 << (SQLiteParser.CONSTRAINT_ - 32)) |
                            (1 << (SQLiteParser.CREATE_ - 32)) |
                            (1 << (SQLiteParser.CROSS_ - 32)) |
                            (1 << (SQLiteParser.CURRENT_DATE_ - 32)) |
                            (1 << (SQLiteParser.CURRENT_TIME_ - 32)) |
                            (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) |
                            (1 << (SQLiteParser.DATABASE_ - 32)) |
                            (1 << (SQLiteParser.DEFAULT_ - 32)) |
                            (1 << (SQLiteParser.DEFERRABLE_ - 32)) |
                            (1 << (SQLiteParser.DEFERRED_ - 32)) |
                            (1 << (SQLiteParser.DELETE_ - 32)) |
                            (1 << (SQLiteParser.DESC_ - 32)) |
                            (1 << (SQLiteParser.DETACH_ - 32)) |
                            (1 << (SQLiteParser.DISTINCT_ - 32)) |
                            (1 << (SQLiteParser.DROP_ - 32)))) !==
                        0) ||
                (((_la - 64) & ~0x1f) == 0 &&
                    ((1 << (_la - 64)) &
                        ((1 << (SQLiteParser.EACH_ - 64)) |
                            (1 << (SQLiteParser.ELSE_ - 64)) |
                            (1 << (SQLiteParser.END_ - 64)) |
                            (1 << (SQLiteParser.ESCAPE_ - 64)) |
                            (1 << (SQLiteParser.EXCEPT_ - 64)) |
                            (1 << (SQLiteParser.EXCLUSIVE_ - 64)) |
                            (1 << (SQLiteParser.EXISTS_ - 64)) |
                            (1 << (SQLiteParser.EXPLAIN_ - 64)) |
                            (1 << (SQLiteParser.FAIL_ - 64)) |
                            (1 << (SQLiteParser.FOR_ - 64)) |
                            (1 << (SQLiteParser.FOREIGN_ - 64)) |
                            (1 << (SQLiteParser.FROM_ - 64)) |
                            (1 << (SQLiteParser.FULL_ - 64)) |
                            (1 << (SQLiteParser.GLOB_ - 64)) |
                            (1 << (SQLiteParser.GROUP_ - 64)) |
                            (1 << (SQLiteParser.HAVING_ - 64)) |
                            (1 << (SQLiteParser.IF_ - 64)) |
                            (1 << (SQLiteParser.IGNORE_ - 64)) |
                            (1 << (SQLiteParser.IMMEDIATE_ - 64)) |
                            (1 << (SQLiteParser.IN_ - 64)) |
                            (1 << (SQLiteParser.INDEX_ - 64)) |
                            (1 << (SQLiteParser.INDEXED_ - 64)) |
                            (1 << (SQLiteParser.INITIALLY_ - 64)) |
                            (1 << (SQLiteParser.INNER_ - 64)) |
                            (1 << (SQLiteParser.INSERT_ - 64)) |
                            (1 << (SQLiteParser.INSTEAD_ - 64)) |
                            (1 << (SQLiteParser.INTERSECT_ - 64)) |
                            (1 << (SQLiteParser.INTO_ - 64)) |
                            (1 << (SQLiteParser.IS_ - 64)) |
                            (1 << (SQLiteParser.ISNULL_ - 64)) |
                            (1 << (SQLiteParser.JOIN_ - 64)) |
                            (1 << (SQLiteParser.KEY_ - 64)))) !==
                        0) ||
                (((_la - 96) & ~0x1f) == 0 &&
                    ((1 << (_la - 96)) &
                        ((1 << (SQLiteParser.LEFT_ - 96)) |
                            (1 << (SQLiteParser.LIKE_ - 96)) |
                            (1 << (SQLiteParser.LIMIT_ - 96)) |
                            (1 << (SQLiteParser.MATCH_ - 96)) |
                            (1 << (SQLiteParser.NATURAL_ - 96)) |
                            (1 << (SQLiteParser.NO_ - 96)) |
                            (1 << (SQLiteParser.NOT_ - 96)) |
                            (1 << (SQLiteParser.NOTNULL_ - 96)) |
                            (1 << (SQLiteParser.NULL_ - 96)) |
                            (1 << (SQLiteParser.OF_ - 96)) |
                            (1 << (SQLiteParser.OFFSET_ - 96)) |
                            (1 << (SQLiteParser.ON_ - 96)) |
                            (1 << (SQLiteParser.OR_ - 96)) |
                            (1 << (SQLiteParser.ORDER_ - 96)) |
                            (1 << (SQLiteParser.OUTER_ - 96)) |
                            (1 << (SQLiteParser.PLAN_ - 96)) |
                            (1 << (SQLiteParser.PRAGMA_ - 96)) |
                            (1 << (SQLiteParser.PRIMARY_ - 96)) |
                            (1 << (SQLiteParser.QUERY_ - 96)) |
                            (1 << (SQLiteParser.RAISE_ - 96)) |
                            (1 << (SQLiteParser.RECURSIVE_ - 96)) |
                            (1 << (SQLiteParser.REFERENCES_ - 96)) |
                            (1 << (SQLiteParser.REGEXP_ - 96)) |
                            (1 << (SQLiteParser.REINDEX_ - 96)) |
                            (1 << (SQLiteParser.RELEASE_ - 96)) |
                            (1 << (SQLiteParser.RENAME_ - 96)) |
                            (1 << (SQLiteParser.REPLACE_ - 96)) |
                            (1 << (SQLiteParser.RESTRICT_ - 96)) |
                            (1 << (SQLiteParser.RIGHT_ - 96)) |
                            (1 << (SQLiteParser.ROLLBACK_ - 96)) |
                            (1 << (SQLiteParser.ROW_ - 96)))) !==
                        0) ||
                (((_la - 128) & ~0x1f) == 0 &&
                    ((1 << (_la - 128)) &
                        ((1 << (SQLiteParser.ROWS_ - 128)) |
                            (1 << (SQLiteParser.SAVEPOINT_ - 128)) |
                            (1 << (SQLiteParser.SELECT_ - 128)) |
                            (1 << (SQLiteParser.SET_ - 128)) |
                            (1 << (SQLiteParser.TABLE_ - 128)) |
                            (1 << (SQLiteParser.TEMP_ - 128)) |
                            (1 << (SQLiteParser.TEMPORARY_ - 128)) |
                            (1 << (SQLiteParser.THEN_ - 128)) |
                            (1 << (SQLiteParser.TO_ - 128)) |
                            (1 << (SQLiteParser.TRANSACTION_ - 128)) |
                            (1 << (SQLiteParser.TRIGGER_ - 128)) |
                            (1 << (SQLiteParser.UNION_ - 128)) |
                            (1 << (SQLiteParser.UNIQUE_ - 128)) |
                            (1 << (SQLiteParser.UPDATE_ - 128)) |
                            (1 << (SQLiteParser.USING_ - 128)) |
                            (1 << (SQLiteParser.VACUUM_ - 128)) |
                            (1 << (SQLiteParser.VALUES_ - 128)) |
                            (1 << (SQLiteParser.VIEW_ - 128)) |
                            (1 << (SQLiteParser.VIRTUAL_ - 128)) |
                            (1 << (SQLiteParser.WHEN_ - 128)) |
                            (1 << (SQLiteParser.WHERE_ - 128)) |
                            (1 << (SQLiteParser.WITH_ - 128)) |
                            (1 << (SQLiteParser.WITHOUT_ - 128)) |
                            (1 << (SQLiteParser.FIRST_VALUE_ - 128)) |
                            (1 << (SQLiteParser.OVER_ - 128)) |
                            (1 << (SQLiteParser.PARTITION_ - 128)) |
                            (1 << (SQLiteParser.RANGE_ - 128)) |
                            (1 << (SQLiteParser.PRECEDING_ - 128)) |
                            (1 << (SQLiteParser.UNBOUNDED_ - 128)) |
                            (1 << (SQLiteParser.CURRENT_ - 128)) |
                            (1 << (SQLiteParser.FOLLOWING_ - 128)) |
                            (1 << (SQLiteParser.CUME_DIST_ - 128)))) !==
                        0) ||
                (((_la - 160) & ~0x1f) == 0 &&
                    ((1 << (_la - 160)) &
                        ((1 << (SQLiteParser.DENSE_RANK_ - 160)) |
                            (1 << (SQLiteParser.LAG_ - 160)) |
                            (1 << (SQLiteParser.LAST_VALUE_ - 160)) |
                            (1 << (SQLiteParser.LEAD_ - 160)) |
                            (1 << (SQLiteParser.NTH_VALUE_ - 160)) |
                            (1 << (SQLiteParser.NTILE_ - 160)) |
                            (1 << (SQLiteParser.PERCENT_RANK_ - 160)) |
                            (1 << (SQLiteParser.RANK_ - 160)) |
                            (1 << (SQLiteParser.ROW_NUMBER_ - 160)) |
                            (1 << (SQLiteParser.GENERATED_ - 160)) |
                            (1 << (SQLiteParser.ALWAYS_ - 160)) |
                            (1 << (SQLiteParser.STORED_ - 160)) |
                            (1 << (SQLiteParser.TRUE_ - 160)) |
                            (1 << (SQLiteParser.FALSE_ - 160)) |
                            (1 << (SQLiteParser.WINDOW_ - 160)) |
                            (1 << (SQLiteParser.NULLS_ - 160)) |
                            (1 << (SQLiteParser.FIRST_ - 160)) |
                            (1 << (SQLiteParser.LAST_ - 160)) |
                            (1 << (SQLiteParser.FILTER_ - 160)) |
                            (1 << (SQLiteParser.GROUPS_ - 160)) |
                            (1 << (SQLiteParser.EXCLUDE_ - 160)) |
                            (1 << (SQLiteParser.IDENTIFIER - 160)) |
                            (1 << (SQLiteParser.NUMERIC_LITERAL - 160)) |
                            (1 << (SQLiteParser.BIND_PARAMETER - 160)) |
                            (1 << (SQLiteParser.STRING_LITERAL - 160)) |
                            (1 << (SQLiteParser.BLOB_LITERAL - 160)))) !==
                        0));
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    order_by_expr_asc_desc() {
        const localctx = new Order_by_expr_asc_descContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, SQLiteParser.RULE_order_by_expr_asc_desc);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1994;
            this.match(SQLiteParser.ORDER_);
            this.state = 1995;
            this.match(SQLiteParser.BY_);
            this.state = 1996;
            this.expr_asc_desc();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expr_asc_desc() {
        const localctx = new Expr_asc_descContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, SQLiteParser.RULE_expr_asc_desc);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1998;
            this.expr(0);
            this.state = 2000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
                this.state = 1999;
                this.asc_desc();
            }
            this.state = 2009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === SQLiteParser.COMMA) {
                this.state = 2002;
                this.match(SQLiteParser.COMMA);
                this.state = 2003;
                this.expr(0);
                this.state = 2005;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
                    this.state = 2004;
                    this.asc_desc();
                }
                this.state = 2011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initial_select() {
        const localctx = new Initial_selectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, SQLiteParser.RULE_initial_select);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2012;
            this.select_stmt();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    recursive_select() {
        const localctx = new Recursive_selectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, SQLiteParser.RULE_recursive_select);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2014;
            this.select_stmt();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unary_operator() {
        const localctx = new Unary_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, SQLiteParser.RULE_unary_operator);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2016;
            _la = this._input.LA(1);
            if (!(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) !== 0) || _la === SQLiteParser.NOT_)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    error_message() {
        const localctx = new Error_messageContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, SQLiteParser.RULE_error_message);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2018;
            this.match(SQLiteParser.STRING_LITERAL);
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    module_argument() {
        const localctx = new Module_argumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, SQLiteParser.RULE_module_argument);
        try {
            this.state = 2022;
            this._errHandler.sync(this);
            const la_ = this._interp.adaptivePredict(this._input, 297, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2020;
                    this.expr(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2021;
                    this.column_def();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    column_alias() {
        const localctx = new Column_aliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, SQLiteParser.RULE_column_alias);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2024;
            _la = this._input.LA(1);
            if (!(_la === SQLiteParser.IDENTIFIER || _la === SQLiteParser.STRING_LITERAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    keyword() {
        const localctx = new KeywordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, SQLiteParser.RULE_keyword);
        let _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2026;
            _la = this._input.LA(1);
            if (!((((_la - 25) & ~0x1f) == 0 &&
                ((1 << (_la - 25)) &
                    ((1 << (SQLiteParser.ABORT_ - 25)) |
                        (1 << (SQLiteParser.ACTION_ - 25)) |
                        (1 << (SQLiteParser.ADD_ - 25)) |
                        (1 << (SQLiteParser.AFTER_ - 25)) |
                        (1 << (SQLiteParser.ALL_ - 25)) |
                        (1 << (SQLiteParser.ALTER_ - 25)) |
                        (1 << (SQLiteParser.ANALYZE_ - 25)) |
                        (1 << (SQLiteParser.AND_ - 25)) |
                        (1 << (SQLiteParser.AS_ - 25)) |
                        (1 << (SQLiteParser.ASC_ - 25)) |
                        (1 << (SQLiteParser.ATTACH_ - 25)) |
                        (1 << (SQLiteParser.AUTOINCREMENT_ - 25)) |
                        (1 << (SQLiteParser.BEFORE_ - 25)) |
                        (1 << (SQLiteParser.BEGIN_ - 25)) |
                        (1 << (SQLiteParser.BETWEEN_ - 25)) |
                        (1 << (SQLiteParser.BY_ - 25)) |
                        (1 << (SQLiteParser.CASCADE_ - 25)) |
                        (1 << (SQLiteParser.CASE_ - 25)) |
                        (1 << (SQLiteParser.CAST_ - 25)) |
                        (1 << (SQLiteParser.CHECK_ - 25)) |
                        (1 << (SQLiteParser.COLLATE_ - 25)) |
                        (1 << (SQLiteParser.COLUMN_ - 25)) |
                        (1 << (SQLiteParser.COMMIT_ - 25)) |
                        (1 << (SQLiteParser.CONFLICT_ - 25)) |
                        (1 << (SQLiteParser.CONSTRAINT_ - 25)) |
                        (1 << (SQLiteParser.CREATE_ - 25)) |
                        (1 << (SQLiteParser.CROSS_ - 25)) |
                        (1 << (SQLiteParser.CURRENT_DATE_ - 25)) |
                        (1 << (SQLiteParser.CURRENT_TIME_ - 25)) |
                        (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 25)) |
                        (1 << (SQLiteParser.DATABASE_ - 25)) |
                        (1 << (SQLiteParser.DEFAULT_ - 25)))) !==
                    0) ||
                (((_la - 57) & ~0x1f) == 0 &&
                    ((1 << (_la - 57)) &
                        ((1 << (SQLiteParser.DEFERRABLE_ - 57)) |
                            (1 << (SQLiteParser.DEFERRED_ - 57)) |
                            (1 << (SQLiteParser.DELETE_ - 57)) |
                            (1 << (SQLiteParser.DESC_ - 57)) |
                            (1 << (SQLiteParser.DETACH_ - 57)) |
                            (1 << (SQLiteParser.DISTINCT_ - 57)) |
                            (1 << (SQLiteParser.DROP_ - 57)) |
                            (1 << (SQLiteParser.EACH_ - 57)) |
                            (1 << (SQLiteParser.ELSE_ - 57)) |
                            (1 << (SQLiteParser.END_ - 57)) |
                            (1 << (SQLiteParser.ESCAPE_ - 57)) |
                            (1 << (SQLiteParser.EXCEPT_ - 57)) |
                            (1 << (SQLiteParser.EXCLUSIVE_ - 57)) |
                            (1 << (SQLiteParser.EXISTS_ - 57)) |
                            (1 << (SQLiteParser.EXPLAIN_ - 57)) |
                            (1 << (SQLiteParser.FAIL_ - 57)) |
                            (1 << (SQLiteParser.FOR_ - 57)) |
                            (1 << (SQLiteParser.FOREIGN_ - 57)) |
                            (1 << (SQLiteParser.FROM_ - 57)) |
                            (1 << (SQLiteParser.FULL_ - 57)) |
                            (1 << (SQLiteParser.GLOB_ - 57)) |
                            (1 << (SQLiteParser.GROUP_ - 57)) |
                            (1 << (SQLiteParser.HAVING_ - 57)) |
                            (1 << (SQLiteParser.IF_ - 57)) |
                            (1 << (SQLiteParser.IGNORE_ - 57)) |
                            (1 << (SQLiteParser.IMMEDIATE_ - 57)) |
                            (1 << (SQLiteParser.IN_ - 57)) |
                            (1 << (SQLiteParser.INDEX_ - 57)) |
                            (1 << (SQLiteParser.INDEXED_ - 57)) |
                            (1 << (SQLiteParser.INITIALLY_ - 57)) |
                            (1 << (SQLiteParser.INNER_ - 57)) |
                            (1 << (SQLiteParser.INSERT_ - 57)))) !==
                        0) ||
                (((_la - 89) & ~0x1f) == 0 &&
                    ((1 << (_la - 89)) &
                        ((1 << (SQLiteParser.INSTEAD_ - 89)) |
                            (1 << (SQLiteParser.INTERSECT_ - 89)) |
                            (1 << (SQLiteParser.INTO_ - 89)) |
                            (1 << (SQLiteParser.IS_ - 89)) |
                            (1 << (SQLiteParser.ISNULL_ - 89)) |
                            (1 << (SQLiteParser.JOIN_ - 89)) |
                            (1 << (SQLiteParser.KEY_ - 89)) |
                            (1 << (SQLiteParser.LEFT_ - 89)) |
                            (1 << (SQLiteParser.LIKE_ - 89)) |
                            (1 << (SQLiteParser.LIMIT_ - 89)) |
                            (1 << (SQLiteParser.MATCH_ - 89)) |
                            (1 << (SQLiteParser.NATURAL_ - 89)) |
                            (1 << (SQLiteParser.NO_ - 89)) |
                            (1 << (SQLiteParser.NOT_ - 89)) |
                            (1 << (SQLiteParser.NOTNULL_ - 89)) |
                            (1 << (SQLiteParser.NULL_ - 89)) |
                            (1 << (SQLiteParser.OF_ - 89)) |
                            (1 << (SQLiteParser.OFFSET_ - 89)) |
                            (1 << (SQLiteParser.ON_ - 89)) |
                            (1 << (SQLiteParser.OR_ - 89)) |
                            (1 << (SQLiteParser.ORDER_ - 89)) |
                            (1 << (SQLiteParser.OUTER_ - 89)) |
                            (1 << (SQLiteParser.PLAN_ - 89)) |
                            (1 << (SQLiteParser.PRAGMA_ - 89)) |
                            (1 << (SQLiteParser.PRIMARY_ - 89)) |
                            (1 << (SQLiteParser.QUERY_ - 89)) |
                            (1 << (SQLiteParser.RAISE_ - 89)) |
                            (1 << (SQLiteParser.RECURSIVE_ - 89)) |
                            (1 << (SQLiteParser.REFERENCES_ - 89)) |
                            (1 << (SQLiteParser.REGEXP_ - 89)) |
                            (1 << (SQLiteParser.REINDEX_ - 89)) |
                            (1 << (SQLiteParser.RELEASE_ - 89)))) !==
                        0) ||
                (((_la - 121) & ~0x1f) == 0 &&
                    ((1 << (_la - 121)) &
                        ((1 << (SQLiteParser.RENAME_ - 121)) |
                            (1 << (SQLiteParser.REPLACE_ - 121)) |
                            (1 << (SQLiteParser.RESTRICT_ - 121)) |
                            (1 << (SQLiteParser.RIGHT_ - 121)) |
                            (1 << (SQLiteParser.ROLLBACK_ - 121)) |
                            (1 << (SQLiteParser.ROW_ - 121)) |
                            (1 << (SQLiteParser.ROWS_ - 121)) |
                            (1 << (SQLiteParser.SAVEPOINT_ - 121)) |
                            (1 << (SQLiteParser.SELECT_ - 121)) |
                            (1 << (SQLiteParser.SET_ - 121)) |
                            (1 << (SQLiteParser.TABLE_ - 121)) |
                            (1 << (SQLiteParser.TEMP_ - 121)) |
                            (1 << (SQLiteParser.TEMPORARY_ - 121)) |
                            (1 << (SQLiteParser.THEN_ - 121)) |
                            (1 << (SQLiteParser.TO_ - 121)) |
                            (1 << (SQLiteParser.TRANSACTION_ - 121)) |
                            (1 << (SQLiteParser.TRIGGER_ - 121)) |
                            (1 << (SQLiteParser.UNION_ - 121)) |
                            (1 << (SQLiteParser.UNIQUE_ - 121)) |
                            (1 << (SQLiteParser.UPDATE_ - 121)) |
                            (1 << (SQLiteParser.USING_ - 121)) |
                            (1 << (SQLiteParser.VACUUM_ - 121)) |
                            (1 << (SQLiteParser.VALUES_ - 121)) |
                            (1 << (SQLiteParser.VIEW_ - 121)) |
                            (1 << (SQLiteParser.VIRTUAL_ - 121)) |
                            (1 << (SQLiteParser.WHEN_ - 121)) |
                            (1 << (SQLiteParser.WHERE_ - 121)) |
                            (1 << (SQLiteParser.WITH_ - 121)) |
                            (1 << (SQLiteParser.WITHOUT_ - 121)) |
                            (1 << (SQLiteParser.FIRST_VALUE_ - 121)) |
                            (1 << (SQLiteParser.OVER_ - 121)))) !==
                        0) ||
                (((_la - 153) & ~0x1f) == 0 &&
                    ((1 << (_la - 153)) &
                        ((1 << (SQLiteParser.PARTITION_ - 153)) |
                            (1 << (SQLiteParser.RANGE_ - 153)) |
                            (1 << (SQLiteParser.PRECEDING_ - 153)) |
                            (1 << (SQLiteParser.UNBOUNDED_ - 153)) |
                            (1 << (SQLiteParser.CURRENT_ - 153)) |
                            (1 << (SQLiteParser.FOLLOWING_ - 153)) |
                            (1 << (SQLiteParser.CUME_DIST_ - 153)) |
                            (1 << (SQLiteParser.DENSE_RANK_ - 153)) |
                            (1 << (SQLiteParser.LAG_ - 153)) |
                            (1 << (SQLiteParser.LAST_VALUE_ - 153)) |
                            (1 << (SQLiteParser.LEAD_ - 153)) |
                            (1 << (SQLiteParser.NTH_VALUE_ - 153)) |
                            (1 << (SQLiteParser.NTILE_ - 153)) |
                            (1 << (SQLiteParser.PERCENT_RANK_ - 153)) |
                            (1 << (SQLiteParser.RANK_ - 153)) |
                            (1 << (SQLiteParser.ROW_NUMBER_ - 153)) |
                            (1 << (SQLiteParser.GENERATED_ - 153)) |
                            (1 << (SQLiteParser.ALWAYS_ - 153)) |
                            (1 << (SQLiteParser.STORED_ - 153)) |
                            (1 << (SQLiteParser.TRUE_ - 153)) |
                            (1 << (SQLiteParser.FALSE_ - 153)) |
                            (1 << (SQLiteParser.WINDOW_ - 153)) |
                            (1 << (SQLiteParser.NULLS_ - 153)) |
                            (1 << (SQLiteParser.FIRST_ - 153)) |
                            (1 << (SQLiteParser.LAST_ - 153)) |
                            (1 << (SQLiteParser.FILTER_ - 153)) |
                            (1 << (SQLiteParser.GROUPS_ - 153)) |
                            (1 << (SQLiteParser.EXCLUDE_ - 153)))) !==
                        0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    name() {
        const localctx = new NameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, SQLiteParser.RULE_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2028;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_name() {
        const localctx = new Function_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, SQLiteParser.RULE_function_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2030;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    schema_name() {
        const localctx = new Schema_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, SQLiteParser.RULE_schema_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2032;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_name() {
        const localctx = new Table_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, SQLiteParser.RULE_table_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2034;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_or_index_name() {
        const localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, SQLiteParser.RULE_table_or_index_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2036;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    column_name() {
        const localctx = new Column_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, SQLiteParser.RULE_column_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2038;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collation_name() {
        const localctx = new Collation_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, SQLiteParser.RULE_collation_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2040;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    foreign_table() {
        const localctx = new Foreign_tableContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, SQLiteParser.RULE_foreign_table);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2042;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    index_name() {
        const localctx = new Index_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, SQLiteParser.RULE_index_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2044;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    trigger_name() {
        const localctx = new Trigger_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, SQLiteParser.RULE_trigger_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2046;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    view_name() {
        const localctx = new View_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, SQLiteParser.RULE_view_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2048;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    module_name() {
        const localctx = new Module_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, SQLiteParser.RULE_module_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2050;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pragma_name() {
        const localctx = new Pragma_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, SQLiteParser.RULE_pragma_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2052;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    savepoint_name() {
        const localctx = new Savepoint_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, SQLiteParser.RULE_savepoint_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2054;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_alias() {
        const localctx = new Table_aliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, SQLiteParser.RULE_table_alias);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2056;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    transaction_name() {
        const localctx = new Transaction_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, SQLiteParser.RULE_transaction_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2058;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    window_name() {
        const localctx = new Window_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, SQLiteParser.RULE_window_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2060;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alias() {
        const localctx = new AliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, SQLiteParser.RULE_alias);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2062;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    filename() {
        const localctx = new FilenameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, SQLiteParser.RULE_filename);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2064;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    base_window_name() {
        const localctx = new Base_window_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, SQLiteParser.RULE_base_window_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2066;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simple_func() {
        const localctx = new Simple_funcContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, SQLiteParser.RULE_simple_func);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2068;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aggregate_func() {
        const localctx = new Aggregate_funcContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, SQLiteParser.RULE_aggregate_func);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2070;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    table_function_name() {
        const localctx = new Table_function_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, SQLiteParser.RULE_table_function_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2072;
            this.any_name();
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    any_name() {
        const localctx = new Any_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, SQLiteParser.RULE_any_name);
        try {
            this.state = 2081;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case SQLiteParser.IDENTIFIER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2074;
                    this.match(SQLiteParser.IDENTIFIER);
                    break;
                case SQLiteParser.ABORT_:
                case SQLiteParser.ACTION_:
                case SQLiteParser.ADD_:
                case SQLiteParser.AFTER_:
                case SQLiteParser.ALL_:
                case SQLiteParser.ALTER_:
                case SQLiteParser.ANALYZE_:
                case SQLiteParser.AND_:
                case SQLiteParser.AS_:
                case SQLiteParser.ASC_:
                case SQLiteParser.ATTACH_:
                case SQLiteParser.AUTOINCREMENT_:
                case SQLiteParser.BEFORE_:
                case SQLiteParser.BEGIN_:
                case SQLiteParser.BETWEEN_:
                case SQLiteParser.BY_:
                case SQLiteParser.CASCADE_:
                case SQLiteParser.CASE_:
                case SQLiteParser.CAST_:
                case SQLiteParser.CHECK_:
                case SQLiteParser.COLLATE_:
                case SQLiteParser.COLUMN_:
                case SQLiteParser.COMMIT_:
                case SQLiteParser.CONFLICT_:
                case SQLiteParser.CONSTRAINT_:
                case SQLiteParser.CREATE_:
                case SQLiteParser.CROSS_:
                case SQLiteParser.CURRENT_DATE_:
                case SQLiteParser.CURRENT_TIME_:
                case SQLiteParser.CURRENT_TIMESTAMP_:
                case SQLiteParser.DATABASE_:
                case SQLiteParser.DEFAULT_:
                case SQLiteParser.DEFERRABLE_:
                case SQLiteParser.DEFERRED_:
                case SQLiteParser.DELETE_:
                case SQLiteParser.DESC_:
                case SQLiteParser.DETACH_:
                case SQLiteParser.DISTINCT_:
                case SQLiteParser.DROP_:
                case SQLiteParser.EACH_:
                case SQLiteParser.ELSE_:
                case SQLiteParser.END_:
                case SQLiteParser.ESCAPE_:
                case SQLiteParser.EXCEPT_:
                case SQLiteParser.EXCLUSIVE_:
                case SQLiteParser.EXISTS_:
                case SQLiteParser.EXPLAIN_:
                case SQLiteParser.FAIL_:
                case SQLiteParser.FOR_:
                case SQLiteParser.FOREIGN_:
                case SQLiteParser.FROM_:
                case SQLiteParser.FULL_:
                case SQLiteParser.GLOB_:
                case SQLiteParser.GROUP_:
                case SQLiteParser.HAVING_:
                case SQLiteParser.IF_:
                case SQLiteParser.IGNORE_:
                case SQLiteParser.IMMEDIATE_:
                case SQLiteParser.IN_:
                case SQLiteParser.INDEX_:
                case SQLiteParser.INDEXED_:
                case SQLiteParser.INITIALLY_:
                case SQLiteParser.INNER_:
                case SQLiteParser.INSERT_:
                case SQLiteParser.INSTEAD_:
                case SQLiteParser.INTERSECT_:
                case SQLiteParser.INTO_:
                case SQLiteParser.IS_:
                case SQLiteParser.ISNULL_:
                case SQLiteParser.JOIN_:
                case SQLiteParser.KEY_:
                case SQLiteParser.LEFT_:
                case SQLiteParser.LIKE_:
                case SQLiteParser.LIMIT_:
                case SQLiteParser.MATCH_:
                case SQLiteParser.NATURAL_:
                case SQLiteParser.NO_:
                case SQLiteParser.NOT_:
                case SQLiteParser.NOTNULL_:
                case SQLiteParser.NULL_:
                case SQLiteParser.OF_:
                case SQLiteParser.OFFSET_:
                case SQLiteParser.ON_:
                case SQLiteParser.OR_:
                case SQLiteParser.ORDER_:
                case SQLiteParser.OUTER_:
                case SQLiteParser.PLAN_:
                case SQLiteParser.PRAGMA_:
                case SQLiteParser.PRIMARY_:
                case SQLiteParser.QUERY_:
                case SQLiteParser.RAISE_:
                case SQLiteParser.RECURSIVE_:
                case SQLiteParser.REFERENCES_:
                case SQLiteParser.REGEXP_:
                case SQLiteParser.REINDEX_:
                case SQLiteParser.RELEASE_:
                case SQLiteParser.RENAME_:
                case SQLiteParser.REPLACE_:
                case SQLiteParser.RESTRICT_:
                case SQLiteParser.RIGHT_:
                case SQLiteParser.ROLLBACK_:
                case SQLiteParser.ROW_:
                case SQLiteParser.ROWS_:
                case SQLiteParser.SAVEPOINT_:
                case SQLiteParser.SELECT_:
                case SQLiteParser.SET_:
                case SQLiteParser.TABLE_:
                case SQLiteParser.TEMP_:
                case SQLiteParser.TEMPORARY_:
                case SQLiteParser.THEN_:
                case SQLiteParser.TO_:
                case SQLiteParser.TRANSACTION_:
                case SQLiteParser.TRIGGER_:
                case SQLiteParser.UNION_:
                case SQLiteParser.UNIQUE_:
                case SQLiteParser.UPDATE_:
                case SQLiteParser.USING_:
                case SQLiteParser.VACUUM_:
                case SQLiteParser.VALUES_:
                case SQLiteParser.VIEW_:
                case SQLiteParser.VIRTUAL_:
                case SQLiteParser.WHEN_:
                case SQLiteParser.WHERE_:
                case SQLiteParser.WITH_:
                case SQLiteParser.WITHOUT_:
                case SQLiteParser.FIRST_VALUE_:
                case SQLiteParser.OVER_:
                case SQLiteParser.PARTITION_:
                case SQLiteParser.RANGE_:
                case SQLiteParser.PRECEDING_:
                case SQLiteParser.UNBOUNDED_:
                case SQLiteParser.CURRENT_:
                case SQLiteParser.FOLLOWING_:
                case SQLiteParser.CUME_DIST_:
                case SQLiteParser.DENSE_RANK_:
                case SQLiteParser.LAG_:
                case SQLiteParser.LAST_VALUE_:
                case SQLiteParser.LEAD_:
                case SQLiteParser.NTH_VALUE_:
                case SQLiteParser.NTILE_:
                case SQLiteParser.PERCENT_RANK_:
                case SQLiteParser.RANK_:
                case SQLiteParser.ROW_NUMBER_:
                case SQLiteParser.GENERATED_:
                case SQLiteParser.ALWAYS_:
                case SQLiteParser.STORED_:
                case SQLiteParser.TRUE_:
                case SQLiteParser.FALSE_:
                case SQLiteParser.WINDOW_:
                case SQLiteParser.NULLS_:
                case SQLiteParser.FIRST_:
                case SQLiteParser.LAST_:
                case SQLiteParser.FILTER_:
                case SQLiteParser.GROUPS_:
                case SQLiteParser.EXCLUDE_:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2075;
                    this.keyword();
                    break;
                case SQLiteParser.STRING_LITERAL:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2076;
                    this.match(SQLiteParser.STRING_LITERAL);
                    break;
                case SQLiteParser.OPEN_PAR:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2077;
                    this.match(SQLiteParser.OPEN_PAR);
                    this.state = 2078;
                    this.any_name();
                    this.state = 2079;
                    this.match(SQLiteParser.CLOSE_PAR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
SQLiteParser.grammarFileName = "SQLiteParser.g4";
SQLiteParser.literalNames = [
    null,
    "';'",
    "'.'",
    "'('",
    "')'",
    "','",
    "'='",
    "'*'",
    "'+'",
    "'-'",
    "'~'",
    "'||'",
    "'/'",
    "'%'",
    "'<<'",
    "'>>'",
    "'&'",
    "'|'",
    "'<'",
    "'<='",
    "'>'",
    "'>='",
    "'=='",
    "'!='",
    "'<>'",
    "'ABORT'",
    "'ACTION'",
    "'ADD'",
    "'AFTER'",
    "'ALL'",
    "'ALTER'",
    "'ANALYZE'",
    "'AND'",
    "'AS'",
    "'ASC'",
    "'ATTACH'",
    "'AUTOINCREMENT'",
    "'BEFORE'",
    "'BEGIN'",
    "'BETWEEN'",
    "'BY'",
    "'CASCADE'",
    "'CASE'",
    "'CAST'",
    "'CHECK'",
    "'COLLATE'",
    "'COLUMN'",
    "'COMMIT'",
    "'CONFLICT'",
    "'CONSTRAINT'",
    "'CREATE'",
    "'CROSS'",
    "'CURRENT_DATE'",
    "'CURRENT_TIME'",
    "'CURRENT_TIMESTAMP'",
    "'DATABASE'",
    "'DEFAULT'",
    "'DEFERRABLE'",
    "'DEFERRED'",
    "'DELETE'",
    "'DESC'",
    "'DETACH'",
    "'DISTINCT'",
    "'DROP'",
    "'EACH'",
    "'ELSE'",
    "'END'",
    "'ESCAPE'",
    "'EXCEPT'",
    "'EXCLUSIVE'",
    "'EXISTS'",
    "'EXPLAIN'",
    "'FAIL'",
    "'FOR'",
    "'FOREIGN'",
    "'FROM'",
    "'FULL'",
    "'GLOB'",
    "'GROUP'",
    "'HAVING'",
    "'IF'",
    "'IGNORE'",
    "'IMMEDIATE'",
    "'IN'",
    "'INDEX'",
    "'INDEXED'",
    "'INITIALLY'",
    "'INNER'",
    "'INSERT'",
    "'INSTEAD'",
    "'INTERSECT'",
    "'INTO'",
    "'IS'",
    "'ISNULL'",
    "'JOIN'",
    "'KEY'",
    "'LEFT'",
    "'LIKE'",
    "'LIMIT'",
    "'MATCH'",
    "'NATURAL'",
    "'NO'",
    "'NOT'",
    "'NOTNULL'",
    "'NULL'",
    "'OF'",
    "'OFFSET'",
    "'ON'",
    "'OR'",
    "'ORDER'",
    "'OUTER'",
    "'PLAN'",
    "'PRAGMA'",
    "'PRIMARY'",
    "'QUERY'",
    "'RAISE'",
    "'RECURSIVE'",
    "'REFERENCES'",
    "'REGEXP'",
    "'REINDEX'",
    "'RELEASE'",
    "'RENAME'",
    "'REPLACE'",
    "'RESTRICT'",
    "'RETURNING'",
    "'RIGHT'",
    "'ROLLBACK'",
    "'ROW'",
    "'ROWS'",
    "'SAVEPOINT'",
    "'SELECT'",
    "'SET'",
    "'TABLE'",
    "'TEMP'",
    "'TEMPORARY'",
    "'THEN'",
    "'TO'",
    "'TRANSACTION'",
    "'TRIGGER'",
    "'UNION'",
    "'UNIQUE'",
    "'UPDATE'",
    "'USING'",
    "'VACUUM'",
    "'VALUES'",
    "'VIEW'",
    "'VIRTUAL'",
    "'WHEN'",
    "'WHERE'",
    "'WITH'",
    "'WITHOUT'",
    "'FIRST_VALUE'",
    "'OVER'",
    "'PARTITION'",
    "'RANGE'",
    "'PRECEDING'",
    "'UNBOUNDED'",
    "'CURRENT'",
    "'FOLLOWING'",
    "'CUME_DIST'",
    "'DENSE_RANK'",
    "'LAG'",
    "'LAST_VALUE'",
    "'LEAD'",
    "'NTH_VALUE'",
    "'NTILE'",
    "'PERCENT_RANK'",
    "'RANK'",
    "'ROW_NUMBER'",
    "'GENERATED'",
    "'ALWAYS'",
    "'STORED'",
    "'TRUE'",
    "'FALSE'",
    "'WINDOW'",
    "'NULLS'",
    "'FIRST'",
    "'LAST'",
    "'FILTER'",
    "'GROUPS'",
    "'EXCLUDE'",
    "'TIES'",
    "'OTHERS'",
    "'DO'",
    "'NOTHING'",
];
SQLiteParser.symbolicNames = [
    null,
    "SCOL",
    "DOT",
    "OPEN_PAR",
    "CLOSE_PAR",
    "COMMA",
    "ASSIGN",
    "STAR",
    "PLUS",
    "MINUS",
    "TILDE",
    "PIPE2",
    "DIV",
    "MOD",
    "LT2",
    "GT2",
    "AMP",
    "PIPE",
    "LT",
    "LT_EQ",
    "GT",
    "GT_EQ",
    "EQ",
    "NOT_EQ1",
    "NOT_EQ2",
    "ABORT_",
    "ACTION_",
    "ADD_",
    "AFTER_",
    "ALL_",
    "ALTER_",
    "ANALYZE_",
    "AND_",
    "AS_",
    "ASC_",
    "ATTACH_",
    "AUTOINCREMENT_",
    "BEFORE_",
    "BEGIN_",
    "BETWEEN_",
    "BY_",
    "CASCADE_",
    "CASE_",
    "CAST_",
    "CHECK_",
    "COLLATE_",
    "COLUMN_",
    "COMMIT_",
    "CONFLICT_",
    "CONSTRAINT_",
    "CREATE_",
    "CROSS_",
    "CURRENT_DATE_",
    "CURRENT_TIME_",
    "CURRENT_TIMESTAMP_",
    "DATABASE_",
    "DEFAULT_",
    "DEFERRABLE_",
    "DEFERRED_",
    "DELETE_",
    "DESC_",
    "DETACH_",
    "DISTINCT_",
    "DROP_",
    "EACH_",
    "ELSE_",
    "END_",
    "ESCAPE_",
    "EXCEPT_",
    "EXCLUSIVE_",
    "EXISTS_",
    "EXPLAIN_",
    "FAIL_",
    "FOR_",
    "FOREIGN_",
    "FROM_",
    "FULL_",
    "GLOB_",
    "GROUP_",
    "HAVING_",
    "IF_",
    "IGNORE_",
    "IMMEDIATE_",
    "IN_",
    "INDEX_",
    "INDEXED_",
    "INITIALLY_",
    "INNER_",
    "INSERT_",
    "INSTEAD_",
    "INTERSECT_",
    "INTO_",
    "IS_",
    "ISNULL_",
    "JOIN_",
    "KEY_",
    "LEFT_",
    "LIKE_",
    "LIMIT_",
    "MATCH_",
    "NATURAL_",
    "NO_",
    "NOT_",
    "NOTNULL_",
    "NULL_",
    "OF_",
    "OFFSET_",
    "ON_",
    "OR_",
    "ORDER_",
    "OUTER_",
    "PLAN_",
    "PRAGMA_",
    "PRIMARY_",
    "QUERY_",
    "RAISE_",
    "RECURSIVE_",
    "REFERENCES_",
    "REGEXP_",
    "REINDEX_",
    "RELEASE_",
    "RENAME_",
    "REPLACE_",
    "RESTRICT_",
    "RETURNING_",
    "RIGHT_",
    "ROLLBACK_",
    "ROW_",
    "ROWS_",
    "SAVEPOINT_",
    "SELECT_",
    "SET_",
    "TABLE_",
    "TEMP_",
    "TEMPORARY_",
    "THEN_",
    "TO_",
    "TRANSACTION_",
    "TRIGGER_",
    "UNION_",
    "UNIQUE_",
    "UPDATE_",
    "USING_",
    "VACUUM_",
    "VALUES_",
    "VIEW_",
    "VIRTUAL_",
    "WHEN_",
    "WHERE_",
    "WITH_",
    "WITHOUT_",
    "FIRST_VALUE_",
    "OVER_",
    "PARTITION_",
    "RANGE_",
    "PRECEDING_",
    "UNBOUNDED_",
    "CURRENT_",
    "FOLLOWING_",
    "CUME_DIST_",
    "DENSE_RANK_",
    "LAG_",
    "LAST_VALUE_",
    "LEAD_",
    "NTH_VALUE_",
    "NTILE_",
    "PERCENT_RANK_",
    "RANK_",
    "ROW_NUMBER_",
    "GENERATED_",
    "ALWAYS_",
    "STORED_",
    "TRUE_",
    "FALSE_",
    "WINDOW_",
    "NULLS_",
    "FIRST_",
    "LAST_",
    "FILTER_",
    "GROUPS_",
    "EXCLUDE_",
    "TIES_",
    "OTHERS_",
    "DO_",
    "NOTHING_",
    "IDENTIFIER",
    "NUMERIC_LITERAL",
    "BIND_PARAMETER",
    "STRING_LITERAL",
    "BLOB_LITERAL",
    "SINGLE_LINE_COMMENT",
    "MULTILINE_COMMENT",
    "SPACES",
    "UNEXPECTED_CHAR",
];
SQLiteParser.ruleNames = [
    "parse",
    "sql_stmt_list",
    "sql_stmt",
    "alter_table_stmt",
    "analyze_stmt",
    "attach_stmt",
    "begin_stmt",
    "commit_stmt",
    "rollback_stmt",
    "savepoint_stmt",
    "release_stmt",
    "create_index_stmt",
    "indexed_column",
    "create_table_stmt",
    "column_def",
    "type_name",
    "column_constraint",
    "signed_number",
    "table_constraint",
    "foreign_key_clause",
    "conflict_clause",
    "create_trigger_stmt",
    "create_view_stmt",
    "create_virtual_table_stmt",
    "with_clause",
    "cte_table_name",
    "recursive_cte",
    "common_table_expression",
    "delete_stmt",
    "delete_stmt_limited",
    "detach_stmt",
    "drop_stmt",
    "expr",
    "raise_function",
    "literal_value",
    "insert_stmt",
    "returning_clause",
    "upsert_clause",
    "pragma_stmt",
    "pragma_value",
    "reindex_stmt",
    "select_stmt",
    "join_clause",
    "select_core",
    "factored_select_stmt",
    "simple_select_stmt",
    "compound_select_stmt",
    "table_or_subquery",
    "result_column",
    "join_operator",
    "join_constraint",
    "compound_operator",
    "update_stmt",
    "column_name_list",
    "update_stmt_limited",
    "qualified_table_name",
    "vacuum_stmt",
    "filter_clause",
    "window_defn",
    "over_clause",
    "frame_spec",
    "frame_clause",
    "simple_function_invocation",
    "aggregate_function_invocation",
    "window_function_invocation",
    "common_table_stmt",
    "order_by_stmt",
    "limit_stmt",
    "ordering_term",
    "asc_desc",
    "frame_left",
    "frame_right",
    "frame_single",
    "window_function",
    "offset",
    "default_value",
    "partition_by",
    "order_by_expr",
    "order_by_expr_asc_desc",
    "expr_asc_desc",
    "initial_select",
    "recursive_select",
    "unary_operator",
    "error_message",
    "module_argument",
    "column_alias",
    "keyword",
    "name",
    "function_name",
    "schema_name",
    "table_name",
    "table_or_index_name",
    "column_name",
    "collation_name",
    "foreign_table",
    "index_name",
    "trigger_name",
    "view_name",
    "module_name",
    "pragma_name",
    "savepoint_name",
    "table_alias",
    "transaction_name",
    "window_name",
    "alias",
    "filename",
    "base_window_name",
    "simple_func",
    "aggregate_func",
    "table_function_name",
    "any_name",
];
SQLiteParser.EOF = antlr4.Token.EOF;
SQLiteParser.SCOL = 1;
SQLiteParser.DOT = 2;
SQLiteParser.OPEN_PAR = 3;
SQLiteParser.CLOSE_PAR = 4;
SQLiteParser.COMMA = 5;
SQLiteParser.ASSIGN = 6;
SQLiteParser.STAR = 7;
SQLiteParser.PLUS = 8;
SQLiteParser.MINUS = 9;
SQLiteParser.TILDE = 10;
SQLiteParser.PIPE2 = 11;
SQLiteParser.DIV = 12;
SQLiteParser.MOD = 13;
SQLiteParser.LT2 = 14;
SQLiteParser.GT2 = 15;
SQLiteParser.AMP = 16;
SQLiteParser.PIPE = 17;
SQLiteParser.LT = 18;
SQLiteParser.LT_EQ = 19;
SQLiteParser.GT = 20;
SQLiteParser.GT_EQ = 21;
SQLiteParser.EQ = 22;
SQLiteParser.NOT_EQ1 = 23;
SQLiteParser.NOT_EQ2 = 24;
SQLiteParser.ABORT_ = 25;
SQLiteParser.ACTION_ = 26;
SQLiteParser.ADD_ = 27;
SQLiteParser.AFTER_ = 28;
SQLiteParser.ALL_ = 29;
SQLiteParser.ALTER_ = 30;
SQLiteParser.ANALYZE_ = 31;
SQLiteParser.AND_ = 32;
SQLiteParser.AS_ = 33;
SQLiteParser.ASC_ = 34;
SQLiteParser.ATTACH_ = 35;
SQLiteParser.AUTOINCREMENT_ = 36;
SQLiteParser.BEFORE_ = 37;
SQLiteParser.BEGIN_ = 38;
SQLiteParser.BETWEEN_ = 39;
SQLiteParser.BY_ = 40;
SQLiteParser.CASCADE_ = 41;
SQLiteParser.CASE_ = 42;
SQLiteParser.CAST_ = 43;
SQLiteParser.CHECK_ = 44;
SQLiteParser.COLLATE_ = 45;
SQLiteParser.COLUMN_ = 46;
SQLiteParser.COMMIT_ = 47;
SQLiteParser.CONFLICT_ = 48;
SQLiteParser.CONSTRAINT_ = 49;
SQLiteParser.CREATE_ = 50;
SQLiteParser.CROSS_ = 51;
SQLiteParser.CURRENT_DATE_ = 52;
SQLiteParser.CURRENT_TIME_ = 53;
SQLiteParser.CURRENT_TIMESTAMP_ = 54;
SQLiteParser.DATABASE_ = 55;
SQLiteParser.DEFAULT_ = 56;
SQLiteParser.DEFERRABLE_ = 57;
SQLiteParser.DEFERRED_ = 58;
SQLiteParser.DELETE_ = 59;
SQLiteParser.DESC_ = 60;
SQLiteParser.DETACH_ = 61;
SQLiteParser.DISTINCT_ = 62;
SQLiteParser.DROP_ = 63;
SQLiteParser.EACH_ = 64;
SQLiteParser.ELSE_ = 65;
SQLiteParser.END_ = 66;
SQLiteParser.ESCAPE_ = 67;
SQLiteParser.EXCEPT_ = 68;
SQLiteParser.EXCLUSIVE_ = 69;
SQLiteParser.EXISTS_ = 70;
SQLiteParser.EXPLAIN_ = 71;
SQLiteParser.FAIL_ = 72;
SQLiteParser.FOR_ = 73;
SQLiteParser.FOREIGN_ = 74;
SQLiteParser.FROM_ = 75;
SQLiteParser.FULL_ = 76;
SQLiteParser.GLOB_ = 77;
SQLiteParser.GROUP_ = 78;
SQLiteParser.HAVING_ = 79;
SQLiteParser.IF_ = 80;
SQLiteParser.IGNORE_ = 81;
SQLiteParser.IMMEDIATE_ = 82;
SQLiteParser.IN_ = 83;
SQLiteParser.INDEX_ = 84;
SQLiteParser.INDEXED_ = 85;
SQLiteParser.INITIALLY_ = 86;
SQLiteParser.INNER_ = 87;
SQLiteParser.INSERT_ = 88;
SQLiteParser.INSTEAD_ = 89;
SQLiteParser.INTERSECT_ = 90;
SQLiteParser.INTO_ = 91;
SQLiteParser.IS_ = 92;
SQLiteParser.ISNULL_ = 93;
SQLiteParser.JOIN_ = 94;
SQLiteParser.KEY_ = 95;
SQLiteParser.LEFT_ = 96;
SQLiteParser.LIKE_ = 97;
SQLiteParser.LIMIT_ = 98;
SQLiteParser.MATCH_ = 99;
SQLiteParser.NATURAL_ = 100;
SQLiteParser.NO_ = 101;
SQLiteParser.NOT_ = 102;
SQLiteParser.NOTNULL_ = 103;
SQLiteParser.NULL_ = 104;
SQLiteParser.OF_ = 105;
SQLiteParser.OFFSET_ = 106;
SQLiteParser.ON_ = 107;
SQLiteParser.OR_ = 108;
SQLiteParser.ORDER_ = 109;
SQLiteParser.OUTER_ = 110;
SQLiteParser.PLAN_ = 111;
SQLiteParser.PRAGMA_ = 112;
SQLiteParser.PRIMARY_ = 113;
SQLiteParser.QUERY_ = 114;
SQLiteParser.RAISE_ = 115;
SQLiteParser.RECURSIVE_ = 116;
SQLiteParser.REFERENCES_ = 117;
SQLiteParser.REGEXP_ = 118;
SQLiteParser.REINDEX_ = 119;
SQLiteParser.RELEASE_ = 120;
SQLiteParser.RENAME_ = 121;
SQLiteParser.REPLACE_ = 122;
SQLiteParser.RESTRICT_ = 123;
SQLiteParser.RETURNING_ = 124;
SQLiteParser.RIGHT_ = 125;
SQLiteParser.ROLLBACK_ = 126;
SQLiteParser.ROW_ = 127;
SQLiteParser.ROWS_ = 128;
SQLiteParser.SAVEPOINT_ = 129;
SQLiteParser.SELECT_ = 130;
SQLiteParser.SET_ = 131;
SQLiteParser.TABLE_ = 132;
SQLiteParser.TEMP_ = 133;
SQLiteParser.TEMPORARY_ = 134;
SQLiteParser.THEN_ = 135;
SQLiteParser.TO_ = 136;
SQLiteParser.TRANSACTION_ = 137;
SQLiteParser.TRIGGER_ = 138;
SQLiteParser.UNION_ = 139;
SQLiteParser.UNIQUE_ = 140;
SQLiteParser.UPDATE_ = 141;
SQLiteParser.USING_ = 142;
SQLiteParser.VACUUM_ = 143;
SQLiteParser.VALUES_ = 144;
SQLiteParser.VIEW_ = 145;
SQLiteParser.VIRTUAL_ = 146;
SQLiteParser.WHEN_ = 147;
SQLiteParser.WHERE_ = 148;
SQLiteParser.WITH_ = 149;
SQLiteParser.WITHOUT_ = 150;
SQLiteParser.FIRST_VALUE_ = 151;
SQLiteParser.OVER_ = 152;
SQLiteParser.PARTITION_ = 153;
SQLiteParser.RANGE_ = 154;
SQLiteParser.PRECEDING_ = 155;
SQLiteParser.UNBOUNDED_ = 156;
SQLiteParser.CURRENT_ = 157;
SQLiteParser.FOLLOWING_ = 158;
SQLiteParser.CUME_DIST_ = 159;
SQLiteParser.DENSE_RANK_ = 160;
SQLiteParser.LAG_ = 161;
SQLiteParser.LAST_VALUE_ = 162;
SQLiteParser.LEAD_ = 163;
SQLiteParser.NTH_VALUE_ = 164;
SQLiteParser.NTILE_ = 165;
SQLiteParser.PERCENT_RANK_ = 166;
SQLiteParser.RANK_ = 167;
SQLiteParser.ROW_NUMBER_ = 168;
SQLiteParser.GENERATED_ = 169;
SQLiteParser.ALWAYS_ = 170;
SQLiteParser.STORED_ = 171;
SQLiteParser.TRUE_ = 172;
SQLiteParser.FALSE_ = 173;
SQLiteParser.WINDOW_ = 174;
SQLiteParser.NULLS_ = 175;
SQLiteParser.FIRST_ = 176;
SQLiteParser.LAST_ = 177;
SQLiteParser.FILTER_ = 178;
SQLiteParser.GROUPS_ = 179;
SQLiteParser.EXCLUDE_ = 180;
SQLiteParser.TIES_ = 181;
SQLiteParser.OTHERS_ = 182;
SQLiteParser.DO_ = 183;
SQLiteParser.NOTHING_ = 184;
SQLiteParser.IDENTIFIER = 185;
SQLiteParser.NUMERIC_LITERAL = 186;
SQLiteParser.BIND_PARAMETER = 187;
SQLiteParser.STRING_LITERAL = 188;
SQLiteParser.BLOB_LITERAL = 189;
SQLiteParser.SINGLE_LINE_COMMENT = 190;
SQLiteParser.MULTILINE_COMMENT = 191;
SQLiteParser.SPACES = 192;
SQLiteParser.UNEXPECTED_CHAR = 193;
SQLiteParser.RULE_parse = 0;
SQLiteParser.RULE_sql_stmt_list = 1;
SQLiteParser.RULE_sql_stmt = 2;
SQLiteParser.RULE_alter_table_stmt = 3;
SQLiteParser.RULE_analyze_stmt = 4;
SQLiteParser.RULE_attach_stmt = 5;
SQLiteParser.RULE_begin_stmt = 6;
SQLiteParser.RULE_commit_stmt = 7;
SQLiteParser.RULE_rollback_stmt = 8;
SQLiteParser.RULE_savepoint_stmt = 9;
SQLiteParser.RULE_release_stmt = 10;
SQLiteParser.RULE_create_index_stmt = 11;
SQLiteParser.RULE_indexed_column = 12;
SQLiteParser.RULE_create_table_stmt = 13;
SQLiteParser.RULE_column_def = 14;
SQLiteParser.RULE_type_name = 15;
SQLiteParser.RULE_column_constraint = 16;
SQLiteParser.RULE_signed_number = 17;
SQLiteParser.RULE_table_constraint = 18;
SQLiteParser.RULE_foreign_key_clause = 19;
SQLiteParser.RULE_conflict_clause = 20;
SQLiteParser.RULE_create_trigger_stmt = 21;
SQLiteParser.RULE_create_view_stmt = 22;
SQLiteParser.RULE_create_virtual_table_stmt = 23;
SQLiteParser.RULE_with_clause = 24;
SQLiteParser.RULE_cte_table_name = 25;
SQLiteParser.RULE_recursive_cte = 26;
SQLiteParser.RULE_common_table_expression = 27;
SQLiteParser.RULE_delete_stmt = 28;
SQLiteParser.RULE_delete_stmt_limited = 29;
SQLiteParser.RULE_detach_stmt = 30;
SQLiteParser.RULE_drop_stmt = 31;
SQLiteParser.RULE_expr = 32;
SQLiteParser.RULE_raise_function = 33;
SQLiteParser.RULE_literal_value = 34;
SQLiteParser.RULE_insert_stmt = 35;
SQLiteParser.RULE_returning_clause = 36;
SQLiteParser.RULE_upsert_clause = 37;
SQLiteParser.RULE_pragma_stmt = 38;
SQLiteParser.RULE_pragma_value = 39;
SQLiteParser.RULE_reindex_stmt = 40;
SQLiteParser.RULE_select_stmt = 41;
SQLiteParser.RULE_join_clause = 42;
SQLiteParser.RULE_select_core = 43;
SQLiteParser.RULE_factored_select_stmt = 44;
SQLiteParser.RULE_simple_select_stmt = 45;
SQLiteParser.RULE_compound_select_stmt = 46;
SQLiteParser.RULE_table_or_subquery = 47;
SQLiteParser.RULE_result_column = 48;
SQLiteParser.RULE_join_operator = 49;
SQLiteParser.RULE_join_constraint = 50;
SQLiteParser.RULE_compound_operator = 51;
SQLiteParser.RULE_update_stmt = 52;
SQLiteParser.RULE_column_name_list = 53;
SQLiteParser.RULE_update_stmt_limited = 54;
SQLiteParser.RULE_qualified_table_name = 55;
SQLiteParser.RULE_vacuum_stmt = 56;
SQLiteParser.RULE_filter_clause = 57;
SQLiteParser.RULE_window_defn = 58;
SQLiteParser.RULE_over_clause = 59;
SQLiteParser.RULE_frame_spec = 60;
SQLiteParser.RULE_frame_clause = 61;
SQLiteParser.RULE_simple_function_invocation = 62;
SQLiteParser.RULE_aggregate_function_invocation = 63;
SQLiteParser.RULE_window_function_invocation = 64;
SQLiteParser.RULE_common_table_stmt = 65;
SQLiteParser.RULE_order_by_stmt = 66;
SQLiteParser.RULE_limit_stmt = 67;
SQLiteParser.RULE_ordering_term = 68;
SQLiteParser.RULE_asc_desc = 69;
SQLiteParser.RULE_frame_left = 70;
SQLiteParser.RULE_frame_right = 71;
SQLiteParser.RULE_frame_single = 72;
SQLiteParser.RULE_window_function = 73;
SQLiteParser.RULE_offset = 74;
SQLiteParser.RULE_default_value = 75;
SQLiteParser.RULE_partition_by = 76;
SQLiteParser.RULE_order_by_expr = 77;
SQLiteParser.RULE_order_by_expr_asc_desc = 78;
SQLiteParser.RULE_expr_asc_desc = 79;
SQLiteParser.RULE_initial_select = 80;
SQLiteParser.RULE_recursive_select = 81;
SQLiteParser.RULE_unary_operator = 82;
SQLiteParser.RULE_error_message = 83;
SQLiteParser.RULE_module_argument = 84;
SQLiteParser.RULE_column_alias = 85;
SQLiteParser.RULE_keyword = 86;
SQLiteParser.RULE_name = 87;
SQLiteParser.RULE_function_name = 88;
SQLiteParser.RULE_schema_name = 89;
SQLiteParser.RULE_table_name = 90;
SQLiteParser.RULE_table_or_index_name = 91;
SQLiteParser.RULE_column_name = 92;
SQLiteParser.RULE_collation_name = 93;
SQLiteParser.RULE_foreign_table = 94;
SQLiteParser.RULE_index_name = 95;
SQLiteParser.RULE_trigger_name = 96;
SQLiteParser.RULE_view_name = 97;
SQLiteParser.RULE_module_name = 98;
SQLiteParser.RULE_pragma_name = 99;
SQLiteParser.RULE_savepoint_name = 100;
SQLiteParser.RULE_table_alias = 101;
SQLiteParser.RULE_transaction_name = 102;
SQLiteParser.RULE_window_name = 103;
SQLiteParser.RULE_alias = 104;
SQLiteParser.RULE_filename = 105;
SQLiteParser.RULE_base_window_name = 106;
SQLiteParser.RULE_simple_func = 107;
SQLiteParser.RULE_aggregate_func = 108;
SQLiteParser.RULE_table_function_name = 109;
SQLiteParser.RULE_any_name = 110;
class ParseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.sql_stmt_list = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Sql_stmt_listContext);
            }
            else {
                return this.getTypedRuleContext(Sql_stmt_listContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_parse;
    }
    EOF() {
        return this.getToken(SQLiteParser.EOF, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterParse(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitParse(this);
        }
    }
}
class Sql_stmt_listContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.sql_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Sql_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Sql_stmtContext, i);
            }
        };
        this.SCOL = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.SCOL);
            }
            else {
                return this.getToken(SQLiteParser.SCOL, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_sql_stmt_list;
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSql_stmt_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSql_stmt_list(this);
        }
    }
}
class Sql_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_sql_stmt;
    }
    alter_table_stmt() {
        return this.getTypedRuleContext(Alter_table_stmtContext, 0);
    }
    analyze_stmt() {
        return this.getTypedRuleContext(Analyze_stmtContext, 0);
    }
    attach_stmt() {
        return this.getTypedRuleContext(Attach_stmtContext, 0);
    }
    begin_stmt() {
        return this.getTypedRuleContext(Begin_stmtContext, 0);
    }
    commit_stmt() {
        return this.getTypedRuleContext(Commit_stmtContext, 0);
    }
    create_index_stmt() {
        return this.getTypedRuleContext(Create_index_stmtContext, 0);
    }
    create_table_stmt() {
        return this.getTypedRuleContext(Create_table_stmtContext, 0);
    }
    create_trigger_stmt() {
        return this.getTypedRuleContext(Create_trigger_stmtContext, 0);
    }
    create_view_stmt() {
        return this.getTypedRuleContext(Create_view_stmtContext, 0);
    }
    create_virtual_table_stmt() {
        return this.getTypedRuleContext(Create_virtual_table_stmtContext, 0);
    }
    delete_stmt() {
        return this.getTypedRuleContext(Delete_stmtContext, 0);
    }
    delete_stmt_limited() {
        return this.getTypedRuleContext(Delete_stmt_limitedContext, 0);
    }
    detach_stmt() {
        return this.getTypedRuleContext(Detach_stmtContext, 0);
    }
    drop_stmt() {
        return this.getTypedRuleContext(Drop_stmtContext, 0);
    }
    insert_stmt() {
        return this.getTypedRuleContext(Insert_stmtContext, 0);
    }
    pragma_stmt() {
        return this.getTypedRuleContext(Pragma_stmtContext, 0);
    }
    reindex_stmt() {
        return this.getTypedRuleContext(Reindex_stmtContext, 0);
    }
    release_stmt() {
        return this.getTypedRuleContext(Release_stmtContext, 0);
    }
    rollback_stmt() {
        return this.getTypedRuleContext(Rollback_stmtContext, 0);
    }
    savepoint_stmt() {
        return this.getTypedRuleContext(Savepoint_stmtContext, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    update_stmt() {
        return this.getTypedRuleContext(Update_stmtContext, 0);
    }
    update_stmt_limited() {
        return this.getTypedRuleContext(Update_stmt_limitedContext, 0);
    }
    vacuum_stmt() {
        return this.getTypedRuleContext(Vacuum_stmtContext, 0);
    }
    EXPLAIN_() {
        return this.getToken(SQLiteParser.EXPLAIN_, 0);
    }
    QUERY_() {
        return this.getToken(SQLiteParser.QUERY_, 0);
    }
    PLAN_() {
        return this.getToken(SQLiteParser.PLAN_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSql_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSql_stmt(this);
        }
    }
}
class Alter_table_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.table_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_nameContext);
            }
            else {
                return this.getTypedRuleContext(Table_nameContext, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_alter_table_stmt;
        this.new_table_name = null; // Table_nameContext
        this.old_column_name = null; // Column_nameContext
        this.new_column_name = null; // Column_nameContext
    }
    ALTER_() {
        return this.getToken(SQLiteParser.ALTER_, 0);
    }
    TABLE_() {
        return this.getToken(SQLiteParser.TABLE_, 0);
    }
    RENAME_() {
        return this.getToken(SQLiteParser.RENAME_, 0);
    }
    ADD_() {
        return this.getToken(SQLiteParser.ADD_, 0);
    }
    column_def() {
        return this.getTypedRuleContext(Column_defContext, 0);
    }
    DROP_() {
        return this.getToken(SQLiteParser.DROP_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    TO_() {
        return this.getToken(SQLiteParser.TO_, 0);
    }
    COLUMN_() {
        return this.getToken(SQLiteParser.COLUMN_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAlter_table_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAlter_table_stmt(this);
        }
    }
}
class Analyze_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_analyze_stmt;
    }
    ANALYZE_() {
        return this.getToken(SQLiteParser.ANALYZE_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    table_or_index_name() {
        return this.getTypedRuleContext(Table_or_index_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAnalyze_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAnalyze_stmt(this);
        }
    }
}
class Attach_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_attach_stmt;
    }
    ATTACH_() {
        return this.getToken(SQLiteParser.ATTACH_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DATABASE_() {
        return this.getToken(SQLiteParser.DATABASE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAttach_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAttach_stmt(this);
        }
    }
}
class Begin_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_begin_stmt;
    }
    BEGIN_() {
        return this.getToken(SQLiteParser.BEGIN_, 0);
    }
    TRANSACTION_() {
        return this.getToken(SQLiteParser.TRANSACTION_, 0);
    }
    DEFERRED_() {
        return this.getToken(SQLiteParser.DEFERRED_, 0);
    }
    IMMEDIATE_() {
        return this.getToken(SQLiteParser.IMMEDIATE_, 0);
    }
    EXCLUSIVE_() {
        return this.getToken(SQLiteParser.EXCLUSIVE_, 0);
    }
    transaction_name() {
        return this.getTypedRuleContext(Transaction_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterBegin_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitBegin_stmt(this);
        }
    }
}
class Commit_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_commit_stmt;
    }
    COMMIT_() {
        return this.getToken(SQLiteParser.COMMIT_, 0);
    }
    END_() {
        return this.getToken(SQLiteParser.END_, 0);
    }
    TRANSACTION_() {
        return this.getToken(SQLiteParser.TRANSACTION_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCommit_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCommit_stmt(this);
        }
    }
}
class Rollback_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_rollback_stmt;
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    TRANSACTION_() {
        return this.getToken(SQLiteParser.TRANSACTION_, 0);
    }
    TO_() {
        return this.getToken(SQLiteParser.TO_, 0);
    }
    savepoint_name() {
        return this.getTypedRuleContext(Savepoint_nameContext, 0);
    }
    SAVEPOINT_() {
        return this.getToken(SQLiteParser.SAVEPOINT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterRollback_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitRollback_stmt(this);
        }
    }
}
class Savepoint_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_savepoint_stmt;
    }
    SAVEPOINT_() {
        return this.getToken(SQLiteParser.SAVEPOINT_, 0);
    }
    savepoint_name() {
        return this.getTypedRuleContext(Savepoint_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSavepoint_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSavepoint_stmt(this);
        }
    }
}
class Release_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_release_stmt;
    }
    RELEASE_() {
        return this.getToken(SQLiteParser.RELEASE_, 0);
    }
    savepoint_name() {
        return this.getTypedRuleContext(Savepoint_nameContext, 0);
    }
    SAVEPOINT_() {
        return this.getToken(SQLiteParser.SAVEPOINT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterRelease_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitRelease_stmt(this);
        }
    }
}
class Create_index_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.indexed_column = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Indexed_columnContext);
            }
            else {
                return this.getTypedRuleContext(Indexed_columnContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_index_stmt;
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    INDEX_() {
        return this.getToken(SQLiteParser.INDEX_, 0);
    }
    index_name() {
        return this.getTypedRuleContext(Index_nameContext, 0);
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    UNIQUE_() {
        return this.getToken(SQLiteParser.UNIQUE_, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCreate_index_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCreate_index_stmt(this);
        }
    }
}
class Indexed_columnContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_indexed_column;
    }
    column_name() {
        return this.getTypedRuleContext(Column_nameContext, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    COLLATE_() {
        return this.getToken(SQLiteParser.COLLATE_, 0);
    }
    collation_name() {
        return this.getTypedRuleContext(Collation_nameContext, 0);
    }
    asc_desc() {
        return this.getTypedRuleContext(Asc_descContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterIndexed_column(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitIndexed_column(this);
        }
    }
}
class Create_table_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_def = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_defContext);
            }
            else {
                return this.getTypedRuleContext(Column_defContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.table_constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_constraintContext);
            }
            else {
                return this.getTypedRuleContext(Table_constraintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_table_stmt;
        this.row_ROW_ID = null; // Token
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    TABLE_() {
        return this.getToken(SQLiteParser.TABLE_, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    TEMP_() {
        return this.getToken(SQLiteParser.TEMP_, 0);
    }
    TEMPORARY_() {
        return this.getToken(SQLiteParser.TEMPORARY_, 0);
    }
    WITHOUT_() {
        return this.getToken(SQLiteParser.WITHOUT_, 0);
    }
    IDENTIFIER() {
        return this.getToken(SQLiteParser.IDENTIFIER, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCreate_table_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCreate_table_stmt(this);
        }
    }
}
class Column_defContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_constraintContext);
            }
            else {
                return this.getTypedRuleContext(Column_constraintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_def;
    }
    column_name() {
        return this.getTypedRuleContext(Column_nameContext, 0);
    }
    type_name() {
        return this.getTypedRuleContext(Type_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterColumn_def(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitColumn_def(this);
        }
    }
}
class Type_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NameContext);
            }
            else {
                return this.getTypedRuleContext(NameContext, i);
            }
        };
        this.signed_number = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Signed_numberContext);
            }
            else {
                return this.getTypedRuleContext(Signed_numberContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_type_name;
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterType_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitType_name(this);
        }
    }
}
class Column_constraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_constraint;
    }
    CHECK_() {
        return this.getToken(SQLiteParser.CHECK_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    DEFAULT_() {
        return this.getToken(SQLiteParser.DEFAULT_, 0);
    }
    COLLATE_() {
        return this.getToken(SQLiteParser.COLLATE_, 0);
    }
    collation_name() {
        return this.getTypedRuleContext(Collation_nameContext, 0);
    }
    foreign_key_clause() {
        return this.getTypedRuleContext(Foreign_key_clauseContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    CONSTRAINT_() {
        return this.getToken(SQLiteParser.CONSTRAINT_, 0);
    }
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    PRIMARY_() {
        return this.getToken(SQLiteParser.PRIMARY_, 0);
    }
    KEY_() {
        return this.getToken(SQLiteParser.KEY_, 0);
    }
    NULL_() {
        return this.getToken(SQLiteParser.NULL_, 0);
    }
    UNIQUE_() {
        return this.getToken(SQLiteParser.UNIQUE_, 0);
    }
    signed_number() {
        return this.getTypedRuleContext(Signed_numberContext, 0);
    }
    literal_value() {
        return this.getTypedRuleContext(Literal_valueContext, 0);
    }
    conflict_clause() {
        return this.getTypedRuleContext(Conflict_clauseContext, 0);
    }
    GENERATED_() {
        return this.getToken(SQLiteParser.GENERATED_, 0);
    }
    ALWAYS_() {
        return this.getToken(SQLiteParser.ALWAYS_, 0);
    }
    STORED_() {
        return this.getToken(SQLiteParser.STORED_, 0);
    }
    VIRTUAL_() {
        return this.getToken(SQLiteParser.VIRTUAL_, 0);
    }
    asc_desc() {
        return this.getTypedRuleContext(Asc_descContext, 0);
    }
    AUTOINCREMENT_() {
        return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterColumn_constraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitColumn_constraint(this);
        }
    }
}
class Signed_numberContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_signed_number;
    }
    NUMERIC_LITERAL() {
        return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
    }
    PLUS() {
        return this.getToken(SQLiteParser.PLUS, 0);
    }
    MINUS() {
        return this.getToken(SQLiteParser.MINUS, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSigned_number(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSigned_number(this);
        }
    }
}
class Table_constraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.indexed_column = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Indexed_columnContext);
            }
            else {
                return this.getTypedRuleContext(Indexed_columnContext, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_constraint;
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    CHECK_() {
        return this.getToken(SQLiteParser.CHECK_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    FOREIGN_() {
        return this.getToken(SQLiteParser.FOREIGN_, 0);
    }
    KEY_() {
        return this.getToken(SQLiteParser.KEY_, 0);
    }
    foreign_key_clause() {
        return this.getTypedRuleContext(Foreign_key_clauseContext, 0);
    }
    CONSTRAINT_() {
        return this.getToken(SQLiteParser.CONSTRAINT_, 0);
    }
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    PRIMARY_() {
        return this.getToken(SQLiteParser.PRIMARY_, 0);
    }
    UNIQUE_() {
        return this.getToken(SQLiteParser.UNIQUE_, 0);
    }
    conflict_clause() {
        return this.getTypedRuleContext(Conflict_clauseContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_constraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_constraint(this);
        }
    }
}
class Foreign_key_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.ON_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ON_);
            }
            else {
                return this.getToken(SQLiteParser.ON_, i);
            }
        };
        this.MATCH_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.MATCH_);
            }
            else {
                return this.getToken(SQLiteParser.MATCH_, i);
            }
        };
        this.name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NameContext);
            }
            else {
                return this.getTypedRuleContext(NameContext, i);
            }
        };
        this.DELETE_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.DELETE_);
            }
            else {
                return this.getToken(SQLiteParser.DELETE_, i);
            }
        };
        this.UPDATE_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.UPDATE_);
            }
            else {
                return this.getToken(SQLiteParser.UPDATE_, i);
            }
        };
        this.SET_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.SET_);
            }
            else {
                return this.getToken(SQLiteParser.SET_, i);
            }
        };
        this.CASCADE_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CASCADE_);
            }
            else {
                return this.getToken(SQLiteParser.CASCADE_, i);
            }
        };
        this.RESTRICT_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.RESTRICT_);
            }
            else {
                return this.getToken(SQLiteParser.RESTRICT_, i);
            }
        };
        this.NO_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.NO_);
            }
            else {
                return this.getToken(SQLiteParser.NO_, i);
            }
        };
        this.ACTION_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ACTION_);
            }
            else {
                return this.getToken(SQLiteParser.ACTION_, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.NULL_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.NULL_);
            }
            else {
                return this.getToken(SQLiteParser.NULL_, i);
            }
        };
        this.DEFAULT_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.DEFAULT_);
            }
            else {
                return this.getToken(SQLiteParser.DEFAULT_, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_foreign_key_clause;
    }
    REFERENCES_() {
        return this.getToken(SQLiteParser.REFERENCES_, 0);
    }
    foreign_table() {
        return this.getTypedRuleContext(Foreign_tableContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    DEFERRABLE_() {
        return this.getToken(SQLiteParser.DEFERRABLE_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    INITIALLY_() {
        return this.getToken(SQLiteParser.INITIALLY_, 0);
    }
    DEFERRED_() {
        return this.getToken(SQLiteParser.DEFERRED_, 0);
    }
    IMMEDIATE_() {
        return this.getToken(SQLiteParser.IMMEDIATE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterForeign_key_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitForeign_key_clause(this);
        }
    }
}
class Conflict_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_conflict_clause;
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    CONFLICT_() {
        return this.getToken(SQLiteParser.CONFLICT_, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    REPLACE_() {
        return this.getToken(SQLiteParser.REPLACE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterConflict_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitConflict_clause(this);
        }
    }
}
class Create_trigger_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OF_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OF_);
            }
            else {
                return this.getToken(SQLiteParser.OF_, i);
            }
        };
        this.SCOL = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.SCOL);
            }
            else {
                return this.getToken(SQLiteParser.SCOL, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.update_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Update_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Update_stmtContext, i);
            }
        };
        this.insert_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Insert_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Insert_stmtContext, i);
            }
        };
        this.delete_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Delete_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Delete_stmtContext, i);
            }
        };
        this.select_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Select_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Select_stmtContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_trigger_stmt;
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    TRIGGER_() {
        return this.getToken(SQLiteParser.TRIGGER_, 0);
    }
    trigger_name() {
        return this.getTypedRuleContext(Trigger_nameContext, 0);
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    BEGIN_() {
        return this.getToken(SQLiteParser.BEGIN_, 0);
    }
    END_() {
        return this.getToken(SQLiteParser.END_, 0);
    }
    DELETE_() {
        return this.getToken(SQLiteParser.DELETE_, 0);
    }
    INSERT_() {
        return this.getToken(SQLiteParser.INSERT_, 0);
    }
    UPDATE_() {
        return this.getToken(SQLiteParser.UPDATE_, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    BEFORE_() {
        return this.getToken(SQLiteParser.BEFORE_, 0);
    }
    AFTER_() {
        return this.getToken(SQLiteParser.AFTER_, 0);
    }
    INSTEAD_() {
        return this.getToken(SQLiteParser.INSTEAD_, 0);
    }
    FOR_() {
        return this.getToken(SQLiteParser.FOR_, 0);
    }
    EACH_() {
        return this.getToken(SQLiteParser.EACH_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    WHEN_() {
        return this.getToken(SQLiteParser.WHEN_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    TEMP_() {
        return this.getToken(SQLiteParser.TEMP_, 0);
    }
    TEMPORARY_() {
        return this.getToken(SQLiteParser.TEMPORARY_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCreate_trigger_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCreate_trigger_stmt(this);
        }
    }
}
class Create_view_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_view_stmt;
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    VIEW_() {
        return this.getToken(SQLiteParser.VIEW_, 0);
    }
    view_name() {
        return this.getTypedRuleContext(View_nameContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    TEMP_() {
        return this.getToken(SQLiteParser.TEMP_, 0);
    }
    TEMPORARY_() {
        return this.getToken(SQLiteParser.TEMPORARY_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCreate_view_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCreate_view_stmt(this);
        }
    }
}
class Create_virtual_table_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.module_argument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Module_argumentContext);
            }
            else {
                return this.getTypedRuleContext(Module_argumentContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_create_virtual_table_stmt;
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    VIRTUAL_() {
        return this.getToken(SQLiteParser.VIRTUAL_, 0);
    }
    TABLE_() {
        return this.getToken(SQLiteParser.TABLE_, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    USING_() {
        return this.getToken(SQLiteParser.USING_, 0);
    }
    module_name() {
        return this.getTypedRuleContext(Module_nameContext, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCreate_virtual_table_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCreate_virtual_table_stmt(this);
        }
    }
}
class With_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cte_table_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Cte_table_nameContext);
            }
            else {
                return this.getTypedRuleContext(Cte_table_nameContext, i);
            }
        };
        this.AS_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.AS_);
            }
            else {
                return this.getToken(SQLiteParser.AS_, i);
            }
        };
        this.OPEN_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OPEN_PAR);
            }
            else {
                return this.getToken(SQLiteParser.OPEN_PAR, i);
            }
        };
        this.select_stmt = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Select_stmtContext);
            }
            else {
                return this.getTypedRuleContext(Select_stmtContext, i);
            }
        };
        this.CLOSE_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CLOSE_PAR);
            }
            else {
                return this.getToken(SQLiteParser.CLOSE_PAR, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_with_clause;
    }
    WITH_() {
        return this.getToken(SQLiteParser.WITH_, 0);
    }
    RECURSIVE_() {
        return this.getToken(SQLiteParser.RECURSIVE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterWith_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitWith_clause(this);
        }
    }
}
class Cte_table_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_cte_table_name;
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCte_table_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCte_table_name(this);
        }
    }
}
class Recursive_cteContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_recursive_cte;
    }
    cte_table_name() {
        return this.getTypedRuleContext(Cte_table_nameContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    initial_select() {
        return this.getTypedRuleContext(Initial_selectContext, 0);
    }
    UNION_() {
        return this.getToken(SQLiteParser.UNION_, 0);
    }
    recursive_select() {
        return this.getTypedRuleContext(Recursive_selectContext, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    ALL_() {
        return this.getToken(SQLiteParser.ALL_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterRecursive_cte(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitRecursive_cte(this);
        }
    }
}
class Common_table_expressionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OPEN_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OPEN_PAR);
            }
            else {
                return this.getToken(SQLiteParser.OPEN_PAR, i);
            }
        };
        this.CLOSE_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CLOSE_PAR);
            }
            else {
                return this.getToken(SQLiteParser.CLOSE_PAR, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_common_table_expression;
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCommon_table_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCommon_table_expression(this);
        }
    }
}
class Delete_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_delete_stmt;
    }
    DELETE_() {
        return this.getToken(SQLiteParser.DELETE_, 0);
    }
    FROM_() {
        return this.getToken(SQLiteParser.FROM_, 0);
    }
    qualified_table_name() {
        return this.getTypedRuleContext(Qualified_table_nameContext, 0);
    }
    with_clause() {
        return this.getTypedRuleContext(With_clauseContext, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    returning_clause() {
        return this.getTypedRuleContext(Returning_clauseContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterDelete_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitDelete_stmt(this);
        }
    }
}
class Delete_stmt_limitedContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_delete_stmt_limited;
    }
    DELETE_() {
        return this.getToken(SQLiteParser.DELETE_, 0);
    }
    FROM_() {
        return this.getToken(SQLiteParser.FROM_, 0);
    }
    qualified_table_name() {
        return this.getTypedRuleContext(Qualified_table_nameContext, 0);
    }
    with_clause() {
        return this.getTypedRuleContext(With_clauseContext, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    returning_clause() {
        return this.getTypedRuleContext(Returning_clauseContext, 0);
    }
    limit_stmt() {
        return this.getTypedRuleContext(Limit_stmtContext, 0);
    }
    order_by_stmt() {
        return this.getTypedRuleContext(Order_by_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterDelete_stmt_limited(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitDelete_stmt_limited(this);
        }
    }
}
class Detach_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_detach_stmt;
    }
    DETACH_() {
        return this.getToken(SQLiteParser.DETACH_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DATABASE_() {
        return this.getToken(SQLiteParser.DATABASE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterDetach_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitDetach_stmt(this);
        }
    }
}
class Drop_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_drop_stmt;
        this.object = null; // Token
    }
    DROP_() {
        return this.getToken(SQLiteParser.DROP_, 0);
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    INDEX_() {
        return this.getToken(SQLiteParser.INDEX_, 0);
    }
    TABLE_() {
        return this.getToken(SQLiteParser.TABLE_, 0);
    }
    TRIGGER_() {
        return this.getToken(SQLiteParser.TRIGGER_, 0);
    }
    VIEW_() {
        return this.getToken(SQLiteParser.VIEW_, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterDrop_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitDrop_stmt(this);
        }
    }
}
class ExprContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.DOT);
            }
            else {
                return this.getToken(SQLiteParser.DOT, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.WHEN_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.WHEN_);
            }
            else {
                return this.getToken(SQLiteParser.WHEN_, i);
            }
        };
        this.THEN_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.THEN_);
            }
            else {
                return this.getToken(SQLiteParser.THEN_, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_expr;
    }
    literal_value() {
        return this.getTypedRuleContext(Literal_valueContext, 0);
    }
    BIND_PARAMETER() {
        return this.getToken(SQLiteParser.BIND_PARAMETER, 0);
    }
    column_name() {
        return this.getTypedRuleContext(Column_nameContext, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    unary_operator() {
        return this.getTypedRuleContext(Unary_operatorContext, 0);
    }
    function_name() {
        return this.getTypedRuleContext(Function_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    STAR() {
        return this.getToken(SQLiteParser.STAR, 0);
    }
    filter_clause() {
        return this.getTypedRuleContext(Filter_clauseContext, 0);
    }
    over_clause() {
        return this.getTypedRuleContext(Over_clauseContext, 0);
    }
    DISTINCT_() {
        return this.getToken(SQLiteParser.DISTINCT_, 0);
    }
    CAST_() {
        return this.getToken(SQLiteParser.CAST_, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    type_name() {
        return this.getTypedRuleContext(Type_nameContext, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    CASE_() {
        return this.getToken(SQLiteParser.CASE_, 0);
    }
    END_() {
        return this.getToken(SQLiteParser.END_, 0);
    }
    ELSE_() {
        return this.getToken(SQLiteParser.ELSE_, 0);
    }
    raise_function() {
        return this.getTypedRuleContext(Raise_functionContext, 0);
    }
    PIPE2() {
        return this.getToken(SQLiteParser.PIPE2, 0);
    }
    DIV() {
        return this.getToken(SQLiteParser.DIV, 0);
    }
    MOD() {
        return this.getToken(SQLiteParser.MOD, 0);
    }
    PLUS() {
        return this.getToken(SQLiteParser.PLUS, 0);
    }
    MINUS() {
        return this.getToken(SQLiteParser.MINUS, 0);
    }
    LT2() {
        return this.getToken(SQLiteParser.LT2, 0);
    }
    GT2() {
        return this.getToken(SQLiteParser.GT2, 0);
    }
    AMP() {
        return this.getToken(SQLiteParser.AMP, 0);
    }
    PIPE() {
        return this.getToken(SQLiteParser.PIPE, 0);
    }
    LT() {
        return this.getToken(SQLiteParser.LT, 0);
    }
    LT_EQ() {
        return this.getToken(SQLiteParser.LT_EQ, 0);
    }
    GT() {
        return this.getToken(SQLiteParser.GT, 0);
    }
    GT_EQ() {
        return this.getToken(SQLiteParser.GT_EQ, 0);
    }
    ASSIGN() {
        return this.getToken(SQLiteParser.ASSIGN, 0);
    }
    EQ() {
        return this.getToken(SQLiteParser.EQ, 0);
    }
    NOT_EQ1() {
        return this.getToken(SQLiteParser.NOT_EQ1, 0);
    }
    NOT_EQ2() {
        return this.getToken(SQLiteParser.NOT_EQ2, 0);
    }
    IS_() {
        return this.getToken(SQLiteParser.IS_, 0);
    }
    IN_() {
        return this.getToken(SQLiteParser.IN_, 0);
    }
    LIKE_() {
        return this.getToken(SQLiteParser.LIKE_, 0);
    }
    GLOB_() {
        return this.getToken(SQLiteParser.GLOB_, 0);
    }
    MATCH_() {
        return this.getToken(SQLiteParser.MATCH_, 0);
    }
    REGEXP_() {
        return this.getToken(SQLiteParser.REGEXP_, 0);
    }
    AND_() {
        return this.getToken(SQLiteParser.AND_, 0);
    }
    OR_() {
        return this.getToken(SQLiteParser.OR_, 0);
    }
    BETWEEN_() {
        return this.getToken(SQLiteParser.BETWEEN_, 0);
    }
    COLLATE_() {
        return this.getToken(SQLiteParser.COLLATE_, 0);
    }
    collation_name() {
        return this.getTypedRuleContext(Collation_nameContext, 0);
    }
    ESCAPE_() {
        return this.getToken(SQLiteParser.ESCAPE_, 0);
    }
    ISNULL_() {
        return this.getToken(SQLiteParser.ISNULL_, 0);
    }
    NOTNULL_() {
        return this.getToken(SQLiteParser.NOTNULL_, 0);
    }
    NULL_() {
        return this.getToken(SQLiteParser.NULL_, 0);
    }
    table_function_name() {
        return this.getTypedRuleContext(Table_function_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterExpr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitExpr(this);
        }
    }
}
class Raise_functionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_raise_function;
    }
    RAISE_() {
        return this.getToken(SQLiteParser.RAISE_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    error_message() {
        return this.getTypedRuleContext(Error_messageContext, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterRaise_function(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitRaise_function(this);
        }
    }
}
class Literal_valueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_literal_value;
    }
    NUMERIC_LITERAL() {
        return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
    }
    STRING_LITERAL() {
        return this.getToken(SQLiteParser.STRING_LITERAL, 0);
    }
    BLOB_LITERAL() {
        return this.getToken(SQLiteParser.BLOB_LITERAL, 0);
    }
    NULL_() {
        return this.getToken(SQLiteParser.NULL_, 0);
    }
    TRUE_() {
        return this.getToken(SQLiteParser.TRUE_, 0);
    }
    FALSE_() {
        return this.getToken(SQLiteParser.FALSE_, 0);
    }
    CURRENT_TIME_() {
        return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
    }
    CURRENT_DATE_() {
        return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
    }
    CURRENT_TIMESTAMP_() {
        return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterLiteral_value(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitLiteral_value(this);
        }
    }
}
class Insert_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OPEN_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OPEN_PAR);
            }
            else {
                return this.getToken(SQLiteParser.OPEN_PAR, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.CLOSE_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CLOSE_PAR);
            }
            else {
                return this.getToken(SQLiteParser.CLOSE_PAR, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_insert_stmt;
    }
    INTO_() {
        return this.getToken(SQLiteParser.INTO_, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    INSERT_() {
        return this.getToken(SQLiteParser.INSERT_, 0);
    }
    REPLACE_() {
        return this.getToken(SQLiteParser.REPLACE_, 0);
    }
    OR_() {
        return this.getToken(SQLiteParser.OR_, 0);
    }
    DEFAULT_() {
        return this.getToken(SQLiteParser.DEFAULT_, 0);
    }
    VALUES_() {
        return this.getToken(SQLiteParser.VALUES_, 0);
    }
    with_clause() {
        return this.getTypedRuleContext(With_clauseContext, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    table_alias() {
        return this.getTypedRuleContext(Table_aliasContext, 0);
    }
    returning_clause() {
        return this.getTypedRuleContext(Returning_clauseContext, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    upsert_clause() {
        return this.getTypedRuleContext(Upsert_clauseContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterInsert_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitInsert_stmt(this);
        }
    }
}
class Returning_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.result_column = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Result_columnContext);
            }
            else {
                return this.getTypedRuleContext(Result_columnContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_returning_clause;
    }
    RETURNING_() {
        return this.getToken(SQLiteParser.RETURNING_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterReturning_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitReturning_clause(this);
        }
    }
}
class Upsert_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.indexed_column = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Indexed_columnContext);
            }
            else {
                return this.getTypedRuleContext(Indexed_columnContext, i);
            }
        };
        this.ASSIGN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ASSIGN);
            }
            else {
                return this.getToken(SQLiteParser.ASSIGN, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.WHERE_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.WHERE_);
            }
            else {
                return this.getToken(SQLiteParser.WHERE_, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.column_name_list = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_name_listContext);
            }
            else {
                return this.getTypedRuleContext(Column_name_listContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_upsert_clause;
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    CONFLICT_() {
        return this.getToken(SQLiteParser.CONFLICT_, 0);
    }
    DO_() {
        return this.getToken(SQLiteParser.DO_, 0);
    }
    NOTHING_() {
        return this.getToken(SQLiteParser.NOTHING_, 0);
    }
    UPDATE_() {
        return this.getToken(SQLiteParser.UPDATE_, 0);
    }
    SET_() {
        return this.getToken(SQLiteParser.SET_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterUpsert_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitUpsert_clause(this);
        }
    }
}
class Pragma_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_stmt;
    }
    PRAGMA_() {
        return this.getToken(SQLiteParser.PRAGMA_, 0);
    }
    pragma_name() {
        return this.getTypedRuleContext(Pragma_nameContext, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    ASSIGN() {
        return this.getToken(SQLiteParser.ASSIGN, 0);
    }
    pragma_value() {
        return this.getTypedRuleContext(Pragma_valueContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterPragma_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitPragma_stmt(this);
        }
    }
}
class Pragma_valueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_value;
    }
    signed_number() {
        return this.getTypedRuleContext(Signed_numberContext, 0);
    }
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    STRING_LITERAL() {
        return this.getToken(SQLiteParser.STRING_LITERAL, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterPragma_value(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitPragma_value(this);
        }
    }
}
class Reindex_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_reindex_stmt;
    }
    REINDEX_() {
        return this.getToken(SQLiteParser.REINDEX_, 0);
    }
    collation_name() {
        return this.getTypedRuleContext(Collation_nameContext, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    index_name() {
        return this.getTypedRuleContext(Index_nameContext, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterReindex_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitReindex_stmt(this);
        }
    }
}
class Select_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.select_core = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Select_coreContext);
            }
            else {
                return this.getTypedRuleContext(Select_coreContext, i);
            }
        };
        this.compound_operator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Compound_operatorContext);
            }
            else {
                return this.getTypedRuleContext(Compound_operatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_select_stmt;
    }
    common_table_stmt() {
        return this.getTypedRuleContext(Common_table_stmtContext, 0);
    }
    order_by_stmt() {
        return this.getTypedRuleContext(Order_by_stmtContext, 0);
    }
    limit_stmt() {
        return this.getTypedRuleContext(Limit_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSelect_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSelect_stmt(this);
        }
    }
}
class Join_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.table_or_subquery = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_or_subqueryContext);
            }
            else {
                return this.getTypedRuleContext(Table_or_subqueryContext, i);
            }
        };
        this.join_operator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Join_operatorContext);
            }
            else {
                return this.getTypedRuleContext(Join_operatorContext, i);
            }
        };
        this.join_constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Join_constraintContext);
            }
            else {
                return this.getTypedRuleContext(Join_constraintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_clause;
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterJoin_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitJoin_clause(this);
        }
    }
}
class Select_coreContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.result_column = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Result_columnContext);
            }
            else {
                return this.getTypedRuleContext(Result_columnContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.window_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Window_nameContext);
            }
            else {
                return this.getTypedRuleContext(Window_nameContext, i);
            }
        };
        this.AS_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.AS_);
            }
            else {
                return this.getToken(SQLiteParser.AS_, i);
            }
        };
        this.window_defn = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Window_defnContext);
            }
            else {
                return this.getTypedRuleContext(Window_defnContext, i);
            }
        };
        this.table_or_subquery = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_or_subqueryContext);
            }
            else {
                return this.getTypedRuleContext(Table_or_subqueryContext, i);
            }
        };
        this.OPEN_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OPEN_PAR);
            }
            else {
                return this.getToken(SQLiteParser.OPEN_PAR, i);
            }
        };
        this.CLOSE_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CLOSE_PAR);
            }
            else {
                return this.getToken(SQLiteParser.CLOSE_PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_select_core;
    }
    SELECT_() {
        return this.getToken(SQLiteParser.SELECT_, 0);
    }
    FROM_() {
        return this.getToken(SQLiteParser.FROM_, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    GROUP_() {
        return this.getToken(SQLiteParser.GROUP_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    WINDOW_() {
        return this.getToken(SQLiteParser.WINDOW_, 0);
    }
    DISTINCT_() {
        return this.getToken(SQLiteParser.DISTINCT_, 0);
    }
    ALL_() {
        return this.getToken(SQLiteParser.ALL_, 0);
    }
    join_clause() {
        return this.getTypedRuleContext(Join_clauseContext, 0);
    }
    HAVING_() {
        return this.getToken(SQLiteParser.HAVING_, 0);
    }
    VALUES_() {
        return this.getToken(SQLiteParser.VALUES_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSelect_core(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSelect_core(this);
        }
    }
}
class Factored_select_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_factored_select_stmt;
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFactored_select_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFactored_select_stmt(this);
        }
    }
}
class Simple_select_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_select_stmt;
    }
    select_core() {
        return this.getTypedRuleContext(Select_coreContext, 0);
    }
    common_table_stmt() {
        return this.getTypedRuleContext(Common_table_stmtContext, 0);
    }
    order_by_stmt() {
        return this.getTypedRuleContext(Order_by_stmtContext, 0);
    }
    limit_stmt() {
        return this.getTypedRuleContext(Limit_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSimple_select_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSimple_select_stmt(this);
        }
    }
}
class Compound_select_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.select_core = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Select_coreContext);
            }
            else {
                return this.getTypedRuleContext(Select_coreContext, i);
            }
        };
        this.UNION_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.UNION_);
            }
            else {
                return this.getToken(SQLiteParser.UNION_, i);
            }
        };
        this.INTERSECT_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.INTERSECT_);
            }
            else {
                return this.getToken(SQLiteParser.INTERSECT_, i);
            }
        };
        this.EXCEPT_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.EXCEPT_);
            }
            else {
                return this.getToken(SQLiteParser.EXCEPT_, i);
            }
        };
        this.ALL_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ALL_);
            }
            else {
                return this.getToken(SQLiteParser.ALL_, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_compound_select_stmt;
    }
    common_table_stmt() {
        return this.getTypedRuleContext(Common_table_stmtContext, 0);
    }
    order_by_stmt() {
        return this.getTypedRuleContext(Order_by_stmtContext, 0);
    }
    limit_stmt() {
        return this.getTypedRuleContext(Limit_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCompound_select_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCompound_select_stmt(this);
        }
    }
}
class Table_or_subqueryContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.table_or_subquery = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_or_subqueryContext);
            }
            else {
                return this.getTypedRuleContext(Table_or_subqueryContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_or_subquery;
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    table_alias() {
        return this.getTypedRuleContext(Table_aliasContext, 0);
    }
    INDEXED_() {
        return this.getToken(SQLiteParser.INDEXED_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    index_name() {
        return this.getTypedRuleContext(Index_nameContext, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    table_function_name() {
        return this.getTypedRuleContext(Table_function_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    join_clause() {
        return this.getTypedRuleContext(Join_clauseContext, 0);
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_or_subquery(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_or_subquery(this);
        }
    }
}
class Result_columnContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_result_column;
    }
    STAR() {
        return this.getToken(SQLiteParser.STAR, 0);
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    column_alias() {
        return this.getTypedRuleContext(Column_aliasContext, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterResult_column(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitResult_column(this);
        }
    }
}
class Join_operatorContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_operator;
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    JOIN_() {
        return this.getToken(SQLiteParser.JOIN_, 0);
    }
    NATURAL_() {
        return this.getToken(SQLiteParser.NATURAL_, 0);
    }
    LEFT_() {
        return this.getToken(SQLiteParser.LEFT_, 0);
    }
    INNER_() {
        return this.getToken(SQLiteParser.INNER_, 0);
    }
    CROSS_() {
        return this.getToken(SQLiteParser.CROSS_, 0);
    }
    OUTER_() {
        return this.getToken(SQLiteParser.OUTER_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterJoin_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitJoin_operator(this);
        }
    }
}
class Join_constraintContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_join_constraint;
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    USING_() {
        return this.getToken(SQLiteParser.USING_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterJoin_constraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitJoin_constraint(this);
        }
    }
}
class Compound_operatorContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_compound_operator;
    }
    UNION_() {
        return this.getToken(SQLiteParser.UNION_, 0);
    }
    ALL_() {
        return this.getToken(SQLiteParser.ALL_, 0);
    }
    INTERSECT_() {
        return this.getToken(SQLiteParser.INTERSECT_, 0);
    }
    EXCEPT_() {
        return this.getToken(SQLiteParser.EXCEPT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCompound_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCompound_operator(this);
        }
    }
}
class Update_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ASSIGN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ASSIGN);
            }
            else {
                return this.getToken(SQLiteParser.ASSIGN, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.column_name_list = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_name_listContext);
            }
            else {
                return this.getTypedRuleContext(Column_name_listContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.table_or_subquery = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Table_or_subqueryContext);
            }
            else {
                return this.getTypedRuleContext(Table_or_subqueryContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_update_stmt;
    }
    UPDATE_() {
        return this.getToken(SQLiteParser.UPDATE_, 0);
    }
    qualified_table_name() {
        return this.getTypedRuleContext(Qualified_table_nameContext, 0);
    }
    SET_() {
        return this.getToken(SQLiteParser.SET_, 0);
    }
    with_clause() {
        return this.getTypedRuleContext(With_clauseContext, 0);
    }
    OR_() {
        return this.getToken(SQLiteParser.OR_, 0);
    }
    FROM_() {
        return this.getToken(SQLiteParser.FROM_, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    returning_clause() {
        return this.getTypedRuleContext(Returning_clauseContext, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    REPLACE_() {
        return this.getToken(SQLiteParser.REPLACE_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    join_clause() {
        return this.getTypedRuleContext(Join_clauseContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterUpdate_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitUpdate_stmt(this);
        }
    }
}
class Column_name_listContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_name_list;
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterColumn_name_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitColumn_name_list(this);
        }
    }
}
class Update_stmt_limitedContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ASSIGN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.ASSIGN);
            }
            else {
                return this.getToken(SQLiteParser.ASSIGN, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.column_name = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_nameContext);
            }
            else {
                return this.getTypedRuleContext(Column_nameContext, i);
            }
        };
        this.column_name_list = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Column_name_listContext);
            }
            else {
                return this.getTypedRuleContext(Column_name_listContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_update_stmt_limited;
    }
    UPDATE_() {
        return this.getToken(SQLiteParser.UPDATE_, 0);
    }
    qualified_table_name() {
        return this.getTypedRuleContext(Qualified_table_nameContext, 0);
    }
    SET_() {
        return this.getToken(SQLiteParser.SET_, 0);
    }
    with_clause() {
        return this.getTypedRuleContext(With_clauseContext, 0);
    }
    OR_() {
        return this.getToken(SQLiteParser.OR_, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    returning_clause() {
        return this.getTypedRuleContext(Returning_clauseContext, 0);
    }
    limit_stmt() {
        return this.getTypedRuleContext(Limit_stmtContext, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    REPLACE_() {
        return this.getToken(SQLiteParser.REPLACE_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    order_by_stmt() {
        return this.getTypedRuleContext(Order_by_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterUpdate_stmt_limited(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitUpdate_stmt_limited(this);
        }
    }
}
class Qualified_table_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_qualified_table_name;
    }
    table_name() {
        return this.getTypedRuleContext(Table_nameContext, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    DOT() {
        return this.getToken(SQLiteParser.DOT, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    alias() {
        return this.getTypedRuleContext(AliasContext, 0);
    }
    INDEXED_() {
        return this.getToken(SQLiteParser.INDEXED_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    index_name() {
        return this.getTypedRuleContext(Index_nameContext, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterQualified_table_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitQualified_table_name(this);
        }
    }
}
class Vacuum_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_vacuum_stmt;
    }
    VACUUM_() {
        return this.getToken(SQLiteParser.VACUUM_, 0);
    }
    schema_name() {
        return this.getTypedRuleContext(Schema_nameContext, 0);
    }
    INTO_() {
        return this.getToken(SQLiteParser.INTO_, 0);
    }
    filename() {
        return this.getTypedRuleContext(FilenameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterVacuum_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitVacuum_stmt(this);
        }
    }
}
class Filter_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_filter_clause;
    }
    FILTER_() {
        return this.getToken(SQLiteParser.FILTER_, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFilter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFilter_clause(this);
        }
    }
}
class Window_defnContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.BY_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.BY_);
            }
            else {
                return this.getToken(SQLiteParser.BY_, i);
            }
        };
        this.ordering_term = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Ordering_termContext);
            }
            else {
                return this.getTypedRuleContext(Ordering_termContext, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_defn;
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    base_window_name() {
        return this.getTypedRuleContext(Base_window_nameContext, 0);
    }
    PARTITION_() {
        return this.getToken(SQLiteParser.PARTITION_, 0);
    }
    frame_spec() {
        return this.getTypedRuleContext(Frame_specContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterWindow_defn(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitWindow_defn(this);
        }
    }
}
class Over_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.BY_ = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.BY_);
            }
            else {
                return this.getToken(SQLiteParser.BY_, i);
            }
        };
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.ordering_term = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Ordering_termContext);
            }
            else {
                return this.getTypedRuleContext(Ordering_termContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_over_clause;
    }
    OVER_() {
        return this.getToken(SQLiteParser.OVER_, 0);
    }
    window_name() {
        return this.getTypedRuleContext(Window_nameContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    base_window_name() {
        return this.getTypedRuleContext(Base_window_nameContext, 0);
    }
    PARTITION_() {
        return this.getToken(SQLiteParser.PARTITION_, 0);
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    frame_spec() {
        return this.getTypedRuleContext(Frame_specContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOver_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOver_clause(this);
        }
    }
}
class Frame_specContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_spec;
    }
    frame_clause() {
        return this.getTypedRuleContext(Frame_clauseContext, 0);
    }
    EXCLUDE_() {
        return this.getToken(SQLiteParser.EXCLUDE_, 0);
    }
    CURRENT_() {
        return this.getToken(SQLiteParser.CURRENT_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    GROUP_() {
        return this.getToken(SQLiteParser.GROUP_, 0);
    }
    TIES_() {
        return this.getToken(SQLiteParser.TIES_, 0);
    }
    NO_() {
        return this.getToken(SQLiteParser.NO_, 0);
    }
    OTHERS_() {
        return this.getToken(SQLiteParser.OTHERS_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFrame_spec(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFrame_spec(this);
        }
    }
}
class Frame_clauseContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_clause;
    }
    RANGE_() {
        return this.getToken(SQLiteParser.RANGE_, 0);
    }
    ROWS_() {
        return this.getToken(SQLiteParser.ROWS_, 0);
    }
    GROUPS_() {
        return this.getToken(SQLiteParser.GROUPS_, 0);
    }
    frame_single() {
        return this.getTypedRuleContext(Frame_singleContext, 0);
    }
    BETWEEN_() {
        return this.getToken(SQLiteParser.BETWEEN_, 0);
    }
    frame_left() {
        return this.getTypedRuleContext(Frame_leftContext, 0);
    }
    AND_() {
        return this.getToken(SQLiteParser.AND_, 0);
    }
    frame_right() {
        return this.getTypedRuleContext(Frame_rightContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFrame_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFrame_clause(this);
        }
    }
}
class Simple_function_invocationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_function_invocation;
    }
    simple_func() {
        return this.getTypedRuleContext(Simple_funcContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    STAR() {
        return this.getToken(SQLiteParser.STAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSimple_function_invocation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSimple_function_invocation(this);
        }
    }
}
class Aggregate_function_invocationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_aggregate_function_invocation;
    }
    aggregate_func() {
        return this.getTypedRuleContext(Aggregate_funcContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    STAR() {
        return this.getToken(SQLiteParser.STAR, 0);
    }
    filter_clause() {
        return this.getTypedRuleContext(Filter_clauseContext, 0);
    }
    DISTINCT_() {
        return this.getToken(SQLiteParser.DISTINCT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAggregate_function_invocation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAggregate_function_invocation(this);
        }
    }
}
class Window_function_invocationContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_function_invocation;
    }
    window_function() {
        return this.getTypedRuleContext(Window_functionContext, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    OVER_() {
        return this.getToken(SQLiteParser.OVER_, 0);
    }
    window_defn() {
        return this.getTypedRuleContext(Window_defnContext, 0);
    }
    window_name() {
        return this.getTypedRuleContext(Window_nameContext, 0);
    }
    STAR() {
        return this.getToken(SQLiteParser.STAR, 0);
    }
    filter_clause() {
        return this.getTypedRuleContext(Filter_clauseContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterWindow_function_invocation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitWindow_function_invocation(this);
        }
    }
}
class Common_table_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.common_table_expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Common_table_expressionContext);
            }
            else {
                return this.getTypedRuleContext(Common_table_expressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_common_table_stmt;
    }
    WITH_() {
        return this.getToken(SQLiteParser.WITH_, 0);
    }
    RECURSIVE_() {
        return this.getToken(SQLiteParser.RECURSIVE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCommon_table_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCommon_table_stmt(this);
        }
    }
}
class Order_by_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ordering_term = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Ordering_termContext);
            }
            else {
                return this.getTypedRuleContext(Ordering_termContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_stmt;
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOrder_by_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOrder_by_stmt(this);
        }
    }
}
class Limit_stmtContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_limit_stmt;
    }
    LIMIT_() {
        return this.getToken(SQLiteParser.LIMIT_, 0);
    }
    OFFSET_() {
        return this.getToken(SQLiteParser.OFFSET_, 0);
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterLimit_stmt(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitLimit_stmt(this);
        }
    }
}
class Ordering_termContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_ordering_term;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    COLLATE_() {
        return this.getToken(SQLiteParser.COLLATE_, 0);
    }
    collation_name() {
        return this.getTypedRuleContext(Collation_nameContext, 0);
    }
    asc_desc() {
        return this.getTypedRuleContext(Asc_descContext, 0);
    }
    NULLS_() {
        return this.getToken(SQLiteParser.NULLS_, 0);
    }
    FIRST_() {
        return this.getToken(SQLiteParser.FIRST_, 0);
    }
    LAST_() {
        return this.getToken(SQLiteParser.LAST_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOrdering_term(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOrdering_term(this);
        }
    }
}
class Asc_descContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_asc_desc;
    }
    ASC_() {
        return this.getToken(SQLiteParser.ASC_, 0);
    }
    DESC_() {
        return this.getToken(SQLiteParser.DESC_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAsc_desc(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAsc_desc(this);
        }
    }
}
class Frame_leftContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_left;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    PRECEDING_() {
        return this.getToken(SQLiteParser.PRECEDING_, 0);
    }
    FOLLOWING_() {
        return this.getToken(SQLiteParser.FOLLOWING_, 0);
    }
    CURRENT_() {
        return this.getToken(SQLiteParser.CURRENT_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    UNBOUNDED_() {
        return this.getToken(SQLiteParser.UNBOUNDED_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFrame_left(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFrame_left(this);
        }
    }
}
class Frame_rightContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_right;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    PRECEDING_() {
        return this.getToken(SQLiteParser.PRECEDING_, 0);
    }
    FOLLOWING_() {
        return this.getToken(SQLiteParser.FOLLOWING_, 0);
    }
    CURRENT_() {
        return this.getToken(SQLiteParser.CURRENT_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    UNBOUNDED_() {
        return this.getToken(SQLiteParser.UNBOUNDED_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFrame_right(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFrame_right(this);
        }
    }
}
class Frame_singleContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_frame_single;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    PRECEDING_() {
        return this.getToken(SQLiteParser.PRECEDING_, 0);
    }
    UNBOUNDED_() {
        return this.getToken(SQLiteParser.UNBOUNDED_, 0);
    }
    CURRENT_() {
        return this.getToken(SQLiteParser.CURRENT_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFrame_single(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFrame_single(this);
        }
    }
}
class Window_functionContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OPEN_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.OPEN_PAR);
            }
            else {
                return this.getToken(SQLiteParser.OPEN_PAR, i);
            }
        };
        this.CLOSE_PAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.CLOSE_PAR);
            }
            else {
                return this.getToken(SQLiteParser.CLOSE_PAR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_function;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    OVER_() {
        return this.getToken(SQLiteParser.OVER_, 0);
    }
    order_by_expr_asc_desc() {
        return this.getTypedRuleContext(Order_by_expr_asc_descContext, 0);
    }
    FIRST_VALUE_() {
        return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
    }
    LAST_VALUE_() {
        return this.getToken(SQLiteParser.LAST_VALUE_, 0);
    }
    partition_by() {
        return this.getTypedRuleContext(Partition_byContext, 0);
    }
    frame_clause() {
        return this.getTypedRuleContext(Frame_clauseContext, 0);
    }
    CUME_DIST_() {
        return this.getToken(SQLiteParser.CUME_DIST_, 0);
    }
    PERCENT_RANK_() {
        return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
    }
    order_by_expr() {
        return this.getTypedRuleContext(Order_by_exprContext, 0);
    }
    DENSE_RANK_() {
        return this.getToken(SQLiteParser.DENSE_RANK_, 0);
    }
    RANK_() {
        return this.getToken(SQLiteParser.RANK_, 0);
    }
    ROW_NUMBER_() {
        return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
    }
    LAG_() {
        return this.getToken(SQLiteParser.LAG_, 0);
    }
    LEAD_() {
        return this.getToken(SQLiteParser.LEAD_, 0);
    }
    offset() {
        return this.getTypedRuleContext(OffsetContext, 0);
    }
    default_value() {
        return this.getTypedRuleContext(Default_valueContext, 0);
    }
    NTH_VALUE_() {
        return this.getToken(SQLiteParser.NTH_VALUE_, 0);
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    signed_number() {
        return this.getTypedRuleContext(Signed_numberContext, 0);
    }
    NTILE_() {
        return this.getToken(SQLiteParser.NTILE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterWindow_function(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitWindow_function(this);
        }
    }
}
class OffsetContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_offset;
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    signed_number() {
        return this.getTypedRuleContext(Signed_numberContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOffset(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOffset(this);
        }
    }
}
class Default_valueContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_default_value;
    }
    COMMA() {
        return this.getToken(SQLiteParser.COMMA, 0);
    }
    signed_number() {
        return this.getTypedRuleContext(Signed_numberContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterDefault_value(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitDefault_value(this);
        }
    }
}
class Partition_byContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_partition_by;
    }
    PARTITION_() {
        return this.getToken(SQLiteParser.PARTITION_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterPartition_by(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitPartition_by(this);
        }
    }
}
class Order_by_exprContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_expr;
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOrder_by_expr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOrder_by_expr(this);
        }
    }
}
class Order_by_expr_asc_descContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_order_by_expr_asc_desc;
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    expr_asc_desc() {
        return this.getTypedRuleContext(Expr_asc_descContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterOrder_by_expr_asc_desc(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitOrder_by_expr_asc_desc(this);
        }
    }
}
class Expr_asc_descContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExprContext);
            }
            else {
                return this.getTypedRuleContext(ExprContext, i);
            }
        };
        this.asc_desc = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(Asc_descContext);
            }
            else {
                return this.getTypedRuleContext(Asc_descContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(SQLiteParser.COMMA);
            }
            else {
                return this.getToken(SQLiteParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_expr_asc_desc;
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterExpr_asc_desc(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitExpr_asc_desc(this);
        }
    }
}
class Initial_selectContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_initial_select;
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterInitial_select(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitInitial_select(this);
        }
    }
}
class Recursive_selectContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_recursive_select;
    }
    select_stmt() {
        return this.getTypedRuleContext(Select_stmtContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterRecursive_select(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitRecursive_select(this);
        }
    }
}
class Unary_operatorContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_unary_operator;
    }
    MINUS() {
        return this.getToken(SQLiteParser.MINUS, 0);
    }
    PLUS() {
        return this.getToken(SQLiteParser.PLUS, 0);
    }
    TILDE() {
        return this.getToken(SQLiteParser.TILDE, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterUnary_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitUnary_operator(this);
        }
    }
}
class Error_messageContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_error_message;
    }
    STRING_LITERAL() {
        return this.getToken(SQLiteParser.STRING_LITERAL, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterError_message(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitError_message(this);
        }
    }
}
class Module_argumentContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_module_argument;
    }
    expr() {
        return this.getTypedRuleContext(ExprContext, 0);
    }
    column_def() {
        return this.getTypedRuleContext(Column_defContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterModule_argument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitModule_argument(this);
        }
    }
}
class Column_aliasContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_alias;
    }
    IDENTIFIER() {
        return this.getToken(SQLiteParser.IDENTIFIER, 0);
    }
    STRING_LITERAL() {
        return this.getToken(SQLiteParser.STRING_LITERAL, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterColumn_alias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitColumn_alias(this);
        }
    }
}
class KeywordContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_keyword;
    }
    ABORT_() {
        return this.getToken(SQLiteParser.ABORT_, 0);
    }
    ACTION_() {
        return this.getToken(SQLiteParser.ACTION_, 0);
    }
    ADD_() {
        return this.getToken(SQLiteParser.ADD_, 0);
    }
    AFTER_() {
        return this.getToken(SQLiteParser.AFTER_, 0);
    }
    ALL_() {
        return this.getToken(SQLiteParser.ALL_, 0);
    }
    ALTER_() {
        return this.getToken(SQLiteParser.ALTER_, 0);
    }
    ANALYZE_() {
        return this.getToken(SQLiteParser.ANALYZE_, 0);
    }
    AND_() {
        return this.getToken(SQLiteParser.AND_, 0);
    }
    AS_() {
        return this.getToken(SQLiteParser.AS_, 0);
    }
    ASC_() {
        return this.getToken(SQLiteParser.ASC_, 0);
    }
    ATTACH_() {
        return this.getToken(SQLiteParser.ATTACH_, 0);
    }
    AUTOINCREMENT_() {
        return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
    }
    BEFORE_() {
        return this.getToken(SQLiteParser.BEFORE_, 0);
    }
    BEGIN_() {
        return this.getToken(SQLiteParser.BEGIN_, 0);
    }
    BETWEEN_() {
        return this.getToken(SQLiteParser.BETWEEN_, 0);
    }
    BY_() {
        return this.getToken(SQLiteParser.BY_, 0);
    }
    CASCADE_() {
        return this.getToken(SQLiteParser.CASCADE_, 0);
    }
    CASE_() {
        return this.getToken(SQLiteParser.CASE_, 0);
    }
    CAST_() {
        return this.getToken(SQLiteParser.CAST_, 0);
    }
    CHECK_() {
        return this.getToken(SQLiteParser.CHECK_, 0);
    }
    COLLATE_() {
        return this.getToken(SQLiteParser.COLLATE_, 0);
    }
    COLUMN_() {
        return this.getToken(SQLiteParser.COLUMN_, 0);
    }
    COMMIT_() {
        return this.getToken(SQLiteParser.COMMIT_, 0);
    }
    CONFLICT_() {
        return this.getToken(SQLiteParser.CONFLICT_, 0);
    }
    CONSTRAINT_() {
        return this.getToken(SQLiteParser.CONSTRAINT_, 0);
    }
    CREATE_() {
        return this.getToken(SQLiteParser.CREATE_, 0);
    }
    CROSS_() {
        return this.getToken(SQLiteParser.CROSS_, 0);
    }
    CURRENT_DATE_() {
        return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
    }
    CURRENT_TIME_() {
        return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
    }
    CURRENT_TIMESTAMP_() {
        return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
    }
    DATABASE_() {
        return this.getToken(SQLiteParser.DATABASE_, 0);
    }
    DEFAULT_() {
        return this.getToken(SQLiteParser.DEFAULT_, 0);
    }
    DEFERRABLE_() {
        return this.getToken(SQLiteParser.DEFERRABLE_, 0);
    }
    DEFERRED_() {
        return this.getToken(SQLiteParser.DEFERRED_, 0);
    }
    DELETE_() {
        return this.getToken(SQLiteParser.DELETE_, 0);
    }
    DESC_() {
        return this.getToken(SQLiteParser.DESC_, 0);
    }
    DETACH_() {
        return this.getToken(SQLiteParser.DETACH_, 0);
    }
    DISTINCT_() {
        return this.getToken(SQLiteParser.DISTINCT_, 0);
    }
    DROP_() {
        return this.getToken(SQLiteParser.DROP_, 0);
    }
    EACH_() {
        return this.getToken(SQLiteParser.EACH_, 0);
    }
    ELSE_() {
        return this.getToken(SQLiteParser.ELSE_, 0);
    }
    END_() {
        return this.getToken(SQLiteParser.END_, 0);
    }
    ESCAPE_() {
        return this.getToken(SQLiteParser.ESCAPE_, 0);
    }
    EXCEPT_() {
        return this.getToken(SQLiteParser.EXCEPT_, 0);
    }
    EXCLUSIVE_() {
        return this.getToken(SQLiteParser.EXCLUSIVE_, 0);
    }
    EXISTS_() {
        return this.getToken(SQLiteParser.EXISTS_, 0);
    }
    EXPLAIN_() {
        return this.getToken(SQLiteParser.EXPLAIN_, 0);
    }
    FAIL_() {
        return this.getToken(SQLiteParser.FAIL_, 0);
    }
    FOR_() {
        return this.getToken(SQLiteParser.FOR_, 0);
    }
    FOREIGN_() {
        return this.getToken(SQLiteParser.FOREIGN_, 0);
    }
    FROM_() {
        return this.getToken(SQLiteParser.FROM_, 0);
    }
    FULL_() {
        return this.getToken(SQLiteParser.FULL_, 0);
    }
    GLOB_() {
        return this.getToken(SQLiteParser.GLOB_, 0);
    }
    GROUP_() {
        return this.getToken(SQLiteParser.GROUP_, 0);
    }
    HAVING_() {
        return this.getToken(SQLiteParser.HAVING_, 0);
    }
    IF_() {
        return this.getToken(SQLiteParser.IF_, 0);
    }
    IGNORE_() {
        return this.getToken(SQLiteParser.IGNORE_, 0);
    }
    IMMEDIATE_() {
        return this.getToken(SQLiteParser.IMMEDIATE_, 0);
    }
    IN_() {
        return this.getToken(SQLiteParser.IN_, 0);
    }
    INDEX_() {
        return this.getToken(SQLiteParser.INDEX_, 0);
    }
    INDEXED_() {
        return this.getToken(SQLiteParser.INDEXED_, 0);
    }
    INITIALLY_() {
        return this.getToken(SQLiteParser.INITIALLY_, 0);
    }
    INNER_() {
        return this.getToken(SQLiteParser.INNER_, 0);
    }
    INSERT_() {
        return this.getToken(SQLiteParser.INSERT_, 0);
    }
    INSTEAD_() {
        return this.getToken(SQLiteParser.INSTEAD_, 0);
    }
    INTERSECT_() {
        return this.getToken(SQLiteParser.INTERSECT_, 0);
    }
    INTO_() {
        return this.getToken(SQLiteParser.INTO_, 0);
    }
    IS_() {
        return this.getToken(SQLiteParser.IS_, 0);
    }
    ISNULL_() {
        return this.getToken(SQLiteParser.ISNULL_, 0);
    }
    JOIN_() {
        return this.getToken(SQLiteParser.JOIN_, 0);
    }
    KEY_() {
        return this.getToken(SQLiteParser.KEY_, 0);
    }
    LEFT_() {
        return this.getToken(SQLiteParser.LEFT_, 0);
    }
    LIKE_() {
        return this.getToken(SQLiteParser.LIKE_, 0);
    }
    LIMIT_() {
        return this.getToken(SQLiteParser.LIMIT_, 0);
    }
    MATCH_() {
        return this.getToken(SQLiteParser.MATCH_, 0);
    }
    NATURAL_() {
        return this.getToken(SQLiteParser.NATURAL_, 0);
    }
    NO_() {
        return this.getToken(SQLiteParser.NO_, 0);
    }
    NOT_() {
        return this.getToken(SQLiteParser.NOT_, 0);
    }
    NOTNULL_() {
        return this.getToken(SQLiteParser.NOTNULL_, 0);
    }
    NULL_() {
        return this.getToken(SQLiteParser.NULL_, 0);
    }
    OF_() {
        return this.getToken(SQLiteParser.OF_, 0);
    }
    OFFSET_() {
        return this.getToken(SQLiteParser.OFFSET_, 0);
    }
    ON_() {
        return this.getToken(SQLiteParser.ON_, 0);
    }
    OR_() {
        return this.getToken(SQLiteParser.OR_, 0);
    }
    ORDER_() {
        return this.getToken(SQLiteParser.ORDER_, 0);
    }
    OUTER_() {
        return this.getToken(SQLiteParser.OUTER_, 0);
    }
    PLAN_() {
        return this.getToken(SQLiteParser.PLAN_, 0);
    }
    PRAGMA_() {
        return this.getToken(SQLiteParser.PRAGMA_, 0);
    }
    PRIMARY_() {
        return this.getToken(SQLiteParser.PRIMARY_, 0);
    }
    QUERY_() {
        return this.getToken(SQLiteParser.QUERY_, 0);
    }
    RAISE_() {
        return this.getToken(SQLiteParser.RAISE_, 0);
    }
    RECURSIVE_() {
        return this.getToken(SQLiteParser.RECURSIVE_, 0);
    }
    REFERENCES_() {
        return this.getToken(SQLiteParser.REFERENCES_, 0);
    }
    REGEXP_() {
        return this.getToken(SQLiteParser.REGEXP_, 0);
    }
    REINDEX_() {
        return this.getToken(SQLiteParser.REINDEX_, 0);
    }
    RELEASE_() {
        return this.getToken(SQLiteParser.RELEASE_, 0);
    }
    RENAME_() {
        return this.getToken(SQLiteParser.RENAME_, 0);
    }
    REPLACE_() {
        return this.getToken(SQLiteParser.REPLACE_, 0);
    }
    RESTRICT_() {
        return this.getToken(SQLiteParser.RESTRICT_, 0);
    }
    RIGHT_() {
        return this.getToken(SQLiteParser.RIGHT_, 0);
    }
    ROLLBACK_() {
        return this.getToken(SQLiteParser.ROLLBACK_, 0);
    }
    ROW_() {
        return this.getToken(SQLiteParser.ROW_, 0);
    }
    ROWS_() {
        return this.getToken(SQLiteParser.ROWS_, 0);
    }
    SAVEPOINT_() {
        return this.getToken(SQLiteParser.SAVEPOINT_, 0);
    }
    SELECT_() {
        return this.getToken(SQLiteParser.SELECT_, 0);
    }
    SET_() {
        return this.getToken(SQLiteParser.SET_, 0);
    }
    TABLE_() {
        return this.getToken(SQLiteParser.TABLE_, 0);
    }
    TEMP_() {
        return this.getToken(SQLiteParser.TEMP_, 0);
    }
    TEMPORARY_() {
        return this.getToken(SQLiteParser.TEMPORARY_, 0);
    }
    THEN_() {
        return this.getToken(SQLiteParser.THEN_, 0);
    }
    TO_() {
        return this.getToken(SQLiteParser.TO_, 0);
    }
    TRANSACTION_() {
        return this.getToken(SQLiteParser.TRANSACTION_, 0);
    }
    TRIGGER_() {
        return this.getToken(SQLiteParser.TRIGGER_, 0);
    }
    UNION_() {
        return this.getToken(SQLiteParser.UNION_, 0);
    }
    UNIQUE_() {
        return this.getToken(SQLiteParser.UNIQUE_, 0);
    }
    UPDATE_() {
        return this.getToken(SQLiteParser.UPDATE_, 0);
    }
    USING_() {
        return this.getToken(SQLiteParser.USING_, 0);
    }
    VACUUM_() {
        return this.getToken(SQLiteParser.VACUUM_, 0);
    }
    VALUES_() {
        return this.getToken(SQLiteParser.VALUES_, 0);
    }
    VIEW_() {
        return this.getToken(SQLiteParser.VIEW_, 0);
    }
    VIRTUAL_() {
        return this.getToken(SQLiteParser.VIRTUAL_, 0);
    }
    WHEN_() {
        return this.getToken(SQLiteParser.WHEN_, 0);
    }
    WHERE_() {
        return this.getToken(SQLiteParser.WHERE_, 0);
    }
    WITH_() {
        return this.getToken(SQLiteParser.WITH_, 0);
    }
    WITHOUT_() {
        return this.getToken(SQLiteParser.WITHOUT_, 0);
    }
    FIRST_VALUE_() {
        return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
    }
    OVER_() {
        return this.getToken(SQLiteParser.OVER_, 0);
    }
    PARTITION_() {
        return this.getToken(SQLiteParser.PARTITION_, 0);
    }
    RANGE_() {
        return this.getToken(SQLiteParser.RANGE_, 0);
    }
    PRECEDING_() {
        return this.getToken(SQLiteParser.PRECEDING_, 0);
    }
    UNBOUNDED_() {
        return this.getToken(SQLiteParser.UNBOUNDED_, 0);
    }
    CURRENT_() {
        return this.getToken(SQLiteParser.CURRENT_, 0);
    }
    FOLLOWING_() {
        return this.getToken(SQLiteParser.FOLLOWING_, 0);
    }
    CUME_DIST_() {
        return this.getToken(SQLiteParser.CUME_DIST_, 0);
    }
    DENSE_RANK_() {
        return this.getToken(SQLiteParser.DENSE_RANK_, 0);
    }
    LAG_() {
        return this.getToken(SQLiteParser.LAG_, 0);
    }
    LAST_VALUE_() {
        return this.getToken(SQLiteParser.LAST_VALUE_, 0);
    }
    LEAD_() {
        return this.getToken(SQLiteParser.LEAD_, 0);
    }
    NTH_VALUE_() {
        return this.getToken(SQLiteParser.NTH_VALUE_, 0);
    }
    NTILE_() {
        return this.getToken(SQLiteParser.NTILE_, 0);
    }
    PERCENT_RANK_() {
        return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
    }
    RANK_() {
        return this.getToken(SQLiteParser.RANK_, 0);
    }
    ROW_NUMBER_() {
        return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
    }
    GENERATED_() {
        return this.getToken(SQLiteParser.GENERATED_, 0);
    }
    ALWAYS_() {
        return this.getToken(SQLiteParser.ALWAYS_, 0);
    }
    STORED_() {
        return this.getToken(SQLiteParser.STORED_, 0);
    }
    TRUE_() {
        return this.getToken(SQLiteParser.TRUE_, 0);
    }
    FALSE_() {
        return this.getToken(SQLiteParser.FALSE_, 0);
    }
    WINDOW_() {
        return this.getToken(SQLiteParser.WINDOW_, 0);
    }
    NULLS_() {
        return this.getToken(SQLiteParser.NULLS_, 0);
    }
    FIRST_() {
        return this.getToken(SQLiteParser.FIRST_, 0);
    }
    LAST_() {
        return this.getToken(SQLiteParser.LAST_, 0);
    }
    FILTER_() {
        return this.getToken(SQLiteParser.FILTER_, 0);
    }
    GROUPS_() {
        return this.getToken(SQLiteParser.GROUPS_, 0);
    }
    EXCLUDE_() {
        return this.getToken(SQLiteParser.EXCLUDE_, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterKeyword(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitKeyword(this);
        }
    }
}
class NameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitName(this);
        }
    }
}
class Function_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_function_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFunction_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFunction_name(this);
        }
    }
}
class Schema_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_schema_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSchema_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSchema_name(this);
        }
    }
}
class Table_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_name(this);
        }
    }
}
class Table_or_index_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_or_index_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_or_index_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_or_index_name(this);
        }
    }
}
class Column_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_column_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterColumn_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitColumn_name(this);
        }
    }
}
class Collation_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_collation_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterCollation_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitCollation_name(this);
        }
    }
}
class Foreign_tableContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_foreign_table;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterForeign_table(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitForeign_table(this);
        }
    }
}
class Index_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_index_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterIndex_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitIndex_name(this);
        }
    }
}
class Trigger_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_trigger_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTrigger_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTrigger_name(this);
        }
    }
}
class View_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_view_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterView_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitView_name(this);
        }
    }
}
class Module_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_module_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterModule_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitModule_name(this);
        }
    }
}
class Pragma_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_pragma_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterPragma_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitPragma_name(this);
        }
    }
}
class Savepoint_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_savepoint_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSavepoint_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSavepoint_name(this);
        }
    }
}
class Table_aliasContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_alias;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_alias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_alias(this);
        }
    }
}
class Transaction_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_transaction_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTransaction_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTransaction_name(this);
        }
    }
}
class Window_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_window_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterWindow_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitWindow_name(this);
        }
    }
}
class AliasContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_alias;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAlias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAlias(this);
        }
    }
}
class FilenameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_filename;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterFilename(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitFilename(this);
        }
    }
}
class Base_window_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_base_window_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterBase_window_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitBase_window_name(this);
        }
    }
}
class Simple_funcContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_simple_func;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterSimple_func(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitSimple_func(this);
        }
    }
}
class Aggregate_funcContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_aggregate_func;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAggregate_func(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAggregate_func(this);
        }
    }
}
class Table_function_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_table_function_name;
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterTable_function_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitTable_function_name(this);
        }
    }
}
class Any_nameContext extends antlr4.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SQLiteParser.RULE_any_name;
    }
    IDENTIFIER() {
        return this.getToken(SQLiteParser.IDENTIFIER, 0);
    }
    keyword() {
        return this.getTypedRuleContext(KeywordContext, 0);
    }
    STRING_LITERAL() {
        return this.getToken(SQLiteParser.STRING_LITERAL, 0);
    }
    OPEN_PAR() {
        return this.getToken(SQLiteParser.OPEN_PAR, 0);
    }
    any_name() {
        return this.getTypedRuleContext(Any_nameContext, 0);
    }
    CLOSE_PAR() {
        return this.getToken(SQLiteParser.CLOSE_PAR, 0);
    }
    enterRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.enterAny_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof SQLiteParserListener) {
            listener.exitAny_name(this);
        }
    }
}
SQLiteParser.ParseContext = ParseContext;
SQLiteParser.Sql_stmt_listContext = Sql_stmt_listContext;
SQLiteParser.Sql_stmtContext = Sql_stmtContext;
SQLiteParser.Alter_table_stmtContext = Alter_table_stmtContext;
SQLiteParser.Analyze_stmtContext = Analyze_stmtContext;
SQLiteParser.Attach_stmtContext = Attach_stmtContext;
SQLiteParser.Begin_stmtContext = Begin_stmtContext;
SQLiteParser.Commit_stmtContext = Commit_stmtContext;
SQLiteParser.Rollback_stmtContext = Rollback_stmtContext;
SQLiteParser.Savepoint_stmtContext = Savepoint_stmtContext;
SQLiteParser.Release_stmtContext = Release_stmtContext;
SQLiteParser.Create_index_stmtContext = Create_index_stmtContext;
SQLiteParser.Indexed_columnContext = Indexed_columnContext;
SQLiteParser.Create_table_stmtContext = Create_table_stmtContext;
SQLiteParser.Column_defContext = Column_defContext;
SQLiteParser.Type_nameContext = Type_nameContext;
SQLiteParser.Column_constraintContext = Column_constraintContext;
SQLiteParser.Signed_numberContext = Signed_numberContext;
SQLiteParser.Table_constraintContext = Table_constraintContext;
SQLiteParser.Foreign_key_clauseContext = Foreign_key_clauseContext;
SQLiteParser.Conflict_clauseContext = Conflict_clauseContext;
SQLiteParser.Create_trigger_stmtContext = Create_trigger_stmtContext;
SQLiteParser.Create_view_stmtContext = Create_view_stmtContext;
SQLiteParser.Create_virtual_table_stmtContext = Create_virtual_table_stmtContext;
SQLiteParser.With_clauseContext = With_clauseContext;
SQLiteParser.Cte_table_nameContext = Cte_table_nameContext;
SQLiteParser.Recursive_cteContext = Recursive_cteContext;
SQLiteParser.Common_table_expressionContext = Common_table_expressionContext;
SQLiteParser.Delete_stmtContext = Delete_stmtContext;
SQLiteParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext;
SQLiteParser.Detach_stmtContext = Detach_stmtContext;
SQLiteParser.Drop_stmtContext = Drop_stmtContext;
SQLiteParser.ExprContext = ExprContext;
SQLiteParser.Raise_functionContext = Raise_functionContext;
SQLiteParser.Literal_valueContext = Literal_valueContext;
SQLiteParser.Insert_stmtContext = Insert_stmtContext;
SQLiteParser.Returning_clauseContext = Returning_clauseContext;
SQLiteParser.Upsert_clauseContext = Upsert_clauseContext;
SQLiteParser.Pragma_stmtContext = Pragma_stmtContext;
SQLiteParser.Pragma_valueContext = Pragma_valueContext;
SQLiteParser.Reindex_stmtContext = Reindex_stmtContext;
SQLiteParser.Select_stmtContext = Select_stmtContext;
SQLiteParser.Join_clauseContext = Join_clauseContext;
SQLiteParser.Select_coreContext = Select_coreContext;
SQLiteParser.Factored_select_stmtContext = Factored_select_stmtContext;
SQLiteParser.Simple_select_stmtContext = Simple_select_stmtContext;
SQLiteParser.Compound_select_stmtContext = Compound_select_stmtContext;
SQLiteParser.Table_or_subqueryContext = Table_or_subqueryContext;
SQLiteParser.Result_columnContext = Result_columnContext;
SQLiteParser.Join_operatorContext = Join_operatorContext;
SQLiteParser.Join_constraintContext = Join_constraintContext;
SQLiteParser.Compound_operatorContext = Compound_operatorContext;
SQLiteParser.Update_stmtContext = Update_stmtContext;
SQLiteParser.Column_name_listContext = Column_name_listContext;
SQLiteParser.Update_stmt_limitedContext = Update_stmt_limitedContext;
SQLiteParser.Qualified_table_nameContext = Qualified_table_nameContext;
SQLiteParser.Vacuum_stmtContext = Vacuum_stmtContext;
SQLiteParser.Filter_clauseContext = Filter_clauseContext;
SQLiteParser.Window_defnContext = Window_defnContext;
SQLiteParser.Over_clauseContext = Over_clauseContext;
SQLiteParser.Frame_specContext = Frame_specContext;
SQLiteParser.Frame_clauseContext = Frame_clauseContext;
SQLiteParser.Simple_function_invocationContext = Simple_function_invocationContext;
SQLiteParser.Aggregate_function_invocationContext = Aggregate_function_invocationContext;
SQLiteParser.Window_function_invocationContext = Window_function_invocationContext;
SQLiteParser.Common_table_stmtContext = Common_table_stmtContext;
SQLiteParser.Order_by_stmtContext = Order_by_stmtContext;
SQLiteParser.Limit_stmtContext = Limit_stmtContext;
SQLiteParser.Ordering_termContext = Ordering_termContext;
SQLiteParser.Asc_descContext = Asc_descContext;
SQLiteParser.Frame_leftContext = Frame_leftContext;
SQLiteParser.Frame_rightContext = Frame_rightContext;
SQLiteParser.Frame_singleContext = Frame_singleContext;
SQLiteParser.Window_functionContext = Window_functionContext;
SQLiteParser.OffsetContext = OffsetContext;
SQLiteParser.Default_valueContext = Default_valueContext;
SQLiteParser.Partition_byContext = Partition_byContext;
SQLiteParser.Order_by_exprContext = Order_by_exprContext;
SQLiteParser.Order_by_expr_asc_descContext = Order_by_expr_asc_descContext;
SQLiteParser.Expr_asc_descContext = Expr_asc_descContext;
SQLiteParser.Initial_selectContext = Initial_selectContext;
SQLiteParser.Recursive_selectContext = Recursive_selectContext;
SQLiteParser.Unary_operatorContext = Unary_operatorContext;
SQLiteParser.Error_messageContext = Error_messageContext;
SQLiteParser.Module_argumentContext = Module_argumentContext;
SQLiteParser.Column_aliasContext = Column_aliasContext;
SQLiteParser.KeywordContext = KeywordContext;
SQLiteParser.NameContext = NameContext;
SQLiteParser.Function_nameContext = Function_nameContext;
SQLiteParser.Schema_nameContext = Schema_nameContext;
SQLiteParser.Table_nameContext = Table_nameContext;
SQLiteParser.Table_or_index_nameContext = Table_or_index_nameContext;
SQLiteParser.Column_nameContext = Column_nameContext;
SQLiteParser.Collation_nameContext = Collation_nameContext;
SQLiteParser.Foreign_tableContext = Foreign_tableContext;
SQLiteParser.Index_nameContext = Index_nameContext;
SQLiteParser.Trigger_nameContext = Trigger_nameContext;
SQLiteParser.View_nameContext = View_nameContext;
SQLiteParser.Module_nameContext = Module_nameContext;
SQLiteParser.Pragma_nameContext = Pragma_nameContext;
SQLiteParser.Savepoint_nameContext = Savepoint_nameContext;
SQLiteParser.Table_aliasContext = Table_aliasContext;
SQLiteParser.Transaction_nameContext = Transaction_nameContext;
SQLiteParser.Window_nameContext = Window_nameContext;
SQLiteParser.AliasContext = AliasContext;
SQLiteParser.FilenameContext = FilenameContext;
SQLiteParser.Base_window_nameContext = Base_window_nameContext;
SQLiteParser.Simple_funcContext = Simple_funcContext;
SQLiteParser.Aggregate_funcContext = Aggregate_funcContext;
SQLiteParser.Table_function_nameContext = Table_function_nameContext;
SQLiteParser.Any_nameContext = Any_nameContext;
