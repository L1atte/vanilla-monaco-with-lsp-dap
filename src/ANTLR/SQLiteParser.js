// Generated from SQLiteParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from "antlr4";
import SQLiteParserListener from "./SQLiteParserListener.js";
const serializedATN = [
	4, 1, 192, 1594, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2,
	14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2,
	28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
	42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2,
	56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2,
	70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2,
	84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 1, 0, 5, 0, 184, 8, 0, 10, 0, 12, 0, 187, 9, 0, 1, 0, 1, 0, 1, 1, 5, 1, 192, 8, 1, 10, 1, 12, 1, 195,
	9, 1, 1, 1, 1, 1, 4, 1, 199, 8, 1, 11, 1, 12, 1, 200, 1, 1, 5, 1, 204, 8, 1, 10, 1, 12, 1, 207, 9, 1, 1, 1, 5, 1, 210, 8, 1, 10, 1, 12, 1, 213, 9, 1, 1, 2, 1, 2, 1, 2, 3, 2, 218, 8, 2, 3, 2, 220, 8,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 226, 8, 2, 1, 3, 1, 3, 3, 3, 230, 8, 3, 1, 3, 1, 3, 3, 3, 234, 8, 3, 1, 3, 3, 3, 237, 8, 3, 1, 4, 1, 4, 3, 4, 241, 8, 4, 1, 4, 5, 4, 244, 8, 4, 10, 4, 12, 4, 247, 9,
	4, 1, 5, 4, 5, 250, 8, 5, 11, 5, 12, 5, 251, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 264, 8, 5, 1, 6, 1, 6, 3, 6, 268, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 273, 8, 6, 1, 6, 3, 6,
	276, 8, 6, 1, 6, 3, 6, 279, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 284, 8, 6, 1, 6, 3, 6, 287, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 301, 8, 6, 1, 6, 1, 6, 1, 6,
	1, 6, 1, 6, 3, 6, 308, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 315, 8, 6, 3, 6, 317, 8, 6, 1, 7, 3, 7, 320, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 3, 8, 326, 8, 8, 1, 8, 1, 8, 1, 8, 3, 8, 331, 8, 8, 1, 8,
	1, 8, 1, 8, 1, 8, 5, 8, 337, 8, 8, 10, 8, 12, 8, 340, 9, 8, 1, 8, 1, 8, 3, 8, 344, 8, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 357, 8, 8, 10, 8, 12, 8, 360, 9, 8,
	1, 8, 1, 8, 1, 8, 3, 8, 365, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 373, 8, 9, 10, 9, 12, 9, 376, 9, 9, 1, 9, 1, 9, 3, 9, 380, 8, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 3, 9,
	390, 8, 9, 1, 9, 1, 9, 5, 9, 394, 8, 9, 10, 9, 12, 9, 397, 9, 9, 1, 9, 3, 9, 400, 8, 9, 1, 9, 1, 9, 1, 9, 3, 9, 405, 8, 9, 3, 9, 407, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 3, 11, 415, 8,
	11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 429, 8, 11, 10, 11, 12, 11, 432, 9, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 439, 8, 12, 10, 12,
	12, 12, 442, 9, 12, 1, 12, 1, 12, 3, 12, 446, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 454, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 464, 8, 14, 10, 14,
	12, 14, 467, 9, 14, 1, 14, 1, 14, 3, 14, 471, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 3, 15, 479, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 486, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1,
	16, 1, 16, 3, 16, 494, 8, 16, 1, 16, 1, 16, 1, 16, 3, 16, 499, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 508, 8, 16, 1, 16, 1, 16, 1, 16, 5, 16, 513, 8, 16, 10, 16, 12, 16, 516,
	9, 16, 1, 16, 3, 16, 519, 8, 16, 1, 16, 1, 16, 3, 16, 523, 8, 16, 1, 16, 3, 16, 526, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 532, 8, 16, 10, 16, 12, 16, 535, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
	16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 547, 8, 16, 1, 16, 3, 16, 550, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 558, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 4, 16, 565, 8, 16,
	11, 16, 12, 16, 566, 1, 16, 1, 16, 3, 16, 571, 8, 16, 1, 16, 1, 16, 1, 16, 3, 16, 576, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
	1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 606, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 618, 8, 16,
	1, 16, 1, 16, 1, 16, 3, 16, 623, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 635, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 641, 8, 16, 1, 16, 1, 16, 1, 16,
	1, 16, 1, 16, 3, 16, 648, 8, 16, 1, 16, 1, 16, 3, 16, 652, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 660, 8, 16, 10, 16, 12, 16, 663, 9, 16, 3, 16, 665, 8, 16, 1, 16, 1, 16, 1, 16, 1,
	16, 3, 16, 671, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 677, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 684, 8, 16, 10, 16, 12, 16, 687, 9, 16, 3, 16, 689, 8, 16, 1, 16, 1, 16, 3, 16, 693,
	8, 16, 5, 16, 695, 8, 16, 10, 16, 12, 16, 698, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 706, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 3, 19, 713, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19,
	1, 19, 3, 19, 720, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 726, 8, 19, 1, 19, 1, 19, 1, 19, 3, 19, 731, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 737, 8, 19, 10, 19, 12, 19, 740, 9, 19, 1, 19, 1,
	19, 3, 19, 744, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 751, 8, 19, 10, 19, 12, 19, 754, 9, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 762, 8, 19, 10, 19, 12, 19, 765, 9, 19, 1,
	19, 1, 19, 5, 19, 769, 8, 19, 10, 19, 12, 19, 772, 9, 19, 1, 19, 3, 19, 775, 8, 19, 1, 19, 3, 19, 778, 8, 19, 1, 19, 1, 19, 3, 19, 782, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 790,
	8, 20, 10, 20, 12, 20, 793, 9, 20, 1, 20, 1, 20, 1, 20, 3, 20, 798, 8, 20, 3, 20, 800, 8, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 808, 8, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20,
	815, 8, 20, 1, 20, 1, 20, 1, 20, 5, 20, 820, 8, 20, 10, 20, 12, 20, 823, 9, 20, 1, 20, 1, 20, 3, 20, 827, 8, 20, 3, 20, 829, 8, 20, 1, 21, 1, 21, 1, 21, 3, 21, 834, 8, 21, 1, 22, 3, 22, 837, 8, 22,
	1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 843, 8, 22, 10, 22, 12, 22, 846, 9, 22, 1, 22, 3, 22, 849, 8, 22, 1, 22, 3, 22, 852, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 858, 8, 23, 5, 23, 860, 8, 23, 10,
	23, 12, 23, 863, 9, 23, 1, 24, 1, 24, 3, 24, 867, 8, 24, 1, 24, 1, 24, 1, 24, 5, 24, 872, 8, 24, 10, 24, 12, 24, 875, 9, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 881, 8, 24, 10, 24, 12, 24, 884, 9,
	24, 1, 24, 3, 24, 887, 8, 24, 3, 24, 889, 8, 24, 1, 24, 1, 24, 3, 24, 893, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 900, 8, 24, 10, 24, 12, 24, 903, 9, 24, 1, 24, 1, 24, 3, 24, 907, 8, 24,
	3, 24, 909, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 920, 8, 24, 10, 24, 12, 24, 923, 9, 24, 3, 24, 925, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 932, 8,
	24, 10, 24, 12, 24, 935, 9, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 943, 8, 24, 10, 24, 12, 24, 946, 9, 24, 1, 24, 1, 24, 5, 24, 950, 8, 24, 10, 24, 12, 24, 953, 9, 24, 3, 24, 955, 8,
	24, 1, 25, 1, 25, 1, 26, 3, 26, 960, 8, 26, 1, 26, 1, 26, 3, 26, 964, 8, 26, 1, 26, 3, 26, 967, 8, 26, 1, 27, 3, 27, 970, 8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 975, 8, 27, 1, 27, 1, 27, 3, 27, 979, 8,
	27, 1, 27, 4, 27, 982, 8, 27, 11, 27, 12, 27, 983, 1, 27, 3, 27, 987, 8, 27, 1, 27, 3, 27, 990, 8, 27, 1, 28, 1, 28, 1, 28, 3, 28, 995, 8, 28, 1, 28, 1, 28, 3, 28, 999, 8, 28, 1, 28, 3, 28, 1002, 8,
	28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1009, 8, 28, 1, 28, 1, 28, 1, 28, 3, 28, 1014, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 5, 28, 1021, 8, 28, 10, 28, 12, 28, 1024, 9, 28, 1, 28, 1, 28,
	3, 28, 1028, 8, 28, 1, 28, 3, 28, 1031, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 5, 28, 1037, 8, 28, 10, 28, 12, 28, 1040, 9, 28, 1, 28, 3, 28, 1043, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3,
	28, 1051, 8, 28, 1, 28, 3, 28, 1054, 8, 28, 3, 28, 1056, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 1065, 8, 29, 1, 29, 3, 29, 1068, 8, 29, 3, 29, 1070, 8, 29, 1, 30, 1, 30, 3,
	30, 1074, 8, 30, 1, 30, 1, 30, 3, 30, 1078, 8, 30, 1, 30, 1, 30, 3, 30, 1082, 8, 30, 1, 30, 3, 30, 1085, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 1094, 8, 31, 10, 31, 12, 31,
	1097, 9, 31, 1, 31, 1, 31, 3, 31, 1101, 8, 31, 1, 32, 1, 32, 3, 32, 1105, 8, 32, 1, 32, 1, 32, 3, 32, 1109, 8, 32, 1, 33, 3, 33, 1112, 8, 33, 1, 33, 1, 33, 1, 33, 3, 33, 1117, 8, 33, 1, 33, 1, 33,
	1, 33, 1, 33, 3, 33, 1123, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 1130, 8, 33, 1, 33, 1, 33, 1, 33, 5, 33, 1135, 8, 33, 10, 33, 12, 33, 1138, 9, 33, 1, 33, 1, 33, 3, 33, 1142, 8, 33, 1,
	34, 1, 34, 1, 34, 1, 34, 5, 34, 1148, 8, 34, 10, 34, 12, 34, 1151, 9, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 3, 35, 1158, 8, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1163, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35,
	1, 35, 3, 35, 1170, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 3, 37, 1180, 8, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 1187, 8, 37, 10, 37, 12, 37, 1190, 9, 37, 3, 37,
	1192, 8, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 1199, 8, 37, 10, 37, 12, 37, 1202, 9, 37, 1, 37, 3, 37, 1205, 8, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1213, 8, 38, 1, 38, 1,
	38, 1, 38, 1, 38, 1, 38, 5, 38, 1220, 8, 38, 10, 38, 12, 38, 1223, 9, 38, 3, 38, 1225, 8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 5, 38, 1232, 8, 38, 10, 38, 12, 38, 1235, 9, 38, 3, 38, 1237, 8, 38,
	1, 38, 3, 38, 1240, 8, 38, 1, 38, 3, 38, 1243, 8, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 1253, 8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 1262, 8, 40,
	1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 5, 41, 1269, 8, 41, 10, 41, 12, 41, 1272, 9, 41, 1, 41, 3, 41, 1275, 8, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 3, 42, 1282, 8, 42, 1, 42, 1, 42, 1, 42, 5, 42,
	1287, 8, 42, 10, 42, 12, 42, 1290, 9, 42, 1, 42, 3, 42, 1293, 8, 42, 1, 42, 1, 42, 3, 42, 1297, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 1304, 8, 43, 10, 43, 12, 43, 1307, 9, 43, 1, 43, 3,
	43, 1310, 8, 43, 1, 43, 1, 43, 3, 43, 1314, 8, 43, 1, 43, 1, 43, 1, 43, 3, 43, 1319, 8, 43, 1, 44, 1, 44, 3, 44, 1323, 8, 44, 1, 44, 1, 44, 1, 44, 5, 44, 1328, 8, 44, 10, 44, 12, 44, 1331, 9, 44, 1,
	45, 1, 45, 1, 45, 1, 45, 1, 45, 5, 45, 1338, 8, 45, 10, 45, 12, 45, 1341, 9, 45, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1347, 8, 46, 1, 47, 1, 47, 1, 47, 3, 47, 1352, 8, 47, 1, 47, 3, 47, 1355, 8, 47,
	1, 47, 1, 47, 3, 47, 1359, 8, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 1373, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1,
	50, 1, 50, 3, 50, 1385, 8, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1394, 8, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1403, 8, 52, 1, 52, 1, 52, 3, 52, 1407, 8,
	52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1417, 8, 52, 1, 52, 3, 52, 1420, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1429, 8, 52, 1, 52, 1, 52, 1, 52,
	1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1438, 8, 52, 1, 52, 3, 52, 1441, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1447, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1,
	52, 1, 52, 3, 52, 1461, 8, 52, 1, 52, 1, 52, 3, 52, 1465, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1476, 8, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1481, 8, 52, 1, 53, 1,
	53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 4, 55, 1492, 8, 55, 11, 55, 12, 55, 1493, 1, 56, 1, 56, 1, 56, 4, 56, 1499, 8, 56, 11, 56, 12, 56, 1500, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1,
	58, 3, 58, 1509, 8, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1514, 8, 58, 5, 58, 1516, 8, 58, 10, 58, 12, 58, 1519, 9, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 3, 63, 1531,
	8, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67, 1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 1, 76, 1, 76, 1, 77, 1,
	77, 1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1, 90, 1,
	90, 1, 90, 1, 90, 1, 90, 3, 90, 1592, 8, 90, 1, 90, 1, 251, 1, 32, 91, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,
	66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 0, 24, 2, 0, 145, 145, 170, 170, 1, 0, 8, 9, 2, 0, 59, 59, 140, 140, 2, 0, 56, 56, 104, 104, 2, 0, 58, 58, 82, 82, 5, 0,
	25, 25, 72, 72, 81, 81, 122, 122, 125, 125, 2, 0, 7, 7, 12, 13, 1, 0, 14, 17, 1, 0, 18, 21, 4, 0, 77, 77, 97, 97, 99, 99, 118, 118, 3, 0, 25, 25, 72, 72, 125, 125, 5, 0, 52, 54, 104, 104, 171, 172,
	185, 185, 187, 188, 2, 0, 29, 29, 62, 62, 3, 0, 127, 127, 153, 153, 178, 178, 2, 0, 5, 5, 106, 106, 1, 0, 175, 176, 2, 0, 34, 34, 60, 60, 2, 0, 150, 150, 161, 161, 2, 0, 158, 158, 165, 165, 2, 0,
	159, 159, 166, 167, 2, 0, 160, 160, 162, 162, 2, 0, 8, 10, 102, 102, 2, 0, 184, 184, 187, 187, 1, 0, 25, 179, 1792, 0, 185, 1, 0, 0, 0, 2, 193, 1, 0, 0, 0, 4, 219, 1, 0, 0, 0, 6, 229, 1, 0, 0, 0, 8,
	238, 1, 0, 0, 0, 10, 249, 1, 0, 0, 0, 12, 267, 1, 0, 0, 0, 14, 319, 1, 0, 0, 0, 16, 325, 1, 0, 0, 0, 18, 366, 1, 0, 0, 0, 20, 408, 1, 0, 0, 0, 22, 412, 1, 0, 0, 0, 24, 433, 1, 0, 0, 0, 26, 447, 1,
	0, 0, 0, 28, 458, 1, 0, 0, 0, 30, 478, 1, 0, 0, 0, 32, 575, 1, 0, 0, 0, 34, 699, 1, 0, 0, 0, 36, 709, 1, 0, 0, 0, 38, 781, 1, 0, 0, 0, 40, 783, 1, 0, 0, 0, 42, 833, 1, 0, 0, 0, 44, 836, 1, 0, 0, 0,
	46, 853, 1, 0, 0, 0, 48, 954, 1, 0, 0, 0, 50, 956, 1, 0, 0, 0, 52, 959, 1, 0, 0, 0, 54, 969, 1, 0, 0, 0, 56, 1055, 1, 0, 0, 0, 58, 1069, 1, 0, 0, 0, 60, 1084, 1, 0, 0, 0, 62, 1100, 1, 0, 0, 0, 64,
	1108, 1, 0, 0, 0, 66, 1111, 1, 0, 0, 0, 68, 1143, 1, 0, 0, 0, 70, 1157, 1, 0, 0, 0, 72, 1171, 1, 0, 0, 0, 74, 1177, 1, 0, 0, 0, 76, 1208, 1, 0, 0, 0, 78, 1244, 1, 0, 0, 0, 80, 1254, 1, 0, 0, 0, 82,
	1263, 1, 0, 0, 0, 84, 1278, 1, 0, 0, 0, 86, 1298, 1, 0, 0, 0, 88, 1320, 1, 0, 0, 0, 90, 1332, 1, 0, 0, 0, 92, 1342, 1, 0, 0, 0, 94, 1348, 1, 0, 0, 0, 96, 1360, 1, 0, 0, 0, 98, 1372, 1, 0, 0, 0, 100,
	1384, 1, 0, 0, 0, 102, 1393, 1, 0, 0, 0, 104, 1480, 1, 0, 0, 0, 106, 1482, 1, 0, 0, 0, 108, 1485, 1, 0, 0, 0, 110, 1488, 1, 0, 0, 0, 112, 1495, 1, 0, 0, 0, 114, 1502, 1, 0, 0, 0, 116, 1506, 1, 0, 0,
	0, 118, 1520, 1, 0, 0, 0, 120, 1522, 1, 0, 0, 0, 122, 1524, 1, 0, 0, 0, 124, 1526, 1, 0, 0, 0, 126, 1530, 1, 0, 0, 0, 128, 1532, 1, 0, 0, 0, 130, 1534, 1, 0, 0, 0, 132, 1536, 1, 0, 0, 0, 134, 1538,
	1, 0, 0, 0, 136, 1540, 1, 0, 0, 0, 138, 1542, 1, 0, 0, 0, 140, 1544, 1, 0, 0, 0, 142, 1546, 1, 0, 0, 0, 144, 1548, 1, 0, 0, 0, 146, 1550, 1, 0, 0, 0, 148, 1552, 1, 0, 0, 0, 150, 1554, 1, 0, 0, 0,
	152, 1556, 1, 0, 0, 0, 154, 1558, 1, 0, 0, 0, 156, 1560, 1, 0, 0, 0, 158, 1562, 1, 0, 0, 0, 160, 1564, 1, 0, 0, 0, 162, 1566, 1, 0, 0, 0, 164, 1568, 1, 0, 0, 0, 166, 1570, 1, 0, 0, 0, 168, 1572, 1,
	0, 0, 0, 170, 1574, 1, 0, 0, 0, 172, 1576, 1, 0, 0, 0, 174, 1578, 1, 0, 0, 0, 176, 1580, 1, 0, 0, 0, 178, 1582, 1, 0, 0, 0, 180, 1591, 1, 0, 0, 0, 182, 184, 3, 2, 1, 0, 183, 182, 1, 0, 0, 0, 184,
	187, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 188, 1, 0, 0, 0, 187, 185, 1, 0, 0, 0, 188, 189, 5, 0, 0, 1, 189, 1, 1, 0, 0, 0, 190, 192, 5, 1, 0, 0, 191, 190, 1, 0, 0, 0, 192,
	195, 1, 0, 0, 0, 193, 191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 196, 1, 0, 0, 0, 195, 193, 1, 0, 0, 0, 196, 205, 3, 4, 2, 0, 197, 199, 5, 1, 0, 0, 198, 197, 1, 0, 0, 0, 199, 200, 1, 0, 0, 0, 200,
	198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 202, 1, 0, 0, 0, 202, 204, 3, 4, 2, 0, 203, 198, 1, 0, 0, 0, 204, 207, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 211, 1, 0, 0, 0, 207,
	205, 1, 0, 0, 0, 208, 210, 5, 1, 0, 0, 209, 208, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 3, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 217, 5, 71, 0, 0, 215,
	216, 5, 114, 0, 0, 216, 218, 5, 111, 0, 0, 217, 215, 1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 218, 220, 1, 0, 0, 0, 219, 214, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220, 225, 1, 0, 0, 0, 221, 226, 3, 30, 15, 0,
	222, 226, 3, 38, 19, 0, 223, 226, 3, 44, 22, 0, 224, 226, 3, 66, 33, 0, 225, 221, 1, 0, 0, 0, 225, 222, 1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 225, 224, 1, 0, 0, 0, 226, 5, 1, 0, 0, 0, 227, 230, 3, 144,
	72, 0, 228, 230, 3, 32, 16, 0, 229, 227, 1, 0, 0, 0, 229, 228, 1, 0, 0, 0, 230, 233, 1, 0, 0, 0, 231, 232, 5, 45, 0, 0, 232, 234, 3, 146, 73, 0, 233, 231, 1, 0, 0, 0, 233, 234, 1, 0, 0, 0, 234, 236,
	1, 0, 0, 0, 235, 237, 3, 96, 48, 0, 236, 235, 1, 0, 0, 0, 236, 237, 1, 0, 0, 0, 237, 7, 1, 0, 0, 0, 238, 240, 3, 144, 72, 0, 239, 241, 3, 10, 5, 0, 240, 239, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241,
	245, 1, 0, 0, 0, 242, 244, 3, 12, 6, 0, 243, 242, 1, 0, 0, 0, 244, 247, 1, 0, 0, 0, 245, 243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 9, 1, 0, 0, 0, 247, 245, 1, 0, 0, 0, 248, 250, 3, 132, 66, 0,
	249, 248, 1, 0, 0, 0, 250, 251, 1, 0, 0, 0, 251, 252, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 252, 263, 1, 0, 0, 0, 253, 254, 5, 3, 0, 0, 254, 255, 3, 14, 7, 0, 255, 256, 5, 4, 0, 0, 256, 264, 1, 0, 0, 0,
	257, 258, 5, 3, 0, 0, 258, 259, 3, 14, 7, 0, 259, 260, 5, 5, 0, 0, 260, 261, 3, 14, 7, 0, 261, 262, 5, 4, 0, 0, 262, 264, 1, 0, 0, 0, 263, 253, 1, 0, 0, 0, 263, 257, 1, 0, 0, 0, 263, 264, 1, 0, 0,
	0, 264, 11, 1, 0, 0, 0, 265, 266, 5, 49, 0, 0, 266, 268, 3, 132, 66, 0, 267, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 316, 1, 0, 0, 0, 269, 270, 5, 113, 0, 0, 270, 272, 5, 95, 0, 0, 271, 273, 3,
	96, 48, 0, 272, 271, 1, 0, 0, 0, 272, 273, 1, 0, 0, 0, 273, 275, 1, 0, 0, 0, 274, 276, 3, 20, 10, 0, 275, 274, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 278, 1, 0, 0, 0, 277, 279, 5, 36, 0, 0, 278,
	277, 1, 0, 0, 0, 278, 279, 1, 0, 0, 0, 279, 317, 1, 0, 0, 0, 280, 281, 5, 102, 0, 0, 281, 284, 5, 104, 0, 0, 282, 284, 5, 139, 0, 0, 283, 280, 1, 0, 0, 0, 283, 282, 1, 0, 0, 0, 284, 286, 1, 0, 0, 0,
	285, 287, 3, 20, 10, 0, 286, 285, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0, 287, 317, 1, 0, 0, 0, 288, 289, 5, 44, 0, 0, 289, 290, 5, 3, 0, 0, 290, 291, 3, 32, 16, 0, 291, 292, 5, 4, 0, 0, 292, 317, 1, 0,
	0, 0, 293, 300, 5, 56, 0, 0, 294, 301, 3, 14, 7, 0, 295, 301, 3, 36, 18, 0, 296, 297, 5, 3, 0, 0, 297, 298, 3, 32, 16, 0, 298, 299, 5, 4, 0, 0, 299, 301, 1, 0, 0, 0, 300, 294, 1, 0, 0, 0, 300, 295,
	1, 0, 0, 0, 300, 296, 1, 0, 0, 0, 301, 317, 1, 0, 0, 0, 302, 303, 5, 45, 0, 0, 303, 317, 3, 146, 73, 0, 304, 317, 3, 18, 9, 0, 305, 306, 5, 168, 0, 0, 306, 308, 5, 169, 0, 0, 307, 305, 1, 0, 0, 0,
	307, 308, 1, 0, 0, 0, 308, 309, 1, 0, 0, 0, 309, 310, 5, 33, 0, 0, 310, 311, 5, 3, 0, 0, 311, 312, 3, 32, 16, 0, 312, 314, 5, 4, 0, 0, 313, 315, 7, 0, 0, 0, 314, 313, 1, 0, 0, 0, 314, 315, 1, 0, 0,
	0, 315, 317, 1, 0, 0, 0, 316, 269, 1, 0, 0, 0, 316, 283, 1, 0, 0, 0, 316, 288, 1, 0, 0, 0, 316, 293, 1, 0, 0, 0, 316, 302, 1, 0, 0, 0, 316, 304, 1, 0, 0, 0, 316, 307, 1, 0, 0, 0, 317, 13, 1, 0, 0,
	0, 318, 320, 7, 1, 0, 0, 319, 318, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322, 5, 185, 0, 0, 322, 15, 1, 0, 0, 0, 323, 324, 5, 49, 0, 0, 324, 326, 3, 132, 66, 0, 325, 323, 1,
	0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 364, 1, 0, 0, 0, 327, 328, 5, 113, 0, 0, 328, 331, 5, 95, 0, 0, 329, 331, 5, 139, 0, 0, 330, 327, 1, 0, 0, 0, 330, 329, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0, 332,
	333, 5, 3, 0, 0, 333, 338, 3, 6, 3, 0, 334, 335, 5, 5, 0, 0, 335, 337, 3, 6, 3, 0, 336, 334, 1, 0, 0, 0, 337, 340, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 338, 339, 1, 0, 0, 0, 339, 341, 1, 0, 0, 0, 340,
	338, 1, 0, 0, 0, 341, 343, 5, 4, 0, 0, 342, 344, 3, 20, 10, 0, 343, 342, 1, 0, 0, 0, 343, 344, 1, 0, 0, 0, 344, 365, 1, 0, 0, 0, 345, 346, 5, 44, 0, 0, 346, 347, 5, 3, 0, 0, 347, 348, 3, 32, 16, 0,
	348, 349, 5, 4, 0, 0, 349, 365, 1, 0, 0, 0, 350, 351, 5, 74, 0, 0, 351, 352, 5, 95, 0, 0, 352, 353, 5, 3, 0, 0, 353, 358, 3, 144, 72, 0, 354, 355, 5, 5, 0, 0, 355, 357, 3, 144, 72, 0, 356, 354, 1,
	0, 0, 0, 357, 360, 1, 0, 0, 0, 358, 356, 1, 0, 0, 0, 358, 359, 1, 0, 0, 0, 359, 361, 1, 0, 0, 0, 360, 358, 1, 0, 0, 0, 361, 362, 5, 4, 0, 0, 362, 363, 3, 18, 9, 0, 363, 365, 1, 0, 0, 0, 364, 330, 1,
	0, 0, 0, 364, 345, 1, 0, 0, 0, 364, 350, 1, 0, 0, 0, 365, 17, 1, 0, 0, 0, 366, 367, 5, 117, 0, 0, 367, 379, 3, 148, 74, 0, 368, 369, 5, 3, 0, 0, 369, 374, 3, 144, 72, 0, 370, 371, 5, 5, 0, 0, 371,
	373, 3, 144, 72, 0, 372, 370, 1, 0, 0, 0, 373, 376, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 377, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 377, 378, 5, 4, 0, 0, 378, 380, 1, 0, 0, 0,
	379, 368, 1, 0, 0, 0, 379, 380, 1, 0, 0, 0, 380, 395, 1, 0, 0, 0, 381, 382, 5, 107, 0, 0, 382, 389, 7, 2, 0, 0, 383, 384, 5, 130, 0, 0, 384, 390, 7, 3, 0, 0, 385, 390, 5, 41, 0, 0, 386, 390, 5, 123,
	0, 0, 387, 388, 5, 101, 0, 0, 388, 390, 5, 26, 0, 0, 389, 383, 1, 0, 0, 0, 389, 385, 1, 0, 0, 0, 389, 386, 1, 0, 0, 0, 389, 387, 1, 0, 0, 0, 390, 394, 1, 0, 0, 0, 391, 392, 5, 99, 0, 0, 392, 394, 3,
	132, 66, 0, 393, 381, 1, 0, 0, 0, 393, 391, 1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 395, 396, 1, 0, 0, 0, 396, 406, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 400, 5, 102, 0, 0, 399,
	398, 1, 0, 0, 0, 399, 400, 1, 0, 0, 0, 400, 401, 1, 0, 0, 0, 401, 404, 5, 57, 0, 0, 402, 403, 5, 86, 0, 0, 403, 405, 7, 4, 0, 0, 404, 402, 1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405, 407, 1, 0, 0, 0,
	406, 399, 1, 0, 0, 0, 406, 407, 1, 0, 0, 0, 407, 19, 1, 0, 0, 0, 408, 409, 5, 107, 0, 0, 409, 410, 5, 48, 0, 0, 410, 411, 7, 5, 0, 0, 411, 21, 1, 0, 0, 0, 412, 414, 5, 148, 0, 0, 413, 415, 5, 116,
	0, 0, 414, 413, 1, 0, 0, 0, 414, 415, 1, 0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 417, 3, 24, 12, 0, 417, 418, 5, 33, 0, 0, 418, 419, 5, 3, 0, 0, 419, 420, 3, 44, 22, 0, 420, 430, 5, 4, 0, 0, 421, 422,
	5, 5, 0, 0, 422, 423, 3, 24, 12, 0, 423, 424, 5, 33, 0, 0, 424, 425, 5, 3, 0, 0, 425, 426, 3, 44, 22, 0, 426, 427, 5, 4, 0, 0, 427, 429, 1, 0, 0, 0, 428, 421, 1, 0, 0, 0, 429, 432, 1, 0, 0, 0, 430,
	428, 1, 0, 0, 0, 430, 431, 1, 0, 0, 0, 431, 23, 1, 0, 0, 0, 432, 430, 1, 0, 0, 0, 433, 445, 3, 138, 69, 0, 434, 435, 5, 3, 0, 0, 435, 440, 3, 144, 72, 0, 436, 437, 5, 5, 0, 0, 437, 439, 3, 144, 72,
	0, 438, 436, 1, 0, 0, 0, 439, 442, 1, 0, 0, 0, 440, 438, 1, 0, 0, 0, 440, 441, 1, 0, 0, 0, 441, 443, 1, 0, 0, 0, 442, 440, 1, 0, 0, 0, 443, 444, 5, 4, 0, 0, 444, 446, 1, 0, 0, 0, 445, 434, 1, 0, 0,
	0, 445, 446, 1, 0, 0, 0, 446, 25, 1, 0, 0, 0, 447, 448, 3, 24, 12, 0, 448, 449, 5, 33, 0, 0, 449, 450, 5, 3, 0, 0, 450, 451, 3, 118, 59, 0, 451, 453, 5, 138, 0, 0, 452, 454, 5, 29, 0, 0, 453, 452,
	1, 0, 0, 0, 453, 454, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 456, 3, 120, 60, 0, 456, 457, 5, 4, 0, 0, 457, 27, 1, 0, 0, 0, 458, 470, 3, 138, 69, 0, 459, 460, 5, 3, 0, 0, 460, 465, 3, 144, 72, 0,
	461, 462, 5, 5, 0, 0, 462, 464, 3, 144, 72, 0, 463, 461, 1, 0, 0, 0, 464, 467, 1, 0, 0, 0, 465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 1, 0, 0, 0, 467, 465, 1, 0, 0, 0, 468, 469, 5, 4, 0,
	0, 469, 471, 1, 0, 0, 0, 470, 459, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 473, 5, 33, 0, 0, 473, 474, 5, 3, 0, 0, 474, 475, 3, 44, 22, 0, 475, 476, 5, 4, 0, 0, 476, 29, 1, 0,
	0, 0, 477, 479, 3, 22, 11, 0, 478, 477, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 480, 1, 0, 0, 0, 480, 481, 5, 59, 0, 0, 481, 482, 5, 75, 0, 0, 482, 485, 3, 70, 35, 0, 483, 484, 5, 147, 0, 0, 484,
	486, 3, 32, 16, 0, 485, 483, 1, 0, 0, 0, 485, 486, 1, 0, 0, 0, 486, 31, 1, 0, 0, 0, 487, 488, 6, 16, -1, 0, 488, 576, 3, 36, 18, 0, 489, 576, 5, 186, 0, 0, 490, 491, 3, 136, 68, 0, 491, 492, 5, 2,
	0, 0, 492, 494, 1, 0, 0, 0, 493, 490, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 495, 1, 0, 0, 0, 495, 496, 3, 138, 69, 0, 496, 497, 5, 2, 0, 0, 497, 499, 1, 0, 0, 0, 498, 493, 1, 0, 0, 0, 498, 499, 1,
	0, 0, 0, 499, 500, 1, 0, 0, 0, 500, 576, 3, 144, 72, 0, 501, 502, 3, 122, 61, 0, 502, 503, 3, 32, 16, 21, 503, 576, 1, 0, 0, 0, 504, 505, 3, 134, 67, 0, 505, 518, 5, 3, 0, 0, 506, 508, 5, 62, 0, 0,
	507, 506, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508, 509, 1, 0, 0, 0, 509, 514, 3, 32, 16, 0, 510, 511, 5, 5, 0, 0, 511, 513, 3, 32, 16, 0, 512, 510, 1, 0, 0, 0, 513, 516, 1, 0, 0, 0, 514, 512, 1, 0, 0,
	0, 514, 515, 1, 0, 0, 0, 515, 519, 1, 0, 0, 0, 516, 514, 1, 0, 0, 0, 517, 519, 5, 7, 0, 0, 518, 507, 1, 0, 0, 0, 518, 517, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 520, 1, 0, 0, 0, 520, 522, 5, 4, 0,
	0, 521, 523, 3, 72, 36, 0, 522, 521, 1, 0, 0, 0, 522, 523, 1, 0, 0, 0, 523, 525, 1, 0, 0, 0, 524, 526, 3, 76, 38, 0, 525, 524, 1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 526, 576, 1, 0, 0, 0, 527, 528, 5, 3,
	0, 0, 528, 533, 3, 32, 16, 0, 529, 530, 5, 5, 0, 0, 530, 532, 3, 32, 16, 0, 531, 529, 1, 0, 0, 0, 532, 535, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 536, 1, 0, 0, 0, 535, 533, 1,
	0, 0, 0, 536, 537, 5, 4, 0, 0, 537, 576, 1, 0, 0, 0, 538, 539, 5, 43, 0, 0, 539, 540, 5, 3, 0, 0, 540, 541, 3, 32, 16, 0, 541, 542, 5, 33, 0, 0, 542, 543, 3, 10, 5, 0, 543, 544, 5, 4, 0, 0, 544,
	576, 1, 0, 0, 0, 545, 547, 5, 102, 0, 0, 546, 545, 1, 0, 0, 0, 546, 547, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 550, 5, 70, 0, 0, 549, 546, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 551, 1, 0, 0, 0,
	551, 552, 5, 3, 0, 0, 552, 553, 3, 44, 22, 0, 553, 554, 5, 4, 0, 0, 554, 576, 1, 0, 0, 0, 555, 557, 5, 42, 0, 0, 556, 558, 3, 32, 16, 0, 557, 556, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 564, 1, 0,
	0, 0, 559, 560, 5, 146, 0, 0, 560, 561, 3, 32, 16, 0, 561, 562, 5, 134, 0, 0, 562, 563, 3, 32, 16, 0, 563, 565, 1, 0, 0, 0, 564, 559, 1, 0, 0, 0, 565, 566, 1, 0, 0, 0, 566, 564, 1, 0, 0, 0, 566,
	567, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 569, 5, 65, 0, 0, 569, 571, 3, 32, 16, 0, 570, 568, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 572, 1, 0, 0, 0, 572, 573, 5, 66, 0, 0, 573, 576, 1, 0, 0, 0,
	574, 576, 3, 34, 17, 0, 575, 487, 1, 0, 0, 0, 575, 489, 1, 0, 0, 0, 575, 498, 1, 0, 0, 0, 575, 501, 1, 0, 0, 0, 575, 504, 1, 0, 0, 0, 575, 527, 1, 0, 0, 0, 575, 538, 1, 0, 0, 0, 575, 549, 1, 0, 0,
	0, 575, 555, 1, 0, 0, 0, 575, 574, 1, 0, 0, 0, 576, 696, 1, 0, 0, 0, 577, 578, 10, 20, 0, 0, 578, 579, 5, 11, 0, 0, 579, 695, 3, 32, 16, 21, 580, 581, 10, 19, 0, 0, 581, 582, 7, 6, 0, 0, 582, 695,
	3, 32, 16, 20, 583, 584, 10, 18, 0, 0, 584, 585, 7, 1, 0, 0, 585, 695, 3, 32, 16, 19, 586, 587, 10, 17, 0, 0, 587, 588, 7, 7, 0, 0, 588, 695, 3, 32, 16, 18, 589, 590, 10, 16, 0, 0, 590, 591, 7, 8,
	0, 0, 591, 695, 3, 32, 16, 17, 592, 605, 10, 15, 0, 0, 593, 606, 5, 6, 0, 0, 594, 606, 5, 22, 0, 0, 595, 606, 5, 23, 0, 0, 596, 606, 5, 24, 0, 0, 597, 606, 5, 92, 0, 0, 598, 599, 5, 92, 0, 0, 599,
	606, 5, 102, 0, 0, 600, 606, 5, 83, 0, 0, 601, 606, 5, 97, 0, 0, 602, 606, 5, 77, 0, 0, 603, 606, 5, 99, 0, 0, 604, 606, 5, 118, 0, 0, 605, 593, 1, 0, 0, 0, 605, 594, 1, 0, 0, 0, 605, 595, 1, 0, 0,
	0, 605, 596, 1, 0, 0, 0, 605, 597, 1, 0, 0, 0, 605, 598, 1, 0, 0, 0, 605, 600, 1, 0, 0, 0, 605, 601, 1, 0, 0, 0, 605, 602, 1, 0, 0, 0, 605, 603, 1, 0, 0, 0, 605, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0,
	0, 607, 695, 3, 32, 16, 16, 608, 609, 10, 14, 0, 0, 609, 610, 5, 32, 0, 0, 610, 695, 3, 32, 16, 15, 611, 612, 10, 13, 0, 0, 612, 613, 5, 108, 0, 0, 613, 695, 3, 32, 16, 14, 614, 615, 10, 6, 0, 0,
	615, 617, 5, 92, 0, 0, 616, 618, 5, 102, 0, 0, 617, 616, 1, 0, 0, 0, 617, 618, 1, 0, 0, 0, 618, 619, 1, 0, 0, 0, 619, 695, 3, 32, 16, 7, 620, 622, 10, 5, 0, 0, 621, 623, 5, 102, 0, 0, 622, 621, 1,
	0, 0, 0, 622, 623, 1, 0, 0, 0, 623, 624, 1, 0, 0, 0, 624, 625, 5, 39, 0, 0, 625, 626, 3, 32, 16, 0, 626, 627, 5, 32, 0, 0, 627, 628, 3, 32, 16, 6, 628, 695, 1, 0, 0, 0, 629, 630, 10, 9, 0, 0, 630,
	631, 5, 45, 0, 0, 631, 695, 3, 146, 73, 0, 632, 634, 10, 8, 0, 0, 633, 635, 5, 102, 0, 0, 634, 633, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 637, 7, 9, 0, 0, 637, 640, 3, 32, 16,
	0, 638, 639, 5, 67, 0, 0, 639, 641, 3, 32, 16, 0, 640, 638, 1, 0, 0, 0, 640, 641, 1, 0, 0, 0, 641, 695, 1, 0, 0, 0, 642, 647, 10, 7, 0, 0, 643, 648, 5, 93, 0, 0, 644, 648, 5, 103, 0, 0, 645, 646, 5,
	102, 0, 0, 646, 648, 5, 104, 0, 0, 647, 643, 1, 0, 0, 0, 647, 644, 1, 0, 0, 0, 647, 645, 1, 0, 0, 0, 648, 695, 1, 0, 0, 0, 649, 651, 10, 4, 0, 0, 650, 652, 5, 102, 0, 0, 651, 650, 1, 0, 0, 0, 651,
	652, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 692, 5, 83, 0, 0, 654, 664, 5, 3, 0, 0, 655, 665, 3, 44, 22, 0, 656, 661, 3, 32, 16, 0, 657, 658, 5, 5, 0, 0, 658, 660, 3, 32, 16, 0, 659, 657, 1, 0, 0,
	0, 660, 663, 1, 0, 0, 0, 661, 659, 1, 0, 0, 0, 661, 662, 1, 0, 0, 0, 662, 665, 1, 0, 0, 0, 663, 661, 1, 0, 0, 0, 664, 655, 1, 0, 0, 0, 664, 656, 1, 0, 0, 0, 664, 665, 1, 0, 0, 0, 665, 666, 1, 0, 0,
	0, 666, 693, 5, 4, 0, 0, 667, 668, 3, 136, 68, 0, 668, 669, 5, 2, 0, 0, 669, 671, 1, 0, 0, 0, 670, 667, 1, 0, 0, 0, 670, 671, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 693, 3, 138, 69, 0, 673, 674, 3,
	136, 68, 0, 674, 675, 5, 2, 0, 0, 675, 677, 1, 0, 0, 0, 676, 673, 1, 0, 0, 0, 676, 677, 1, 0, 0, 0, 677, 678, 1, 0, 0, 0, 678, 679, 3, 178, 89, 0, 679, 688, 5, 3, 0, 0, 680, 685, 3, 32, 16, 0, 681,
	682, 5, 5, 0, 0, 682, 684, 3, 32, 16, 0, 683, 681, 1, 0, 0, 0, 684, 687, 1, 0, 0, 0, 685, 683, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 689, 1, 0, 0, 0, 687, 685, 1, 0, 0, 0, 688, 680, 1, 0, 0, 0,
	688, 689, 1, 0, 0, 0, 689, 690, 1, 0, 0, 0, 690, 691, 5, 4, 0, 0, 691, 693, 1, 0, 0, 0, 692, 654, 1, 0, 0, 0, 692, 670, 1, 0, 0, 0, 692, 676, 1, 0, 0, 0, 693, 695, 1, 0, 0, 0, 694, 577, 1, 0, 0, 0,
	694, 580, 1, 0, 0, 0, 694, 583, 1, 0, 0, 0, 694, 586, 1, 0, 0, 0, 694, 589, 1, 0, 0, 0, 694, 592, 1, 0, 0, 0, 694, 608, 1, 0, 0, 0, 694, 611, 1, 0, 0, 0, 694, 614, 1, 0, 0, 0, 694, 620, 1, 0, 0, 0,
	694, 629, 1, 0, 0, 0, 694, 632, 1, 0, 0, 0, 694, 642, 1, 0, 0, 0, 694, 649, 1, 0, 0, 0, 695, 698, 1, 0, 0, 0, 696, 694, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 33, 1, 0, 0, 0, 698, 696, 1, 0, 0, 0,
	699, 700, 5, 115, 0, 0, 700, 705, 5, 3, 0, 0, 701, 706, 5, 81, 0, 0, 702, 703, 7, 10, 0, 0, 703, 704, 5, 5, 0, 0, 704, 706, 3, 124, 62, 0, 705, 701, 1, 0, 0, 0, 705, 702, 1, 0, 0, 0, 706, 707, 1, 0,
	0, 0, 707, 708, 5, 4, 0, 0, 708, 35, 1, 0, 0, 0, 709, 710, 7, 11, 0, 0, 710, 37, 1, 0, 0, 0, 711, 713, 3, 22, 11, 0, 712, 711, 1, 0, 0, 0, 712, 713, 1, 0, 0, 0, 713, 719, 1, 0, 0, 0, 714, 720, 5,
	88, 0, 0, 715, 720, 5, 122, 0, 0, 716, 717, 5, 88, 0, 0, 717, 718, 5, 108, 0, 0, 718, 720, 7, 5, 0, 0, 719, 714, 1, 0, 0, 0, 719, 715, 1, 0, 0, 0, 719, 716, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0, 721,
	725, 5, 91, 0, 0, 722, 723, 3, 136, 68, 0, 723, 724, 5, 2, 0, 0, 724, 726, 1, 0, 0, 0, 725, 722, 1, 0, 0, 0, 725, 726, 1, 0, 0, 0, 726, 727, 1, 0, 0, 0, 727, 730, 3, 138, 69, 0, 728, 729, 5, 33, 0,
	0, 729, 731, 3, 162, 81, 0, 730, 728, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 743, 1, 0, 0, 0, 732, 733, 5, 3, 0, 0, 733, 738, 3, 144, 72, 0, 734, 735, 5, 5, 0, 0, 735, 737, 3, 144, 72, 0, 736, 734,
	1, 0, 0, 0, 737, 740, 1, 0, 0, 0, 738, 736, 1, 0, 0, 0, 738, 739, 1, 0, 0, 0, 739, 741, 1, 0, 0, 0, 740, 738, 1, 0, 0, 0, 741, 742, 5, 4, 0, 0, 742, 744, 1, 0, 0, 0, 743, 732, 1, 0, 0, 0, 743, 744,
	1, 0, 0, 0, 744, 774, 1, 0, 0, 0, 745, 746, 5, 143, 0, 0, 746, 747, 5, 3, 0, 0, 747, 752, 3, 32, 16, 0, 748, 749, 5, 5, 0, 0, 749, 751, 3, 32, 16, 0, 750, 748, 1, 0, 0, 0, 751, 754, 1, 0, 0, 0, 752,
	750, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 755, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0, 755, 770, 5, 4, 0, 0, 756, 757, 5, 5, 0, 0, 757, 758, 5, 3, 0, 0, 758, 763, 3, 32, 16, 0, 759, 760, 5, 5, 0, 0,
	760, 762, 3, 32, 16, 0, 761, 759, 1, 0, 0, 0, 762, 765, 1, 0, 0, 0, 763, 761, 1, 0, 0, 0, 763, 764, 1, 0, 0, 0, 764, 766, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 766, 767, 5, 4, 0, 0, 767, 769, 1, 0, 0,
	0, 768, 756, 1, 0, 0, 0, 769, 772, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 775, 1, 0, 0, 0, 772, 770, 1, 0, 0, 0, 773, 775, 3, 44, 22, 0, 774, 745, 1, 0, 0, 0, 774, 773, 1, 0,
	0, 0, 775, 777, 1, 0, 0, 0, 776, 778, 3, 40, 20, 0, 777, 776, 1, 0, 0, 0, 777, 778, 1, 0, 0, 0, 778, 782, 1, 0, 0, 0, 779, 780, 5, 56, 0, 0, 780, 782, 5, 143, 0, 0, 781, 712, 1, 0, 0, 0, 781, 779,
	1, 0, 0, 0, 782, 39, 1, 0, 0, 0, 783, 784, 5, 107, 0, 0, 784, 799, 5, 48, 0, 0, 785, 786, 5, 3, 0, 0, 786, 791, 3, 6, 3, 0, 787, 788, 5, 5, 0, 0, 788, 790, 3, 6, 3, 0, 789, 787, 1, 0, 0, 0, 790,
	793, 1, 0, 0, 0, 791, 789, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792, 794, 1, 0, 0, 0, 793, 791, 1, 0, 0, 0, 794, 797, 5, 4, 0, 0, 795, 796, 5, 147, 0, 0, 796, 798, 3, 32, 16, 0, 797, 795, 1, 0, 0, 0,
	797, 798, 1, 0, 0, 0, 798, 800, 1, 0, 0, 0, 799, 785, 1, 0, 0, 0, 799, 800, 1, 0, 0, 0, 800, 801, 1, 0, 0, 0, 801, 828, 5, 182, 0, 0, 802, 829, 5, 183, 0, 0, 803, 804, 5, 140, 0, 0, 804, 807, 5,
	130, 0, 0, 805, 808, 3, 144, 72, 0, 806, 808, 3, 68, 34, 0, 807, 805, 1, 0, 0, 0, 807, 806, 1, 0, 0, 0, 808, 809, 1, 0, 0, 0, 809, 810, 5, 22, 0, 0, 810, 821, 3, 32, 16, 0, 811, 814, 5, 5, 0, 0,
	812, 815, 3, 144, 72, 0, 813, 815, 3, 68, 34, 0, 814, 812, 1, 0, 0, 0, 814, 813, 1, 0, 0, 0, 815, 816, 1, 0, 0, 0, 816, 817, 5, 22, 0, 0, 817, 818, 3, 32, 16, 0, 818, 820, 1, 0, 0, 0, 819, 811, 1,
	0, 0, 0, 820, 823, 1, 0, 0, 0, 821, 819, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 822, 826, 1, 0, 0, 0, 823, 821, 1, 0, 0, 0, 824, 825, 5, 147, 0, 0, 825, 827, 3, 32, 16, 0, 826, 824, 1, 0, 0, 0, 826, 827,
	1, 0, 0, 0, 827, 829, 1, 0, 0, 0, 828, 802, 1, 0, 0, 0, 828, 803, 1, 0, 0, 0, 829, 41, 1, 0, 0, 0, 830, 834, 3, 14, 7, 0, 831, 834, 3, 132, 66, 0, 832, 834, 5, 187, 0, 0, 833, 830, 1, 0, 0, 0, 833,
	831, 1, 0, 0, 0, 833, 832, 1, 0, 0, 0, 834, 43, 1, 0, 0, 0, 835, 837, 3, 88, 44, 0, 836, 835, 1, 0, 0, 0, 836, 837, 1, 0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 844, 3, 48, 24, 0, 839, 840, 3, 64, 32, 0,
	840, 841, 3, 48, 24, 0, 841, 843, 1, 0, 0, 0, 842, 839, 1, 0, 0, 0, 843, 846, 1, 0, 0, 0, 844, 842, 1, 0, 0, 0, 844, 845, 1, 0, 0, 0, 845, 848, 1, 0, 0, 0, 846, 844, 1, 0, 0, 0, 847, 849, 3, 90, 45,
	0, 848, 847, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 851, 1, 0, 0, 0, 850, 852, 3, 92, 46, 0, 851, 850, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 45, 1, 0, 0, 0, 853, 861, 3, 56, 28, 0, 854, 855, 3, 60,
	30, 0, 855, 857, 3, 56, 28, 0, 856, 858, 3, 62, 31, 0, 857, 856, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 860, 1, 0, 0, 0, 859, 854, 1, 0, 0, 0, 860, 863, 1, 0, 0, 0, 861, 859, 1, 0, 0, 0, 861, 862,
	1, 0, 0, 0, 862, 47, 1, 0, 0, 0, 863, 861, 1, 0, 0, 0, 864, 866, 5, 129, 0, 0, 865, 867, 7, 12, 0, 0, 866, 865, 1, 0, 0, 0, 866, 867, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 873, 3, 58, 29, 0, 869,
	870, 5, 5, 0, 0, 870, 872, 3, 58, 29, 0, 871, 869, 1, 0, 0, 0, 872, 875, 1, 0, 0, 0, 873, 871, 1, 0, 0, 0, 873, 874, 1, 0, 0, 0, 874, 888, 1, 0, 0, 0, 875, 873, 1, 0, 0, 0, 876, 886, 5, 75, 0, 0,
	877, 882, 3, 56, 28, 0, 878, 879, 5, 5, 0, 0, 879, 881, 3, 56, 28, 0, 880, 878, 1, 0, 0, 0, 881, 884, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0, 882, 883, 1, 0, 0, 0, 883, 887, 1, 0, 0, 0, 884, 882, 1, 0, 0,
	0, 885, 887, 3, 46, 23, 0, 886, 877, 1, 0, 0, 0, 886, 885, 1, 0, 0, 0, 887, 889, 1, 0, 0, 0, 888, 876, 1, 0, 0, 0, 888, 889, 1, 0, 0, 0, 889, 892, 1, 0, 0, 0, 890, 891, 5, 147, 0, 0, 891, 893, 3,
	32, 16, 0, 892, 890, 1, 0, 0, 0, 892, 893, 1, 0, 0, 0, 893, 908, 1, 0, 0, 0, 894, 895, 5, 78, 0, 0, 895, 896, 5, 40, 0, 0, 896, 901, 3, 32, 16, 0, 897, 898, 5, 5, 0, 0, 898, 900, 3, 32, 16, 0, 899,
	897, 1, 0, 0, 0, 900, 903, 1, 0, 0, 0, 901, 899, 1, 0, 0, 0, 901, 902, 1, 0, 0, 0, 902, 906, 1, 0, 0, 0, 903, 901, 1, 0, 0, 0, 904, 905, 5, 79, 0, 0, 905, 907, 3, 32, 16, 0, 906, 904, 1, 0, 0, 0,
	906, 907, 1, 0, 0, 0, 907, 909, 1, 0, 0, 0, 908, 894, 1, 0, 0, 0, 908, 909, 1, 0, 0, 0, 909, 924, 1, 0, 0, 0, 910, 911, 5, 173, 0, 0, 911, 912, 3, 166, 83, 0, 912, 913, 5, 33, 0, 0, 913, 921, 3, 74,
	37, 0, 914, 915, 5, 5, 0, 0, 915, 916, 3, 166, 83, 0, 916, 917, 5, 33, 0, 0, 917, 918, 3, 74, 37, 0, 918, 920, 1, 0, 0, 0, 919, 914, 1, 0, 0, 0, 920, 923, 1, 0, 0, 0, 921, 919, 1, 0, 0, 0, 921, 922,
	1, 0, 0, 0, 922, 925, 1, 0, 0, 0, 923, 921, 1, 0, 0, 0, 924, 910, 1, 0, 0, 0, 924, 925, 1, 0, 0, 0, 925, 955, 1, 0, 0, 0, 926, 927, 5, 143, 0, 0, 927, 928, 5, 3, 0, 0, 928, 933, 3, 32, 16, 0, 929,
	930, 5, 5, 0, 0, 930, 932, 3, 32, 16, 0, 931, 929, 1, 0, 0, 0, 932, 935, 1, 0, 0, 0, 933, 931, 1, 0, 0, 0, 933, 934, 1, 0, 0, 0, 934, 936, 1, 0, 0, 0, 935, 933, 1, 0, 0, 0, 936, 951, 5, 4, 0, 0,
	937, 938, 5, 5, 0, 0, 938, 939, 5, 3, 0, 0, 939, 944, 3, 32, 16, 0, 940, 941, 5, 5, 0, 0, 941, 943, 3, 32, 16, 0, 942, 940, 1, 0, 0, 0, 943, 946, 1, 0, 0, 0, 944, 942, 1, 0, 0, 0, 944, 945, 1, 0, 0,
	0, 945, 947, 1, 0, 0, 0, 946, 944, 1, 0, 0, 0, 947, 948, 5, 4, 0, 0, 948, 950, 1, 0, 0, 0, 949, 937, 1, 0, 0, 0, 950, 953, 1, 0, 0, 0, 951, 949, 1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952, 955, 1, 0, 0,
	0, 953, 951, 1, 0, 0, 0, 954, 864, 1, 0, 0, 0, 954, 926, 1, 0, 0, 0, 955, 49, 1, 0, 0, 0, 956, 957, 3, 44, 22, 0, 957, 51, 1, 0, 0, 0, 958, 960, 3, 88, 44, 0, 959, 958, 1, 0, 0, 0, 959, 960, 1, 0,
	0, 0, 960, 961, 1, 0, 0, 0, 961, 963, 3, 48, 24, 0, 962, 964, 3, 90, 45, 0, 963, 962, 1, 0, 0, 0, 963, 964, 1, 0, 0, 0, 964, 966, 1, 0, 0, 0, 965, 967, 3, 92, 46, 0, 966, 965, 1, 0, 0, 0, 966, 967,
	1, 0, 0, 0, 967, 53, 1, 0, 0, 0, 968, 970, 3, 88, 44, 0, 969, 968, 1, 0, 0, 0, 969, 970, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0, 971, 981, 3, 48, 24, 0, 972, 974, 5, 138, 0, 0, 973, 975, 5, 29, 0, 0, 974,
	973, 1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 979, 1, 0, 0, 0, 976, 979, 5, 90, 0, 0, 977, 979, 5, 68, 0, 0, 978, 972, 1, 0, 0, 0, 978, 976, 1, 0, 0, 0, 978, 977, 1, 0, 0, 0, 979, 980, 1, 0, 0, 0,
	980, 982, 3, 48, 24, 0, 981, 978, 1, 0, 0, 0, 982, 983, 1, 0, 0, 0, 983, 981, 1, 0, 0, 0, 983, 984, 1, 0, 0, 0, 984, 986, 1, 0, 0, 0, 985, 987, 3, 90, 45, 0, 986, 985, 1, 0, 0, 0, 986, 987, 1, 0, 0,
	0, 987, 989, 1, 0, 0, 0, 988, 990, 3, 92, 46, 0, 989, 988, 1, 0, 0, 0, 989, 990, 1, 0, 0, 0, 990, 55, 1, 0, 0, 0, 991, 992, 3, 136, 68, 0, 992, 993, 5, 2, 0, 0, 993, 995, 1, 0, 0, 0, 994, 991, 1, 0,
	0, 0, 994, 995, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0, 996, 1001, 3, 138, 69, 0, 997, 999, 5, 33, 0, 0, 998, 997, 1, 0, 0, 0, 998, 999, 1, 0, 0, 0, 999, 1000, 1, 0, 0, 0, 1000, 1002, 3, 162, 81, 0, 1001,
	998, 1, 0, 0, 0, 1001, 1002, 1, 0, 0, 0, 1002, 1008, 1, 0, 0, 0, 1003, 1004, 5, 85, 0, 0, 1004, 1005, 5, 40, 0, 0, 1005, 1009, 3, 150, 75, 0, 1006, 1007, 5, 102, 0, 0, 1007, 1009, 5, 85, 0, 0, 1008,
	1003, 1, 0, 0, 0, 1008, 1006, 1, 0, 0, 0, 1008, 1009, 1, 0, 0, 0, 1009, 1056, 1, 0, 0, 0, 1010, 1011, 3, 136, 68, 0, 1011, 1012, 5, 2, 0, 0, 1012, 1014, 1, 0, 0, 0, 1013, 1010, 1, 0, 0, 0, 1013,
	1014, 1, 0, 0, 0, 1014, 1015, 1, 0, 0, 0, 1015, 1016, 3, 178, 89, 0, 1016, 1017, 5, 3, 0, 0, 1017, 1022, 3, 32, 16, 0, 1018, 1019, 5, 5, 0, 0, 1019, 1021, 3, 32, 16, 0, 1020, 1018, 1, 0, 0, 0, 1021,
	1024, 1, 0, 0, 0, 1022, 1020, 1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 1023, 1025, 1, 0, 0, 0, 1024, 1022, 1, 0, 0, 0, 1025, 1030, 5, 4, 0, 0, 1026, 1028, 5, 33, 0, 0, 1027, 1026, 1, 0, 0, 0, 1027, 1028,
	1, 0, 0, 0, 1028, 1029, 1, 0, 0, 0, 1029, 1031, 3, 162, 81, 0, 1030, 1027, 1, 0, 0, 0, 1030, 1031, 1, 0, 0, 0, 1031, 1056, 1, 0, 0, 0, 1032, 1042, 5, 3, 0, 0, 1033, 1038, 3, 56, 28, 0, 1034, 1035,
	5, 5, 0, 0, 1035, 1037, 3, 56, 28, 0, 1036, 1034, 1, 0, 0, 0, 1037, 1040, 1, 0, 0, 0, 1038, 1036, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 1043, 1, 0, 0, 0, 1040, 1038, 1, 0, 0, 0, 1041, 1043, 3,
	46, 23, 0, 1042, 1033, 1, 0, 0, 0, 1042, 1041, 1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1045, 5, 4, 0, 0, 1045, 1056, 1, 0, 0, 0, 1046, 1047, 5, 3, 0, 0, 1047, 1048, 3, 44, 22, 0, 1048, 1053, 5, 4,
	0, 0, 1049, 1051, 5, 33, 0, 0, 1050, 1049, 1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1052, 1, 0, 0, 0, 1052, 1054, 3, 162, 81, 0, 1053, 1050, 1, 0, 0, 0, 1053, 1054, 1, 0, 0, 0, 1054, 1056, 1, 0, 0,
	0, 1055, 994, 1, 0, 0, 0, 1055, 1013, 1, 0, 0, 0, 1055, 1032, 1, 0, 0, 0, 1055, 1046, 1, 0, 0, 0, 1056, 57, 1, 0, 0, 0, 1057, 1070, 5, 7, 0, 0, 1058, 1059, 3, 138, 69, 0, 1059, 1060, 5, 2, 0, 0,
	1060, 1061, 5, 7, 0, 0, 1061, 1070, 1, 0, 0, 0, 1062, 1067, 3, 32, 16, 0, 1063, 1065, 5, 33, 0, 0, 1064, 1063, 1, 0, 0, 0, 1064, 1065, 1, 0, 0, 0, 1065, 1066, 1, 0, 0, 0, 1066, 1068, 3, 128, 64, 0,
	1067, 1064, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1070, 1, 0, 0, 0, 1069, 1057, 1, 0, 0, 0, 1069, 1058, 1, 0, 0, 0, 1069, 1062, 1, 0, 0, 0, 1070, 59, 1, 0, 0, 0, 1071, 1085, 5, 5, 0, 0, 1072,
	1074, 5, 100, 0, 0, 1073, 1072, 1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0, 1074, 1081, 1, 0, 0, 0, 1075, 1077, 5, 96, 0, 0, 1076, 1078, 5, 110, 0, 0, 1077, 1076, 1, 0, 0, 0, 1077, 1078, 1, 0, 0, 0, 1078,
	1082, 1, 0, 0, 0, 1079, 1082, 5, 87, 0, 0, 1080, 1082, 5, 51, 0, 0, 1081, 1075, 1, 0, 0, 0, 1081, 1079, 1, 0, 0, 0, 1081, 1080, 1, 0, 0, 0, 1081, 1082, 1, 0, 0, 0, 1082, 1083, 1, 0, 0, 0, 1083,
	1085, 5, 94, 0, 0, 1084, 1071, 1, 0, 0, 0, 1084, 1073, 1, 0, 0, 0, 1085, 61, 1, 0, 0, 0, 1086, 1087, 5, 107, 0, 0, 1087, 1101, 3, 32, 16, 0, 1088, 1089, 5, 141, 0, 0, 1089, 1090, 5, 3, 0, 0, 1090,
	1095, 3, 144, 72, 0, 1091, 1092, 5, 5, 0, 0, 1092, 1094, 3, 144, 72, 0, 1093, 1091, 1, 0, 0, 0, 1094, 1097, 1, 0, 0, 0, 1095, 1093, 1, 0, 0, 0, 1095, 1096, 1, 0, 0, 0, 1096, 1098, 1, 0, 0, 0, 1097,
	1095, 1, 0, 0, 0, 1098, 1099, 5, 4, 0, 0, 1099, 1101, 1, 0, 0, 0, 1100, 1086, 1, 0, 0, 0, 1100, 1088, 1, 0, 0, 0, 1101, 63, 1, 0, 0, 0, 1102, 1104, 5, 138, 0, 0, 1103, 1105, 5, 29, 0, 0, 1104, 1103,
	1, 0, 0, 0, 1104, 1105, 1, 0, 0, 0, 1105, 1109, 1, 0, 0, 0, 1106, 1109, 5, 90, 0, 0, 1107, 1109, 5, 68, 0, 0, 1108, 1102, 1, 0, 0, 0, 1108, 1106, 1, 0, 0, 0, 1108, 1107, 1, 0, 0, 0, 1109, 65, 1, 0,
	0, 0, 1110, 1112, 3, 22, 11, 0, 1111, 1110, 1, 0, 0, 0, 1111, 1112, 1, 0, 0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1116, 5, 140, 0, 0, 1114, 1115, 5, 108, 0, 0, 1115, 1117, 7, 5, 0, 0, 1116, 1114, 1, 0,
	0, 0, 1116, 1117, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 1119, 3, 70, 35, 0, 1119, 1122, 5, 130, 0, 0, 1120, 1123, 3, 144, 72, 0, 1121, 1123, 3, 68, 34, 0, 1122, 1120, 1, 0, 0, 0, 1122, 1121, 1,
	0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124, 1125, 5, 6, 0, 0, 1125, 1136, 3, 32, 16, 0, 1126, 1129, 5, 5, 0, 0, 1127, 1130, 3, 144, 72, 0, 1128, 1130, 3, 68, 34, 0, 1129, 1127, 1, 0, 0, 0, 1129, 1128, 1,
	0, 0, 0, 1130, 1131, 1, 0, 0, 0, 1131, 1132, 5, 6, 0, 0, 1132, 1133, 3, 32, 16, 0, 1133, 1135, 1, 0, 0, 0, 1134, 1126, 1, 0, 0, 0, 1135, 1138, 1, 0, 0, 0, 1136, 1134, 1, 0, 0, 0, 1136, 1137, 1, 0,
	0, 0, 1137, 1141, 1, 0, 0, 0, 1138, 1136, 1, 0, 0, 0, 1139, 1140, 5, 147, 0, 0, 1140, 1142, 3, 32, 16, 0, 1141, 1139, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0, 1142, 67, 1, 0, 0, 0, 1143, 1144, 5, 3, 0,
	0, 1144, 1149, 3, 144, 72, 0, 1145, 1146, 5, 5, 0, 0, 1146, 1148, 3, 144, 72, 0, 1147, 1145, 1, 0, 0, 0, 1148, 1151, 1, 0, 0, 0, 1149, 1147, 1, 0, 0, 0, 1149, 1150, 1, 0, 0, 0, 1150, 1152, 1, 0, 0,
	0, 1151, 1149, 1, 0, 0, 0, 1152, 1153, 5, 4, 0, 0, 1153, 69, 1, 0, 0, 0, 1154, 1155, 3, 136, 68, 0, 1155, 1156, 5, 2, 0, 0, 1156, 1158, 1, 0, 0, 0, 1157, 1154, 1, 0, 0, 0, 1157, 1158, 1, 0, 0, 0,
	1158, 1159, 1, 0, 0, 0, 1159, 1162, 3, 138, 69, 0, 1160, 1161, 5, 33, 0, 0, 1161, 1163, 3, 168, 84, 0, 1162, 1160, 1, 0, 0, 0, 1162, 1163, 1, 0, 0, 0, 1163, 1169, 1, 0, 0, 0, 1164, 1165, 5, 85, 0,
	0, 1165, 1166, 5, 40, 0, 0, 1166, 1170, 3, 150, 75, 0, 1167, 1168, 5, 102, 0, 0, 1168, 1170, 5, 85, 0, 0, 1169, 1164, 1, 0, 0, 0, 1169, 1167, 1, 0, 0, 0, 1169, 1170, 1, 0, 0, 0, 1170, 71, 1, 0, 0,
	0, 1171, 1172, 5, 177, 0, 0, 1172, 1173, 5, 3, 0, 0, 1173, 1174, 5, 147, 0, 0, 1174, 1175, 3, 32, 16, 0, 1175, 1176, 5, 4, 0, 0, 1176, 73, 1, 0, 0, 0, 1177, 1179, 5, 3, 0, 0, 1178, 1180, 3, 172, 86,
	0, 1179, 1178, 1, 0, 0, 0, 1179, 1180, 1, 0, 0, 0, 1180, 1191, 1, 0, 0, 0, 1181, 1182, 5, 152, 0, 0, 1182, 1183, 5, 40, 0, 0, 1183, 1188, 3, 32, 16, 0, 1184, 1185, 5, 5, 0, 0, 1185, 1187, 3, 32, 16,
	0, 1186, 1184, 1, 0, 0, 0, 1187, 1190, 1, 0, 0, 0, 1188, 1186, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1192, 1, 0, 0, 0, 1190, 1188, 1, 0, 0, 0, 1191, 1181, 1, 0, 0, 0, 1191, 1192, 1, 0, 0, 0,
	1192, 1193, 1, 0, 0, 0, 1193, 1194, 5, 109, 0, 0, 1194, 1195, 5, 40, 0, 0, 1195, 1200, 3, 94, 47, 0, 1196, 1197, 5, 5, 0, 0, 1197, 1199, 3, 94, 47, 0, 1198, 1196, 1, 0, 0, 0, 1199, 1202, 1, 0, 0, 0,
	1200, 1198, 1, 0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201, 1204, 1, 0, 0, 0, 1202, 1200, 1, 0, 0, 0, 1203, 1205, 3, 78, 39, 0, 1204, 1203, 1, 0, 0, 0, 1204, 1205, 1, 0, 0, 0, 1205, 1206, 1, 0, 0, 0,
	1206, 1207, 5, 4, 0, 0, 1207, 75, 1, 0, 0, 0, 1208, 1242, 5, 151, 0, 0, 1209, 1243, 3, 166, 83, 0, 1210, 1212, 5, 3, 0, 0, 1211, 1213, 3, 172, 86, 0, 1212, 1211, 1, 0, 0, 0, 1212, 1213, 1, 0, 0, 0,
	1213, 1224, 1, 0, 0, 0, 1214, 1215, 5, 152, 0, 0, 1215, 1216, 5, 40, 0, 0, 1216, 1221, 3, 32, 16, 0, 1217, 1218, 5, 5, 0, 0, 1218, 1220, 3, 32, 16, 0, 1219, 1217, 1, 0, 0, 0, 1220, 1223, 1, 0, 0, 0,
	1221, 1219, 1, 0, 0, 0, 1221, 1222, 1, 0, 0, 0, 1222, 1225, 1, 0, 0, 0, 1223, 1221, 1, 0, 0, 0, 1224, 1214, 1, 0, 0, 0, 1224, 1225, 1, 0, 0, 0, 1225, 1236, 1, 0, 0, 0, 1226, 1227, 5, 109, 0, 0,
	1227, 1228, 5, 40, 0, 0, 1228, 1233, 3, 94, 47, 0, 1229, 1230, 5, 5, 0, 0, 1230, 1232, 3, 94, 47, 0, 1231, 1229, 1, 0, 0, 0, 1232, 1235, 1, 0, 0, 0, 1233, 1231, 1, 0, 0, 0, 1233, 1234, 1, 0, 0, 0,
	1234, 1237, 1, 0, 0, 0, 1235, 1233, 1, 0, 0, 0, 1236, 1226, 1, 0, 0, 0, 1236, 1237, 1, 0, 0, 0, 1237, 1239, 1, 0, 0, 0, 1238, 1240, 3, 78, 39, 0, 1239, 1238, 1, 0, 0, 0, 1239, 1240, 1, 0, 0, 0,
	1240, 1241, 1, 0, 0, 0, 1241, 1243, 5, 4, 0, 0, 1242, 1209, 1, 0, 0, 0, 1242, 1210, 1, 0, 0, 0, 1243, 77, 1, 0, 0, 0, 1244, 1252, 3, 80, 40, 0, 1245, 1246, 5, 179, 0, 0, 1246, 1247, 5, 101, 0, 0,
	1247, 1253, 5, 181, 0, 0, 1248, 1249, 5, 156, 0, 0, 1249, 1253, 5, 126, 0, 0, 1250, 1253, 5, 78, 0, 0, 1251, 1253, 5, 180, 0, 0, 1252, 1245, 1, 0, 0, 0, 1252, 1248, 1, 0, 0, 0, 1252, 1250, 1, 0, 0,
	0, 1252, 1251, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253, 79, 1, 0, 0, 0, 1254, 1261, 7, 13, 0, 0, 1255, 1262, 3, 102, 51, 0, 1256, 1257, 5, 39, 0, 0, 1257, 1258, 3, 98, 49, 0, 1258, 1259, 5, 32, 0,
	0, 1259, 1260, 3, 100, 50, 0, 1260, 1262, 1, 0, 0, 0, 1261, 1255, 1, 0, 0, 0, 1261, 1256, 1, 0, 0, 0, 1262, 81, 1, 0, 0, 0, 1263, 1264, 3, 174, 87, 0, 1264, 1274, 5, 3, 0, 0, 1265, 1270, 3, 32, 16,
	0, 1266, 1267, 5, 5, 0, 0, 1267, 1269, 3, 32, 16, 0, 1268, 1266, 1, 0, 0, 0, 1269, 1272, 1, 0, 0, 0, 1270, 1268, 1, 0, 0, 0, 1270, 1271, 1, 0, 0, 0, 1271, 1275, 1, 0, 0, 0, 1272, 1270, 1, 0, 0, 0,
	1273, 1275, 5, 7, 0, 0, 1274, 1265, 1, 0, 0, 0, 1274, 1273, 1, 0, 0, 0, 1275, 1276, 1, 0, 0, 0, 1276, 1277, 5, 4, 0, 0, 1277, 83, 1, 0, 0, 0, 1278, 1279, 3, 176, 88, 0, 1279, 1292, 5, 3, 0, 0, 1280,
	1282, 5, 62, 0, 0, 1281, 1280, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1283, 1, 0, 0, 0, 1283, 1288, 3, 32, 16, 0, 1284, 1285, 5, 5, 0, 0, 1285, 1287, 3, 32, 16, 0, 1286, 1284, 1, 0, 0, 0, 1287,
	1290, 1, 0, 0, 0, 1288, 1286, 1, 0, 0, 0, 1288, 1289, 1, 0, 0, 0, 1289, 1293, 1, 0, 0, 0, 1290, 1288, 1, 0, 0, 0, 1291, 1293, 5, 7, 0, 0, 1292, 1281, 1, 0, 0, 0, 1292, 1291, 1, 0, 0, 0, 1292, 1293,
	1, 0, 0, 0, 1293, 1294, 1, 0, 0, 0, 1294, 1296, 5, 4, 0, 0, 1295, 1297, 3, 72, 36, 0, 1296, 1295, 1, 0, 0, 0, 1296, 1297, 1, 0, 0, 0, 1297, 85, 1, 0, 0, 0, 1298, 1299, 3, 104, 52, 0, 1299, 1309, 5,
	3, 0, 0, 1300, 1305, 3, 32, 16, 0, 1301, 1302, 5, 5, 0, 0, 1302, 1304, 3, 32, 16, 0, 1303, 1301, 1, 0, 0, 0, 1304, 1307, 1, 0, 0, 0, 1305, 1303, 1, 0, 0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1310, 1, 0,
	0, 0, 1307, 1305, 1, 0, 0, 0, 1308, 1310, 5, 7, 0, 0, 1309, 1300, 1, 0, 0, 0, 1309, 1308, 1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310, 1311, 1, 0, 0, 0, 1311, 1313, 5, 4, 0, 0, 1312, 1314, 3, 72, 36,
	0, 1313, 1312, 1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1315, 1, 0, 0, 0, 1315, 1318, 5, 151, 0, 0, 1316, 1319, 3, 74, 37, 0, 1317, 1319, 3, 166, 83, 0, 1318, 1316, 1, 0, 0, 0, 1318, 1317, 1, 0, 0,
	0, 1319, 87, 1, 0, 0, 0, 1320, 1322, 5, 148, 0, 0, 1321, 1323, 5, 116, 0, 0, 1322, 1321, 1, 0, 0, 0, 1322, 1323, 1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324, 1329, 3, 28, 14, 0, 1325, 1326, 5, 5, 0, 0,
	1326, 1328, 3, 28, 14, 0, 1327, 1325, 1, 0, 0, 0, 1328, 1331, 1, 0, 0, 0, 1329, 1327, 1, 0, 0, 0, 1329, 1330, 1, 0, 0, 0, 1330, 89, 1, 0, 0, 0, 1331, 1329, 1, 0, 0, 0, 1332, 1333, 5, 109, 0, 0,
	1333, 1334, 5, 40, 0, 0, 1334, 1339, 3, 94, 47, 0, 1335, 1336, 5, 5, 0, 0, 1336, 1338, 3, 94, 47, 0, 1337, 1335, 1, 0, 0, 0, 1338, 1341, 1, 0, 0, 0, 1339, 1337, 1, 0, 0, 0, 1339, 1340, 1, 0, 0, 0,
	1340, 91, 1, 0, 0, 0, 1341, 1339, 1, 0, 0, 0, 1342, 1343, 5, 98, 0, 0, 1343, 1346, 3, 32, 16, 0, 1344, 1345, 7, 14, 0, 0, 1345, 1347, 3, 32, 16, 0, 1346, 1344, 1, 0, 0, 0, 1346, 1347, 1, 0, 0, 0,
	1347, 93, 1, 0, 0, 0, 1348, 1351, 3, 32, 16, 0, 1349, 1350, 5, 45, 0, 0, 1350, 1352, 3, 146, 73, 0, 1351, 1349, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 1352, 1354, 1, 0, 0, 0, 1353, 1355, 3, 96, 48, 0,
	1354, 1353, 1, 0, 0, 0, 1354, 1355, 1, 0, 0, 0, 1355, 1358, 1, 0, 0, 0, 1356, 1357, 5, 174, 0, 0, 1357, 1359, 7, 15, 0, 0, 1358, 1356, 1, 0, 0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 95, 1, 0, 0, 0, 1360,
	1361, 7, 16, 0, 0, 1361, 97, 1, 0, 0, 0, 1362, 1363, 3, 32, 16, 0, 1363, 1364, 5, 154, 0, 0, 1364, 1373, 1, 0, 0, 0, 1365, 1366, 3, 32, 16, 0, 1366, 1367, 5, 157, 0, 0, 1367, 1373, 1, 0, 0, 0, 1368,
	1369, 5, 156, 0, 0, 1369, 1373, 5, 126, 0, 0, 1370, 1371, 5, 155, 0, 0, 1371, 1373, 5, 154, 0, 0, 1372, 1362, 1, 0, 0, 0, 1372, 1365, 1, 0, 0, 0, 1372, 1368, 1, 0, 0, 0, 1372, 1370, 1, 0, 0, 0,
	1373, 99, 1, 0, 0, 0, 1374, 1375, 3, 32, 16, 0, 1375, 1376, 5, 154, 0, 0, 1376, 1385, 1, 0, 0, 0, 1377, 1378, 3, 32, 16, 0, 1378, 1379, 5, 157, 0, 0, 1379, 1385, 1, 0, 0, 0, 1380, 1381, 5, 156, 0,
	0, 1381, 1385, 5, 126, 0, 0, 1382, 1383, 5, 155, 0, 0, 1383, 1385, 5, 157, 0, 0, 1384, 1374, 1, 0, 0, 0, 1384, 1377, 1, 0, 0, 0, 1384, 1380, 1, 0, 0, 0, 1384, 1382, 1, 0, 0, 0, 1385, 101, 1, 0, 0,
	0, 1386, 1387, 3, 32, 16, 0, 1387, 1388, 5, 154, 0, 0, 1388, 1394, 1, 0, 0, 0, 1389, 1390, 5, 155, 0, 0, 1390, 1394, 5, 154, 0, 0, 1391, 1392, 5, 156, 0, 0, 1392, 1394, 5, 126, 0, 0, 1393, 1386, 1,
	0, 0, 0, 1393, 1389, 1, 0, 0, 0, 1393, 1391, 1, 0, 0, 0, 1394, 103, 1, 0, 0, 0, 1395, 1396, 7, 17, 0, 0, 1396, 1397, 5, 3, 0, 0, 1397, 1398, 3, 32, 16, 0, 1398, 1399, 5, 4, 0, 0, 1399, 1400, 5, 151,
	0, 0, 1400, 1402, 5, 3, 0, 0, 1401, 1403, 3, 110, 55, 0, 1402, 1401, 1, 0, 0, 0, 1402, 1403, 1, 0, 0, 0, 1403, 1404, 1, 0, 0, 0, 1404, 1406, 3, 114, 57, 0, 1405, 1407, 3, 80, 40, 0, 1406, 1405, 1,
	0, 0, 0, 1406, 1407, 1, 0, 0, 0, 1407, 1408, 1, 0, 0, 0, 1408, 1409, 5, 4, 0, 0, 1409, 1481, 1, 0, 0, 0, 1410, 1411, 7, 18, 0, 0, 1411, 1412, 5, 3, 0, 0, 1412, 1413, 5, 4, 0, 0, 1413, 1414, 5, 151,
	0, 0, 1414, 1416, 5, 3, 0, 0, 1415, 1417, 3, 110, 55, 0, 1416, 1415, 1, 0, 0, 0, 1416, 1417, 1, 0, 0, 0, 1417, 1419, 1, 0, 0, 0, 1418, 1420, 3, 112, 56, 0, 1419, 1418, 1, 0, 0, 0, 1419, 1420, 1, 0,
	0, 0, 1420, 1421, 1, 0, 0, 0, 1421, 1481, 5, 4, 0, 0, 1422, 1423, 7, 19, 0, 0, 1423, 1424, 5, 3, 0, 0, 1424, 1425, 5, 4, 0, 0, 1425, 1426, 5, 151, 0, 0, 1426, 1428, 5, 3, 0, 0, 1427, 1429, 3, 110,
	55, 0, 1428, 1427, 1, 0, 0, 0, 1428, 1429, 1, 0, 0, 0, 1429, 1430, 1, 0, 0, 0, 1430, 1431, 3, 114, 57, 0, 1431, 1432, 5, 4, 0, 0, 1432, 1481, 1, 0, 0, 0, 1433, 1434, 7, 20, 0, 0, 1434, 1435, 5, 3,
	0, 0, 1435, 1437, 3, 32, 16, 0, 1436, 1438, 3, 106, 53, 0, 1437, 1436, 1, 0, 0, 0, 1437, 1438, 1, 0, 0, 0, 1438, 1440, 1, 0, 0, 0, 1439, 1441, 3, 108, 54, 0, 1440, 1439, 1, 0, 0, 0, 1440, 1441, 1,
	0, 0, 0, 1441, 1442, 1, 0, 0, 0, 1442, 1443, 5, 4, 0, 0, 1443, 1444, 5, 151, 0, 0, 1444, 1446, 5, 3, 0, 0, 1445, 1447, 3, 110, 55, 0, 1446, 1445, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1448, 1,
	0, 0, 0, 1448, 1449, 3, 114, 57, 0, 1449, 1450, 5, 4, 0, 0, 1450, 1481, 1, 0, 0, 0, 1451, 1452, 5, 163, 0, 0, 1452, 1453, 5, 3, 0, 0, 1453, 1454, 3, 32, 16, 0, 1454, 1455, 5, 5, 0, 0, 1455, 1456, 3,
	14, 7, 0, 1456, 1457, 5, 4, 0, 0, 1457, 1458, 5, 151, 0, 0, 1458, 1460, 5, 3, 0, 0, 1459, 1461, 3, 110, 55, 0, 1460, 1459, 1, 0, 0, 0, 1460, 1461, 1, 0, 0, 0, 1461, 1462, 1, 0, 0, 0, 1462, 1464, 3,
	114, 57, 0, 1463, 1465, 3, 80, 40, 0, 1464, 1463, 1, 0, 0, 0, 1464, 1465, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466, 1467, 5, 4, 0, 0, 1467, 1481, 1, 0, 0, 0, 1468, 1469, 5, 164, 0, 0, 1469, 1470, 5,
	3, 0, 0, 1470, 1471, 3, 32, 16, 0, 1471, 1472, 5, 4, 0, 0, 1472, 1473, 5, 151, 0, 0, 1473, 1475, 5, 3, 0, 0, 1474, 1476, 3, 110, 55, 0, 1475, 1474, 1, 0, 0, 0, 1475, 1476, 1, 0, 0, 0, 1476, 1477, 1,
	0, 0, 0, 1477, 1478, 3, 114, 57, 0, 1478, 1479, 5, 4, 0, 0, 1479, 1481, 1, 0, 0, 0, 1480, 1395, 1, 0, 0, 0, 1480, 1410, 1, 0, 0, 0, 1480, 1422, 1, 0, 0, 0, 1480, 1433, 1, 0, 0, 0, 1480, 1451, 1, 0,
	0, 0, 1480, 1468, 1, 0, 0, 0, 1481, 105, 1, 0, 0, 0, 1482, 1483, 5, 5, 0, 0, 1483, 1484, 3, 14, 7, 0, 1484, 107, 1, 0, 0, 0, 1485, 1486, 5, 5, 0, 0, 1486, 1487, 3, 14, 7, 0, 1487, 109, 1, 0, 0, 0,
	1488, 1489, 5, 152, 0, 0, 1489, 1491, 5, 40, 0, 0, 1490, 1492, 3, 32, 16, 0, 1491, 1490, 1, 0, 0, 0, 1492, 1493, 1, 0, 0, 0, 1493, 1491, 1, 0, 0, 0, 1493, 1494, 1, 0, 0, 0, 1494, 111, 1, 0, 0, 0,
	1495, 1496, 5, 109, 0, 0, 1496, 1498, 5, 40, 0, 0, 1497, 1499, 3, 32, 16, 0, 1498, 1497, 1, 0, 0, 0, 1499, 1500, 1, 0, 0, 0, 1500, 1498, 1, 0, 0, 0, 1500, 1501, 1, 0, 0, 0, 1501, 113, 1, 0, 0, 0,
	1502, 1503, 5, 109, 0, 0, 1503, 1504, 5, 40, 0, 0, 1504, 1505, 3, 116, 58, 0, 1505, 115, 1, 0, 0, 0, 1506, 1508, 3, 32, 16, 0, 1507, 1509, 3, 96, 48, 0, 1508, 1507, 1, 0, 0, 0, 1508, 1509, 1, 0, 0,
	0, 1509, 1517, 1, 0, 0, 0, 1510, 1511, 5, 5, 0, 0, 1511, 1513, 3, 32, 16, 0, 1512, 1514, 3, 96, 48, 0, 1513, 1512, 1, 0, 0, 0, 1513, 1514, 1, 0, 0, 0, 1514, 1516, 1, 0, 0, 0, 1515, 1510, 1, 0, 0, 0,
	1516, 1519, 1, 0, 0, 0, 1517, 1515, 1, 0, 0, 0, 1517, 1518, 1, 0, 0, 0, 1518, 117, 1, 0, 0, 0, 1519, 1517, 1, 0, 0, 0, 1520, 1521, 3, 44, 22, 0, 1521, 119, 1, 0, 0, 0, 1522, 1523, 3, 44, 22, 0,
	1523, 121, 1, 0, 0, 0, 1524, 1525, 7, 21, 0, 0, 1525, 123, 1, 0, 0, 0, 1526, 1527, 5, 187, 0, 0, 1527, 125, 1, 0, 0, 0, 1528, 1531, 3, 32, 16, 0, 1529, 1531, 3, 8, 4, 0, 1530, 1528, 1, 0, 0, 0,
	1530, 1529, 1, 0, 0, 0, 1531, 127, 1, 0, 0, 0, 1532, 1533, 7, 22, 0, 0, 1533, 129, 1, 0, 0, 0, 1534, 1535, 7, 23, 0, 0, 1535, 131, 1, 0, 0, 0, 1536, 1537, 3, 180, 90, 0, 1537, 133, 1, 0, 0, 0, 1538,
	1539, 3, 180, 90, 0, 1539, 135, 1, 0, 0, 0, 1540, 1541, 3, 180, 90, 0, 1541, 137, 1, 0, 0, 0, 1542, 1543, 3, 180, 90, 0, 1543, 139, 1, 0, 0, 0, 1544, 1545, 3, 180, 90, 0, 1545, 141, 1, 0, 0, 0,
	1546, 1547, 3, 180, 90, 0, 1547, 143, 1, 0, 0, 0, 1548, 1549, 3, 180, 90, 0, 1549, 145, 1, 0, 0, 0, 1550, 1551, 3, 180, 90, 0, 1551, 147, 1, 0, 0, 0, 1552, 1553, 3, 180, 90, 0, 1553, 149, 1, 0, 0,
	0, 1554, 1555, 3, 180, 90, 0, 1555, 151, 1, 0, 0, 0, 1556, 1557, 3, 180, 90, 0, 1557, 153, 1, 0, 0, 0, 1558, 1559, 3, 180, 90, 0, 1559, 155, 1, 0, 0, 0, 1560, 1561, 3, 180, 90, 0, 1561, 157, 1, 0,
	0, 0, 1562, 1563, 3, 180, 90, 0, 1563, 159, 1, 0, 0, 0, 1564, 1565, 3, 180, 90, 0, 1565, 161, 1, 0, 0, 0, 1566, 1567, 3, 180, 90, 0, 1567, 163, 1, 0, 0, 0, 1568, 1569, 3, 180, 90, 0, 1569, 165, 1,
	0, 0, 0, 1570, 1571, 3, 180, 90, 0, 1571, 167, 1, 0, 0, 0, 1572, 1573, 3, 180, 90, 0, 1573, 169, 1, 0, 0, 0, 1574, 1575, 3, 180, 90, 0, 1575, 171, 1, 0, 0, 0, 1576, 1577, 3, 180, 90, 0, 1577, 173,
	1, 0, 0, 0, 1578, 1579, 3, 180, 90, 0, 1579, 175, 1, 0, 0, 0, 1580, 1581, 3, 180, 90, 0, 1581, 177, 1, 0, 0, 0, 1582, 1583, 3, 180, 90, 0, 1583, 179, 1, 0, 0, 0, 1584, 1592, 5, 184, 0, 0, 1585,
	1592, 3, 130, 65, 0, 1586, 1592, 5, 187, 0, 0, 1587, 1588, 5, 3, 0, 0, 1588, 1589, 3, 180, 90, 0, 1589, 1590, 5, 4, 0, 0, 1590, 1592, 1, 0, 0, 0, 1591, 1584, 1, 0, 0, 0, 1591, 1585, 1, 0, 0, 0,
	1591, 1586, 1, 0, 0, 0, 1591, 1587, 1, 0, 0, 0, 1592, 181, 1, 0, 0, 0, 218, 185, 193, 200, 205, 211, 217, 219, 225, 229, 233, 236, 240, 245, 251, 263, 267, 272, 275, 278, 283, 286, 300, 307, 314,
	316, 319, 325, 330, 338, 343, 358, 364, 374, 379, 389, 393, 395, 399, 404, 406, 414, 430, 440, 445, 453, 465, 470, 478, 485, 493, 498, 507, 514, 518, 522, 525, 533, 546, 549, 557, 566, 570, 575,
	605, 617, 622, 634, 640, 647, 651, 661, 664, 670, 676, 685, 688, 692, 694, 696, 705, 712, 719, 725, 730, 738, 743, 752, 763, 770, 774, 777, 781, 791, 797, 799, 807, 814, 821, 826, 828, 833, 836,
	844, 848, 851, 857, 861, 866, 873, 882, 886, 888, 892, 901, 906, 908, 921, 924, 933, 944, 951, 954, 959, 963, 966, 969, 974, 978, 983, 986, 989, 994, 998, 1001, 1008, 1013, 1022, 1027, 1030, 1038,
	1042, 1050, 1053, 1055, 1064, 1067, 1069, 1073, 1077, 1081, 1084, 1095, 1100, 1104, 1108, 1111, 1116, 1122, 1129, 1136, 1141, 1149, 1157, 1162, 1169, 1179, 1188, 1191, 1200, 1204, 1212, 1221, 1224,
	1233, 1236, 1239, 1242, 1252, 1261, 1270, 1274, 1281, 1288, 1292, 1296, 1305, 1309, 1313, 1318, 1322, 1329, 1339, 1346, 1351, 1354, 1358, 1372, 1384, 1393, 1402, 1406, 1416, 1419, 1428, 1437, 1440,
	1446, 1460, 1464, 1475, 1480, 1493, 1500, 1508, 1513, 1517, 1530, 1591,
];

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4.dfa.DFA(ds, index));

const sharedContextCache = new antlr4.PredictionContextCache();

export class SQLiteParser extends antlr4.Parser {
	static grammarFileName = "SQLiteParser.g4";
	static literalNames = [
		null,
		"';'",
		"'.'",
		"'('",
		"')'",
		"','",
		"'='",
		"'*'",
		"'+'",
		"'-'",
		"'~'",
		"'||'",
		"'/'",
		"'%'",
		"'<<'",
		"'>>'",
		"'&'",
		"'|'",
		"'<'",
		"'<='",
		"'>'",
		"'>='",
		"'=='",
		"'!='",
		"'<>'",
	];
	static symbolicNames = [
		null,
		"SCOL",
		"DOT",
		"OPEN_PAR",
		"CLOSE_PAR",
		"COMMA",
		"ASSIGN",
		"STAR",
		"PLUS",
		"MINUS",
		"TILDE",
		"PIPE2",
		"DIV",
		"MOD",
		"LT2",
		"GT2",
		"AMP",
		"PIPE",
		"LT",
		"LT_EQ",
		"GT",
		"GT_EQ",
		"EQ",
		"NOT_EQ1",
		"NOT_EQ2",
		"ABORT_",
		"ACTION_",
		"ADD_",
		"AFTER_",
		"ALL_",
		"ALTER_",
		"ANALYZE_",
		"AND_",
		"AS_",
		"ASC_",
		"ATTACH_",
		"AUTOINCREMENT_",
		"BEFORE_",
		"BEGIN_",
		"BETWEEN_",
		"BY_",
		"CASCADE_",
		"CASE_",
		"CAST_",
		"CHECK_",
		"COLLATE_",
		"COLUMN_",
		"COMMIT_",
		"CONFLICT_",
		"CONSTRAINT_",
		"CREATE_",
		"CROSS_",
		"CURRENT_DATE_",
		"CURRENT_TIME_",
		"CURRENT_TIMESTAMP_",
		"DATABASE_",
		"DEFAULT_",
		"DEFERRABLE_",
		"DEFERRED_",
		"DELETE_",
		"DESC_",
		"DETACH_",
		"DISTINCT_",
		"DROP_",
		"EACH_",
		"ELSE_",
		"END_",
		"ESCAPE_",
		"EXCEPT_",
		"EXCLUSIVE_",
		"EXISTS_",
		"EXPLAIN_",
		"FAIL_",
		"FOR_",
		"FOREIGN_",
		"FROM_",
		"FULL_",
		"GLOB_",
		"GROUP_",
		"HAVING_",
		"IF_",
		"IGNORE_",
		"IMMEDIATE_",
		"IN_",
		"INDEX_",
		"INDEXED_",
		"INITIALLY_",
		"INNER_",
		"INSERT_",
		"INSTEAD_",
		"INTERSECT_",
		"INTO_",
		"IS_",
		"ISNULL_",
		"JOIN_",
		"KEY_",
		"LEFT_",
		"LIKE_",
		"LIMIT_",
		"MATCH_",
		"NATURAL_",
		"NO_",
		"NOT_",
		"NOTNULL_",
		"NULL_",
		"OF_",
		"OFFSET_",
		"ON_",
		"OR_",
		"ORDER_",
		"OUTER_",
		"PLAN_",
		"PRAGMA_",
		"PRIMARY_",
		"QUERY_",
		"RAISE_",
		"RECURSIVE_",
		"REFERENCES_",
		"REGEXP_",
		"REINDEX_",
		"RELEASE_",
		"RENAME_",
		"REPLACE_",
		"RESTRICT_",
		"RIGHT_",
		"ROLLBACK_",
		"ROW_",
		"ROWS_",
		"SAVEPOINT_",
		"SELECT_",
		"SET_",
		"TABLE_",
		"TEMP_",
		"TEMPORARY_",
		"THEN_",
		"TO_",
		"TRANSACTION_",
		"TRIGGER_",
		"UNION_",
		"UNIQUE_",
		"UPDATE_",
		"USING_",
		"VACUUM_",
		"VALUES_",
		"VIEW_",
		"VIRTUAL_",
		"WHEN_",
		"WHERE_",
		"WITH_",
		"WITHOUT_",
		"FIRST_VALUE_",
		"OVER_",
		"PARTITION_",
		"RANGE_",
		"PRECEDING_",
		"UNBOUNDED_",
		"CURRENT_",
		"FOLLOWING_",
		"CUME_DIST_",
		"DENSE_RANK_",
		"LAG_",
		"LAST_VALUE_",
		"LEAD_",
		"NTH_VALUE_",
		"NTILE_",
		"PERCENT_RANK_",
		"RANK_",
		"ROW_NUMBER_",
		"GENERATED_",
		"ALWAYS_",
		"STORED_",
		"TRUE_",
		"FALSE_",
		"WINDOW_",
		"NULLS_",
		"FIRST_",
		"LAST_",
		"FILTER_",
		"GROUPS_",
		"EXCLUDE_",
		"TIES_",
		"OTHERS_",
		"DO_",
		"NOTHING_",
		"IDENTIFIER",
		"NUMERIC_LITERAL",
		"BIND_PARAMETER",
		"STRING_LITERAL",
		"BLOB_LITERAL",
		"SINGLE_LINE_COMMENT",
		"MULTILINE_COMMENT",
		"SPACES",
		"UNEXPECTED_CHAR",
	];
	static ruleNames = [
		"parse",
		"sql_stmt_list",
		"sql_stmt",
		"indexed_column",
		"column_def",
		"type_name",
		"column_constraint",
		"signed_number",
		"table_constraint",
		"foreign_key_clause",
		"conflict_clause",
		"with_clause",
		"cte_table_name",
		"recursive_cte",
		"common_table_expression",
		"delete_stmt",
		"expr",
		"raise_function",
		"literal_value",
		"insert_stmt",
		"upsert_clause",
		"pragma_value",
		"select_stmt",
		"join_clause",
		"select_core",
		"factored_select_stmt",
		"simple_select_stmt",
		"compound_select_stmt",
		"table_or_subquery",
		"result_column",
		"join_operator",
		"join_constraint",
		"compound_operator",
		"update_stmt",
		"column_name_list",
		"qualified_table_name",
		"filter_clause",
		"window_defn",
		"over_clause",
		"frame_spec",
		"frame_clause",
		"simple_function_invocation",
		"aggregate_function_invocation",
		"window_function_invocation",
		"common_table_stmt",
		"order_by_stmt",
		"limit_stmt",
		"ordering_term",
		"asc_desc",
		"frame_left",
		"frame_right",
		"frame_single",
		"window_function",
		"of_OF_fset",
		"default_DEFAULT__value",
		"partition_by",
		"order_by_expr",
		"order_by_expr_asc_desc",
		"expr_asc_desc",
		"initial_select",
		"recursive__select",
		"unary_operator",
		"error_message",
		"module_argument",
		"column_alias",
		"keyword",
		"name",
		"function_name",
		"schema_name",
		"table_name",
		"table_or_index_name",
		"new_table_name",
		"column_name",
		"collation_name",
		"foreign_table",
		"index_name",
		"trigger_name",
		"view_name",
		"module_name",
		"pragma_name",
		"savepoint_name",
		"table_alias",
		"transaction_name",
		"window_name",
		"alias",
		"filename",
		"base_window_name",
		"simple_func",
		"aggregate_func",
		"table_function_name",
		"any_name",
	];

	constructor(input) {
		super(input);
		this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
		this.ruleNames = SQLiteParser.ruleNames;
		this.literalNames = SQLiteParser.literalNames;
		this.symbolicNames = SQLiteParser.symbolicNames;
	}

	get atn() {
		return atn;
	}

	sempred(localctx, ruleIndex, predIndex) {
		switch (ruleIndex) {
			case 16:
				return this.expr_sempred(localctx, predIndex);
			default:
				throw "No predicate with index:" + ruleIndex;
		}
	}

	expr_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 0:
				return this.precpred(this._ctx, 20);
			case 1:
				return this.precpred(this._ctx, 19);
			case 2:
				return this.precpred(this._ctx, 18);
			case 3:
				return this.precpred(this._ctx, 17);
			case 4:
				return this.precpred(this._ctx, 16);
			case 5:
				return this.precpred(this._ctx, 15);
			case 6:
				return this.precpred(this._ctx, 14);
			case 7:
				return this.precpred(this._ctx, 13);
			case 8:
				return this.precpred(this._ctx, 6);
			case 9:
				return this.precpred(this._ctx, 5);
			case 10:
				return this.precpred(this._ctx, 9);
			case 11:
				return this.precpred(this._ctx, 8);
			case 12:
				return this.precpred(this._ctx, 7);
			case 13:
				return this.precpred(this._ctx, 4);
			default:
				throw "No predicate with index:" + predIndex;
		}
	}

	parse() {
		let localctx = new ParseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, SQLiteParser.RULE_parse);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 185;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (
				_la === SQLiteParser.SCOL ||
				(((_la - 56) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (SQLiteParser.DEFAULT_ - 56)) | (1 << (SQLiteParser.DELETE_ - 56)) | (1 << (SQLiteParser.EXPLAIN_ - 56)))) !== 0) ||
				_la === SQLiteParser.INSERT_ ||
				(((_la - 122) & ~0x1f) == 0 &&
					((1 << (_la - 122)) &
						((1 << (SQLiteParser.REPLACE_ - 122)) |
							(1 << (SQLiteParser.SELECT_ - 122)) |
							(1 << (SQLiteParser.UPDATE_ - 122)) |
							(1 << (SQLiteParser.VALUES_ - 122)) |
							(1 << (SQLiteParser.WITH_ - 122)))) !==
						0)
			) {
				this.state = 182;
				this.sql_stmt_list();
				this.state = 187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 188;
			this.match(SQLiteParser.EOF);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	sql_stmt_list() {
		let localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, SQLiteParser.RULE_sql_stmt_list);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 193;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.SCOL) {
				this.state = 190;
				this.match(SQLiteParser.SCOL);
				this.state = 195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 196;
			this.sql_stmt();
			this.state = 205;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						this.state = 197;
						this.match(SQLiteParser.SCOL);
						this.state = 200;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === SQLiteParser.SCOL);
					this.state = 202;
					this.sql_stmt();
				}
				this.state = 207;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
			}

			this.state = 211;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 208;
					this.match(SQLiteParser.SCOL);
				}
				this.state = 213;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	sql_stmt() {
		let localctx = new Sql_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, SQLiteParser.RULE_sql_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 219;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.EXPLAIN_) {
				this.state = 214;
				this.match(SQLiteParser.EXPLAIN_);
				this.state = 217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLiteParser.QUERY_) {
					this.state = 215;
					this.match(SQLiteParser.QUERY_);
					this.state = 216;
					this.match(SQLiteParser.PLAN_);
				}
			}

			this.state = 225;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
			switch (la_) {
				case 1:
					this.state = 221;
					this.delete_stmt();
					break;

				case 2:
					this.state = 222;
					this.insert_stmt();
					break;

				case 3:
					this.state = 223;
					this.select_stmt();
					break;

				case 4:
					this.state = 224;
					this.update_stmt();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexed_column() {
		let localctx = new Indexed_columnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, SQLiteParser.RULE_indexed_column);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 229;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
			switch (la_) {
				case 1:
					this.state = 227;
					this.column_name();
					break;

				case 2:
					this.state = 228;
					this.expr(0);
					break;
			}
			this.state = 233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.COLLATE_) {
				this.state = 231;
				this.match(SQLiteParser.COLLATE_);
				this.state = 232;
				this.collation_name();
			}

			this.state = 236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
				this.state = 235;
				this.asc_desc();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	column_def() {
		let localctx = new Column_defContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, SQLiteParser.RULE_column_def);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 238;
			this.column_name();
			this.state = 240;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
			if (la_ === 1) {
				this.state = 239;
				this.type_name();
			}
			this.state = 245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (
				(((_la - 33) & ~0x1f) == 0 &&
					((1 << (_la - 33)) &
						((1 << (SQLiteParser.AS_ - 33)) |
							(1 << (SQLiteParser.CHECK_ - 33)) |
							(1 << (SQLiteParser.COLLATE_ - 33)) |
							(1 << (SQLiteParser.CONSTRAINT_ - 33)) |
							(1 << (SQLiteParser.DEFAULT_ - 33)))) !==
						0) ||
				(((_la - 102) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SQLiteParser.NOT_ - 102)) | (1 << (SQLiteParser.PRIMARY_ - 102)) | (1 << (SQLiteParser.REFERENCES_ - 102)))) !== 0) ||
				_la === SQLiteParser.UNIQUE_ ||
				_la === SQLiteParser.GENERATED_
			) {
				this.state = 242;
				this.column_constraint();
				this.state = 247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	type_name() {
		let localctx = new Type_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, SQLiteParser.RULE_type_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 249;
			this._errHandler.sync(this);
			var _alt = 1 + 1;
			do {
				switch (_alt) {
					case 1 + 1:
						this.state = 248;
						this.name();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 251;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 13, this._ctx);
			} while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
			this.state = 263;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);
			if (la_ === 1) {
				this.state = 253;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 254;
				this.signed_number();
				this.state = 255;
				this.match(SQLiteParser.CLOSE_PAR);
			} else if (la_ === 2) {
				this.state = 257;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 258;
				this.signed_number();
				this.state = 259;
				this.match(SQLiteParser.COMMA);
				this.state = 260;
				this.signed_number();
				this.state = 261;
				this.match(SQLiteParser.CLOSE_PAR);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	column_constraint() {
		let localctx = new Column_constraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, SQLiteParser.RULE_column_constraint);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 267;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.CONSTRAINT_) {
				this.state = 265;
				this.match(SQLiteParser.CONSTRAINT_);
				this.state = 266;
				this.name();
			}

			this.state = 316;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.PRIMARY_:
					this.state = 269;
					this.match(SQLiteParser.PRIMARY_);
					this.state = 270;
					this.match(SQLiteParser.KEY_);
					this.state = 272;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
						this.state = 271;
						this.asc_desc();
					}

					this.state = 275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ON_) {
						this.state = 274;
						this.conflict_clause();
					}

					this.state = 278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.AUTOINCREMENT_) {
						this.state = 277;
						this.match(SQLiteParser.AUTOINCREMENT_);
					}

					break;
				case SQLiteParser.NOT_:
				case SQLiteParser.UNIQUE_:
					this.state = 283;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLiteParser.NOT_:
							this.state = 280;
							this.match(SQLiteParser.NOT_);
							this.state = 281;
							this.match(SQLiteParser.NULL_);
							break;
						case SQLiteParser.UNIQUE_:
							this.state = 282;
							this.match(SQLiteParser.UNIQUE_);
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ON_) {
						this.state = 285;
						this.conflict_clause();
					}

					break;
				case SQLiteParser.CHECK_:
					this.state = 288;
					this.match(SQLiteParser.CHECK_);
					this.state = 289;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 290;
					this.expr(0);
					this.state = 291;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.DEFAULT_:
					this.state = 293;
					this.match(SQLiteParser.DEFAULT_);
					this.state = 300;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
					switch (la_) {
						case 1:
							this.state = 294;
							this.signed_number();
							break;

						case 2:
							this.state = 295;
							this.literal_value();
							break;

						case 3:
							this.state = 296;
							this.match(SQLiteParser.OPEN_PAR);
							this.state = 297;
							this.expr(0);
							this.state = 298;
							this.match(SQLiteParser.CLOSE_PAR);
							break;
					}
					break;
				case SQLiteParser.COLLATE_:
					this.state = 302;
					this.match(SQLiteParser.COLLATE_);
					this.state = 303;
					this.collation_name();
					break;
				case SQLiteParser.REFERENCES_:
					this.state = 304;
					this.foreign_key_clause();
					break;
				case SQLiteParser.AS_:
				case SQLiteParser.GENERATED_:
					this.state = 307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.GENERATED_) {
						this.state = 305;
						this.match(SQLiteParser.GENERATED_);
						this.state = 306;
						this.match(SQLiteParser.ALWAYS_);
					}

					this.state = 309;
					this.match(SQLiteParser.AS_);
					this.state = 310;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 311;
					this.expr(0);
					this.state = 312;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 314;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.VIRTUAL_ || _la === SQLiteParser.STORED_) {
						this.state = 313;
						_la = this._input.LA(1);
						if (!(_la === SQLiteParser.VIRTUAL_ || _la === SQLiteParser.STORED_)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
					}

					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	signed_number() {
		let localctx = new Signed_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, SQLiteParser.RULE_signed_number);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS) {
				this.state = 318;
				_la = this._input.LA(1);
				if (!(_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
			}

			this.state = 321;
			this.match(SQLiteParser.NUMERIC_LITERAL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_constraint() {
		let localctx = new Table_constraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, SQLiteParser.RULE_table_constraint);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.CONSTRAINT_) {
				this.state = 323;
				this.match(SQLiteParser.CONSTRAINT_);
				this.state = 324;
				this.name();
			}

			this.state = 364;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.PRIMARY_:
				case SQLiteParser.UNIQUE_:
					this.state = 330;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLiteParser.PRIMARY_:
							this.state = 327;
							this.match(SQLiteParser.PRIMARY_);
							this.state = 328;
							this.match(SQLiteParser.KEY_);
							break;
						case SQLiteParser.UNIQUE_:
							this.state = 329;
							this.match(SQLiteParser.UNIQUE_);
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 332;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 333;
					this.indexed_column();
					this.state = 338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 334;
						this.match(SQLiteParser.COMMA);
						this.state = 335;
						this.indexed_column();
						this.state = 340;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 341;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ON_) {
						this.state = 342;
						this.conflict_clause();
					}

					break;
				case SQLiteParser.CHECK_:
					this.state = 345;
					this.match(SQLiteParser.CHECK_);
					this.state = 346;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 347;
					this.expr(0);
					this.state = 348;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.FOREIGN_:
					this.state = 350;
					this.match(SQLiteParser.FOREIGN_);
					this.state = 351;
					this.match(SQLiteParser.KEY_);
					this.state = 352;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 353;
					this.column_name();
					this.state = 358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 354;
						this.match(SQLiteParser.COMMA);
						this.state = 355;
						this.column_name();
						this.state = 360;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 361;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 362;
					this.foreign_key_clause();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	foreign_key_clause() {
		let localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, SQLiteParser.RULE_foreign_key_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 366;
			this.match(SQLiteParser.REFERENCES_);
			this.state = 367;
			this.foreign_table();
			this.state = 379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.OPEN_PAR) {
				this.state = 368;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 369;
				this.column_name();
				this.state = 374;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SQLiteParser.COMMA) {
					this.state = 370;
					this.match(SQLiteParser.COMMA);
					this.state = 371;
					this.column_name();
					this.state = 376;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 377;
				this.match(SQLiteParser.CLOSE_PAR);
			}

			this.state = 395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.MATCH_ || _la === SQLiteParser.ON_) {
				this.state = 393;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case SQLiteParser.ON_:
						this.state = 381;
						this.match(SQLiteParser.ON_);
						this.state = 382;
						_la = this._input.LA(1);
						if (!(_la === SQLiteParser.DELETE_ || _la === SQLiteParser.UPDATE_)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 389;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
							case SQLiteParser.SET_:
								this.state = 383;
								this.match(SQLiteParser.SET_);
								this.state = 384;
								_la = this._input.LA(1);
								if (!(_la === SQLiteParser.DEFAULT_ || _la === SQLiteParser.NULL_)) {
									this._errHandler.recoverInline(this);
								} else {
									this._errHandler.reportMatch(this);
									this.consume();
								}
								break;
							case SQLiteParser.CASCADE_:
								this.state = 385;
								this.match(SQLiteParser.CASCADE_);
								break;
							case SQLiteParser.RESTRICT_:
								this.state = 386;
								this.match(SQLiteParser.RESTRICT_);
								break;
							case SQLiteParser.NO_:
								this.state = 387;
								this.match(SQLiteParser.NO_);
								this.state = 388;
								this.match(SQLiteParser.ACTION_);
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						break;
					case SQLiteParser.MATCH_:
						this.state = 391;
						this.match(SQLiteParser.MATCH_);
						this.state = 392;
						this.name();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 406;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
			if (la_ === 1) {
				this.state = 399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLiteParser.NOT_) {
					this.state = 398;
					this.match(SQLiteParser.NOT_);
				}

				this.state = 401;
				this.match(SQLiteParser.DEFERRABLE_);
				this.state = 404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLiteParser.INITIALLY_) {
					this.state = 402;
					this.match(SQLiteParser.INITIALLY_);
					this.state = 403;
					_la = this._input.LA(1);
					if (!(_la === SQLiteParser.DEFERRED_ || _la === SQLiteParser.IMMEDIATE_)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
				}
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	conflict_clause() {
		let localctx = new Conflict_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, SQLiteParser.RULE_conflict_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 408;
			this.match(SQLiteParser.ON_);
			this.state = 409;
			this.match(SQLiteParser.CONFLICT_);
			this.state = 410;
			_la = this._input.LA(1);
			if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	with_clause() {
		let localctx = new With_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, SQLiteParser.RULE_with_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 412;
			this.match(SQLiteParser.WITH_);
			this.state = 414;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
			if (la_ === 1) {
				this.state = 413;
				this.match(SQLiteParser.RECURSIVE_);
			}
			this.state = 416;
			this.cte_table_name();
			this.state = 417;
			this.match(SQLiteParser.AS_);
			this.state = 418;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 419;
			this.select_stmt();
			this.state = 420;
			this.match(SQLiteParser.CLOSE_PAR);
			this.state = 430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 421;
				this.match(SQLiteParser.COMMA);
				this.state = 422;
				this.cte_table_name();
				this.state = 423;
				this.match(SQLiteParser.AS_);
				this.state = 424;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 425;
				this.select_stmt();
				this.state = 426;
				this.match(SQLiteParser.CLOSE_PAR);
				this.state = 432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	cte_table_name() {
		let localctx = new Cte_table_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, SQLiteParser.RULE_cte_table_name);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 433;
			this.table_name();
			this.state = 445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.OPEN_PAR) {
				this.state = 434;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 435;
				this.column_name();
				this.state = 440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SQLiteParser.COMMA) {
					this.state = 436;
					this.match(SQLiteParser.COMMA);
					this.state = 437;
					this.column_name();
					this.state = 442;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 443;
				this.match(SQLiteParser.CLOSE_PAR);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	recursive_cte() {
		let localctx = new Recursive_cteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, SQLiteParser.RULE_recursive_cte);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 447;
			this.cte_table_name();
			this.state = 448;
			this.match(SQLiteParser.AS_);
			this.state = 449;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 450;
			this.initial_select();
			this.state = 451;
			this.match(SQLiteParser.UNION_);
			this.state = 453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ALL_) {
				this.state = 452;
				this.match(SQLiteParser.ALL_);
			}

			this.state = 455;
			this.recursive__select();
			this.state = 456;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	common_table_expression() {
		let localctx = new Common_table_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, SQLiteParser.RULE_common_table_expression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 458;
			this.table_name();
			this.state = 470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.OPEN_PAR) {
				this.state = 459;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 460;
				this.column_name();
				this.state = 465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SQLiteParser.COMMA) {
					this.state = 461;
					this.match(SQLiteParser.COMMA);
					this.state = 462;
					this.column_name();
					this.state = 467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 468;
				this.match(SQLiteParser.CLOSE_PAR);
			}

			this.state = 472;
			this.match(SQLiteParser.AS_);
			this.state = 473;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 474;
			this.select_stmt();
			this.state = 475;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	delete_stmt() {
		let localctx = new Delete_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, SQLiteParser.RULE_delete_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WITH_) {
				this.state = 477;
				this.with_clause();
			}

			this.state = 480;
			this.match(SQLiteParser.DELETE_);
			this.state = 481;
			this.match(SQLiteParser.FROM_);
			this.state = 482;
			this.qualified_table_name();
			this.state = 485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WHERE_) {
				this.state = 483;
				this.match(SQLiteParser.WHERE_);
				this.state = 484;
				this.expr(0);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	expr(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new ExprContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 32;
		this.enterRecursionRule(localctx, 32, SQLiteParser.RULE_expr, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 575;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
			switch (la_) {
				case 1:
					this.state = 488;
					this.literal_value();
					break;

				case 2:
					this.state = 489;
					this.match(SQLiteParser.BIND_PARAMETER);
					break;

				case 3:
					this.state = 498;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 50, this._ctx);
					if (la_ === 1) {
						this.state = 493;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
						if (la_ === 1) {
							this.state = 490;
							this.schema_name();
							this.state = 491;
							this.match(SQLiteParser.DOT);
						}
						this.state = 495;
						this.table_name();
						this.state = 496;
						this.match(SQLiteParser.DOT);
					}
					this.state = 500;
					this.column_name();
					break;

				case 4:
					this.state = 501;
					this.unary_operator();
					this.state = 502;
					this.expr(21);
					break;

				case 5:
					this.state = 504;
					this.function_name();
					this.state = 505;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 518;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLiteParser.OPEN_PAR:
						case SQLiteParser.PLUS:
						case SQLiteParser.MINUS:
						case SQLiteParser.TILDE:
						case SQLiteParser.ABORT_:
						case SQLiteParser.ACTION_:
						case SQLiteParser.ADD_:
						case SQLiteParser.AFTER_:
						case SQLiteParser.ALL_:
						case SQLiteParser.ALTER_:
						case SQLiteParser.ANALYZE_:
						case SQLiteParser.AND_:
						case SQLiteParser.AS_:
						case SQLiteParser.ASC_:
						case SQLiteParser.ATTACH_:
						case SQLiteParser.AUTOINCREMENT_:
						case SQLiteParser.BEFORE_:
						case SQLiteParser.BEGIN_:
						case SQLiteParser.BETWEEN_:
						case SQLiteParser.BY_:
						case SQLiteParser.CASCADE_:
						case SQLiteParser.CASE_:
						case SQLiteParser.CAST_:
						case SQLiteParser.CHECK_:
						case SQLiteParser.COLLATE_:
						case SQLiteParser.COLUMN_:
						case SQLiteParser.COMMIT_:
						case SQLiteParser.CONFLICT_:
						case SQLiteParser.CONSTRAINT_:
						case SQLiteParser.CREATE_:
						case SQLiteParser.CROSS_:
						case SQLiteParser.CURRENT_DATE_:
						case SQLiteParser.CURRENT_TIME_:
						case SQLiteParser.CURRENT_TIMESTAMP_:
						case SQLiteParser.DATABASE_:
						case SQLiteParser.DEFAULT_:
						case SQLiteParser.DEFERRABLE_:
						case SQLiteParser.DEFERRED_:
						case SQLiteParser.DELETE_:
						case SQLiteParser.DESC_:
						case SQLiteParser.DETACH_:
						case SQLiteParser.DISTINCT_:
						case SQLiteParser.DROP_:
						case SQLiteParser.EACH_:
						case SQLiteParser.ELSE_:
						case SQLiteParser.END_:
						case SQLiteParser.ESCAPE_:
						case SQLiteParser.EXCEPT_:
						case SQLiteParser.EXCLUSIVE_:
						case SQLiteParser.EXISTS_:
						case SQLiteParser.EXPLAIN_:
						case SQLiteParser.FAIL_:
						case SQLiteParser.FOR_:
						case SQLiteParser.FOREIGN_:
						case SQLiteParser.FROM_:
						case SQLiteParser.FULL_:
						case SQLiteParser.GLOB_:
						case SQLiteParser.GROUP_:
						case SQLiteParser.HAVING_:
						case SQLiteParser.IF_:
						case SQLiteParser.IGNORE_:
						case SQLiteParser.IMMEDIATE_:
						case SQLiteParser.IN_:
						case SQLiteParser.INDEX_:
						case SQLiteParser.INDEXED_:
						case SQLiteParser.INITIALLY_:
						case SQLiteParser.INNER_:
						case SQLiteParser.INSERT_:
						case SQLiteParser.INSTEAD_:
						case SQLiteParser.INTERSECT_:
						case SQLiteParser.INTO_:
						case SQLiteParser.IS_:
						case SQLiteParser.ISNULL_:
						case SQLiteParser.JOIN_:
						case SQLiteParser.KEY_:
						case SQLiteParser.LEFT_:
						case SQLiteParser.LIKE_:
						case SQLiteParser.LIMIT_:
						case SQLiteParser.MATCH_:
						case SQLiteParser.NATURAL_:
						case SQLiteParser.NO_:
						case SQLiteParser.NOT_:
						case SQLiteParser.NOTNULL_:
						case SQLiteParser.NULL_:
						case SQLiteParser.OF_:
						case SQLiteParser.OFFSET_:
						case SQLiteParser.ON_:
						case SQLiteParser.OR_:
						case SQLiteParser.ORDER_:
						case SQLiteParser.OUTER_:
						case SQLiteParser.PLAN_:
						case SQLiteParser.PRAGMA_:
						case SQLiteParser.PRIMARY_:
						case SQLiteParser.QUERY_:
						case SQLiteParser.RAISE_:
						case SQLiteParser.RECURSIVE_:
						case SQLiteParser.REFERENCES_:
						case SQLiteParser.REGEXP_:
						case SQLiteParser.REINDEX_:
						case SQLiteParser.RELEASE_:
						case SQLiteParser.RENAME_:
						case SQLiteParser.REPLACE_:
						case SQLiteParser.RESTRICT_:
						case SQLiteParser.RIGHT_:
						case SQLiteParser.ROLLBACK_:
						case SQLiteParser.ROW_:
						case SQLiteParser.ROWS_:
						case SQLiteParser.SAVEPOINT_:
						case SQLiteParser.SELECT_:
						case SQLiteParser.SET_:
						case SQLiteParser.TABLE_:
						case SQLiteParser.TEMP_:
						case SQLiteParser.TEMPORARY_:
						case SQLiteParser.THEN_:
						case SQLiteParser.TO_:
						case SQLiteParser.TRANSACTION_:
						case SQLiteParser.TRIGGER_:
						case SQLiteParser.UNION_:
						case SQLiteParser.UNIQUE_:
						case SQLiteParser.UPDATE_:
						case SQLiteParser.USING_:
						case SQLiteParser.VACUUM_:
						case SQLiteParser.VALUES_:
						case SQLiteParser.VIEW_:
						case SQLiteParser.VIRTUAL_:
						case SQLiteParser.WHEN_:
						case SQLiteParser.WHERE_:
						case SQLiteParser.WITH_:
						case SQLiteParser.WITHOUT_:
						case SQLiteParser.FIRST_VALUE_:
						case SQLiteParser.OVER_:
						case SQLiteParser.PARTITION_:
						case SQLiteParser.RANGE_:
						case SQLiteParser.PRECEDING_:
						case SQLiteParser.UNBOUNDED_:
						case SQLiteParser.CURRENT_:
						case SQLiteParser.FOLLOWING_:
						case SQLiteParser.CUME_DIST_:
						case SQLiteParser.DENSE_RANK_:
						case SQLiteParser.LAG_:
						case SQLiteParser.LAST_VALUE_:
						case SQLiteParser.LEAD_:
						case SQLiteParser.NTH_VALUE_:
						case SQLiteParser.NTILE_:
						case SQLiteParser.PERCENT_RANK_:
						case SQLiteParser.RANK_:
						case SQLiteParser.ROW_NUMBER_:
						case SQLiteParser.GENERATED_:
						case SQLiteParser.ALWAYS_:
						case SQLiteParser.STORED_:
						case SQLiteParser.TRUE_:
						case SQLiteParser.FALSE_:
						case SQLiteParser.WINDOW_:
						case SQLiteParser.NULLS_:
						case SQLiteParser.FIRST_:
						case SQLiteParser.LAST_:
						case SQLiteParser.FILTER_:
						case SQLiteParser.GROUPS_:
						case SQLiteParser.EXCLUDE_:
						case SQLiteParser.IDENTIFIER:
						case SQLiteParser.NUMERIC_LITERAL:
						case SQLiteParser.BIND_PARAMETER:
						case SQLiteParser.STRING_LITERAL:
						case SQLiteParser.BLOB_LITERAL:
							this.state = 507;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
							if (la_ === 1) {
								this.state = 506;
								this.match(SQLiteParser.DISTINCT_);
							}
							this.state = 509;
							this.expr(0);
							this.state = 514;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === SQLiteParser.COMMA) {
								this.state = 510;
								this.match(SQLiteParser.COMMA);
								this.state = 511;
								this.expr(0);
								this.state = 516;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							break;
						case SQLiteParser.STAR:
							this.state = 517;
							this.match(SQLiteParser.STAR);
							break;
						case SQLiteParser.CLOSE_PAR:
							break;
						default:
							break;
					}
					this.state = 520;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 522;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
					if (la_ === 1) {
						this.state = 521;
						this.filter_clause();
					}
					this.state = 525;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
					if (la_ === 1) {
						this.state = 524;
						this.over_clause();
					}
					break;

				case 6:
					this.state = 527;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 528;
					this.expr(0);
					this.state = 533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 529;
						this.match(SQLiteParser.COMMA);
						this.state = 530;
						this.expr(0);
						this.state = 535;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 536;
					this.match(SQLiteParser.CLOSE_PAR);
					break;

				case 7:
					this.state = 538;
					this.match(SQLiteParser.CAST_);
					this.state = 539;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 540;
					this.expr(0);
					this.state = 541;
					this.match(SQLiteParser.AS_);
					this.state = 542;
					this.type_name();
					this.state = 543;
					this.match(SQLiteParser.CLOSE_PAR);
					break;

				case 8:
					this.state = 549;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.EXISTS_ || _la === SQLiteParser.NOT_) {
						this.state = 546;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === SQLiteParser.NOT_) {
							this.state = 545;
							this.match(SQLiteParser.NOT_);
						}

						this.state = 548;
						this.match(SQLiteParser.EXISTS_);
					}

					this.state = 551;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 552;
					this.select_stmt();
					this.state = 553;
					this.match(SQLiteParser.CLOSE_PAR);
					break;

				case 9:
					this.state = 555;
					this.match(SQLiteParser.CASE_);
					this.state = 557;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
					if (la_ === 1) {
						this.state = 556;
						this.expr(0);
					}
					this.state = 564;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						this.state = 559;
						this.match(SQLiteParser.WHEN_);
						this.state = 560;
						this.expr(0);
						this.state = 561;
						this.match(SQLiteParser.THEN_);
						this.state = 562;
						this.expr(0);
						this.state = 566;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === SQLiteParser.WHEN_);
					this.state = 570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ELSE_) {
						this.state = 568;
						this.match(SQLiteParser.ELSE_);
						this.state = 569;
						this.expr(0);
					}

					this.state = 572;
					this.match(SQLiteParser.END_);
					break;

				case 10:
					this.state = 574;
					this.raise_function();
					break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 696;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 694;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
					switch (la_) {
						case 1:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 577;
							if (!this.precpred(this._ctx, 20)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
							}
							this.state = 578;
							this.match(SQLiteParser.PIPE2);
							this.state = 579;
							this.expr(21);
							break;

						case 2:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 580;
							if (!this.precpred(this._ctx, 19)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
							}
							this.state = 581;
							_la = this._input.LA(1);
							if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) !== 0)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 582;
							this.expr(20);
							break;

						case 3:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 583;
							if (!this.precpred(this._ctx, 18)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
							}
							this.state = 584;
							_la = this._input.LA(1);
							if (!(_la === SQLiteParser.PLUS || _la === SQLiteParser.MINUS)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 585;
							this.expr(19);
							break;

						case 4:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 586;
							if (!this.precpred(this._ctx, 17)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
							}
							this.state = 587;
							_la = this._input.LA(1);
							if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) !== 0)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 588;
							this.expr(18);
							break;

						case 5:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 589;
							if (!this.precpred(this._ctx, 16)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
							}
							this.state = 590;
							_la = this._input.LA(1);
							if (!((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) !== 0)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 591;
							this.expr(17);
							break;

						case 6:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 592;
							if (!this.precpred(this._ctx, 15)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
							}
							this.state = 605;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
							switch (la_) {
								case 1:
									this.state = 593;
									this.match(SQLiteParser.ASSIGN);
									break;

								case 2:
									this.state = 594;
									this.match(SQLiteParser.EQ);
									break;

								case 3:
									this.state = 595;
									this.match(SQLiteParser.NOT_EQ1);
									break;

								case 4:
									this.state = 596;
									this.match(SQLiteParser.NOT_EQ2);
									break;

								case 5:
									this.state = 597;
									this.match(SQLiteParser.IS_);
									break;

								case 6:
									this.state = 598;
									this.match(SQLiteParser.IS_);
									this.state = 599;
									this.match(SQLiteParser.NOT_);
									break;

								case 7:
									this.state = 600;
									this.match(SQLiteParser.IN_);
									break;

								case 8:
									this.state = 601;
									this.match(SQLiteParser.LIKE_);
									break;

								case 9:
									this.state = 602;
									this.match(SQLiteParser.GLOB_);
									break;

								case 10:
									this.state = 603;
									this.match(SQLiteParser.MATCH_);
									break;

								case 11:
									this.state = 604;
									this.match(SQLiteParser.REGEXP_);
									break;
							}
							this.state = 607;
							this.expr(16);
							break;

						case 7:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 608;
							if (!this.precpred(this._ctx, 14)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
							}
							this.state = 609;
							this.match(SQLiteParser.AND_);
							this.state = 610;
							this.expr(15);
							break;

						case 8:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 611;
							if (!this.precpred(this._ctx, 13)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
							}
							this.state = 612;
							this.match(SQLiteParser.OR_);
							this.state = 613;
							this.expr(14);
							break;

						case 9:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 614;
							if (!this.precpred(this._ctx, 6)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
							}
							this.state = 615;
							this.match(SQLiteParser.IS_);
							this.state = 617;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
							if (la_ === 1) {
								this.state = 616;
								this.match(SQLiteParser.NOT_);
							}
							this.state = 619;
							this.expr(7);
							break;

						case 10:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 620;
							if (!this.precpred(this._ctx, 5)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
							}
							this.state = 622;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLiteParser.NOT_) {
								this.state = 621;
								this.match(SQLiteParser.NOT_);
							}

							this.state = 624;
							this.match(SQLiteParser.BETWEEN_);
							this.state = 625;
							this.expr(0);
							this.state = 626;
							this.match(SQLiteParser.AND_);
							this.state = 627;
							this.expr(6);
							break;

						case 11:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 629;
							if (!this.precpred(this._ctx, 9)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
							}
							this.state = 630;
							this.match(SQLiteParser.COLLATE_);
							this.state = 631;
							this.collation_name();
							break;

						case 12:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 632;
							if (!this.precpred(this._ctx, 8)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
							}
							this.state = 634;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLiteParser.NOT_) {
								this.state = 633;
								this.match(SQLiteParser.NOT_);
							}

							this.state = 636;
							_la = this._input.LA(1);
							if (
								!(
									(((_la - 77) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB_ - 77)) | (1 << (SQLiteParser.LIKE_ - 77)) | (1 << (SQLiteParser.MATCH_ - 77)))) !== 0) ||
									_la === SQLiteParser.REGEXP_
								)
							) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 637;
							this.expr(0);
							this.state = 640;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
							if (la_ === 1) {
								this.state = 638;
								this.match(SQLiteParser.ESCAPE_);
								this.state = 639;
								this.expr(0);
							}
							break;

						case 13:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 642;
							if (!this.precpred(this._ctx, 7)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
							}
							this.state = 647;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
								case SQLiteParser.ISNULL_:
									this.state = 643;
									this.match(SQLiteParser.ISNULL_);
									break;
								case SQLiteParser.NOTNULL_:
									this.state = 644;
									this.match(SQLiteParser.NOTNULL_);
									break;
								case SQLiteParser.NOT_:
									this.state = 645;
									this.match(SQLiteParser.NOT_);
									this.state = 646;
									this.match(SQLiteParser.NULL_);
									break;
								default:
									throw new antlr4.error.NoViableAltException(this);
							}
							break;

						case 14:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
							this.state = 649;
							if (!this.precpred(this._ctx, 4)) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
							}
							this.state = 651;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLiteParser.NOT_) {
								this.state = 650;
								this.match(SQLiteParser.NOT_);
							}

							this.state = 653;
							this.match(SQLiteParser.IN_);
							this.state = 692;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
							switch (la_) {
								case 1:
									this.state = 654;
									this.match(SQLiteParser.OPEN_PAR);
									this.state = 664;
									this._errHandler.sync(this);
									var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
									if (la_ === 1) {
										this.state = 655;
										this.select_stmt();
									} else if (la_ === 2) {
										this.state = 656;
										this.expr(0);
										this.state = 661;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
										while (_la === SQLiteParser.COMMA) {
											this.state = 657;
											this.match(SQLiteParser.COMMA);
											this.state = 658;
											this.expr(0);
											this.state = 663;
											this._errHandler.sync(this);
											_la = this._input.LA(1);
										}
									}
									this.state = 666;
									this.match(SQLiteParser.CLOSE_PAR);
									break;

								case 2:
									this.state = 670;
									this._errHandler.sync(this);
									var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
									if (la_ === 1) {
										this.state = 667;
										this.schema_name();
										this.state = 668;
										this.match(SQLiteParser.DOT);
									}
									this.state = 672;
									this.table_name();
									break;

								case 3:
									this.state = 676;
									this._errHandler.sync(this);
									var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);
									if (la_ === 1) {
										this.state = 673;
										this.schema_name();
										this.state = 674;
										this.match(SQLiteParser.DOT);
									}
									this.state = 678;
									this.table_function_name();
									this.state = 679;
									this.match(SQLiteParser.OPEN_PAR);
									this.state = 688;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
									if (
										((_la & ~0x1f) == 0 &&
											((1 << _la) &
												((1 << SQLiteParser.OPEN_PAR) |
													(1 << SQLiteParser.PLUS) |
													(1 << SQLiteParser.MINUS) |
													(1 << SQLiteParser.TILDE) |
													(1 << SQLiteParser.ABORT_) |
													(1 << SQLiteParser.ACTION_) |
													(1 << SQLiteParser.ADD_) |
													(1 << SQLiteParser.AFTER_) |
													(1 << SQLiteParser.ALL_) |
													(1 << SQLiteParser.ALTER_) |
													(1 << SQLiteParser.ANALYZE_))) !==
												0) ||
										(((_la - 32) & ~0x1f) == 0 &&
											((1 << (_la - 32)) &
												((1 << (SQLiteParser.AND_ - 32)) |
													(1 << (SQLiteParser.AS_ - 32)) |
													(1 << (SQLiteParser.ASC_ - 32)) |
													(1 << (SQLiteParser.ATTACH_ - 32)) |
													(1 << (SQLiteParser.AUTOINCREMENT_ - 32)) |
													(1 << (SQLiteParser.BEFORE_ - 32)) |
													(1 << (SQLiteParser.BEGIN_ - 32)) |
													(1 << (SQLiteParser.BETWEEN_ - 32)) |
													(1 << (SQLiteParser.BY_ - 32)) |
													(1 << (SQLiteParser.CASCADE_ - 32)) |
													(1 << (SQLiteParser.CASE_ - 32)) |
													(1 << (SQLiteParser.CAST_ - 32)) |
													(1 << (SQLiteParser.CHECK_ - 32)) |
													(1 << (SQLiteParser.COLLATE_ - 32)) |
													(1 << (SQLiteParser.COLUMN_ - 32)) |
													(1 << (SQLiteParser.COMMIT_ - 32)) |
													(1 << (SQLiteParser.CONFLICT_ - 32)) |
													(1 << (SQLiteParser.CONSTRAINT_ - 32)) |
													(1 << (SQLiteParser.CREATE_ - 32)) |
													(1 << (SQLiteParser.CROSS_ - 32)) |
													(1 << (SQLiteParser.CURRENT_DATE_ - 32)) |
													(1 << (SQLiteParser.CURRENT_TIME_ - 32)) |
													(1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) |
													(1 << (SQLiteParser.DATABASE_ - 32)) |
													(1 << (SQLiteParser.DEFAULT_ - 32)) |
													(1 << (SQLiteParser.DEFERRABLE_ - 32)) |
													(1 << (SQLiteParser.DEFERRED_ - 32)) |
													(1 << (SQLiteParser.DELETE_ - 32)) |
													(1 << (SQLiteParser.DESC_ - 32)) |
													(1 << (SQLiteParser.DETACH_ - 32)) |
													(1 << (SQLiteParser.DISTINCT_ - 32)) |
													(1 << (SQLiteParser.DROP_ - 32)))) !==
												0) ||
										(((_la - 64) & ~0x1f) == 0 &&
											((1 << (_la - 64)) &
												((1 << (SQLiteParser.EACH_ - 64)) |
													(1 << (SQLiteParser.ELSE_ - 64)) |
													(1 << (SQLiteParser.END_ - 64)) |
													(1 << (SQLiteParser.ESCAPE_ - 64)) |
													(1 << (SQLiteParser.EXCEPT_ - 64)) |
													(1 << (SQLiteParser.EXCLUSIVE_ - 64)) |
													(1 << (SQLiteParser.EXISTS_ - 64)) |
													(1 << (SQLiteParser.EXPLAIN_ - 64)) |
													(1 << (SQLiteParser.FAIL_ - 64)) |
													(1 << (SQLiteParser.FOR_ - 64)) |
													(1 << (SQLiteParser.FOREIGN_ - 64)) |
													(1 << (SQLiteParser.FROM_ - 64)) |
													(1 << (SQLiteParser.FULL_ - 64)) |
													(1 << (SQLiteParser.GLOB_ - 64)) |
													(1 << (SQLiteParser.GROUP_ - 64)) |
													(1 << (SQLiteParser.HAVING_ - 64)) |
													(1 << (SQLiteParser.IF_ - 64)) |
													(1 << (SQLiteParser.IGNORE_ - 64)) |
													(1 << (SQLiteParser.IMMEDIATE_ - 64)) |
													(1 << (SQLiteParser.IN_ - 64)) |
													(1 << (SQLiteParser.INDEX_ - 64)) |
													(1 << (SQLiteParser.INDEXED_ - 64)) |
													(1 << (SQLiteParser.INITIALLY_ - 64)) |
													(1 << (SQLiteParser.INNER_ - 64)) |
													(1 << (SQLiteParser.INSERT_ - 64)) |
													(1 << (SQLiteParser.INSTEAD_ - 64)) |
													(1 << (SQLiteParser.INTERSECT_ - 64)) |
													(1 << (SQLiteParser.INTO_ - 64)) |
													(1 << (SQLiteParser.IS_ - 64)) |
													(1 << (SQLiteParser.ISNULL_ - 64)) |
													(1 << (SQLiteParser.JOIN_ - 64)) |
													(1 << (SQLiteParser.KEY_ - 64)))) !==
												0) ||
										(((_la - 96) & ~0x1f) == 0 &&
											((1 << (_la - 96)) &
												((1 << (SQLiteParser.LEFT_ - 96)) |
													(1 << (SQLiteParser.LIKE_ - 96)) |
													(1 << (SQLiteParser.LIMIT_ - 96)) |
													(1 << (SQLiteParser.MATCH_ - 96)) |
													(1 << (SQLiteParser.NATURAL_ - 96)) |
													(1 << (SQLiteParser.NO_ - 96)) |
													(1 << (SQLiteParser.NOT_ - 96)) |
													(1 << (SQLiteParser.NOTNULL_ - 96)) |
													(1 << (SQLiteParser.NULL_ - 96)) |
													(1 << (SQLiteParser.OF_ - 96)) |
													(1 << (SQLiteParser.OFFSET_ - 96)) |
													(1 << (SQLiteParser.ON_ - 96)) |
													(1 << (SQLiteParser.OR_ - 96)) |
													(1 << (SQLiteParser.ORDER_ - 96)) |
													(1 << (SQLiteParser.OUTER_ - 96)) |
													(1 << (SQLiteParser.PLAN_ - 96)) |
													(1 << (SQLiteParser.PRAGMA_ - 96)) |
													(1 << (SQLiteParser.PRIMARY_ - 96)) |
													(1 << (SQLiteParser.QUERY_ - 96)) |
													(1 << (SQLiteParser.RAISE_ - 96)) |
													(1 << (SQLiteParser.RECURSIVE_ - 96)) |
													(1 << (SQLiteParser.REFERENCES_ - 96)) |
													(1 << (SQLiteParser.REGEXP_ - 96)) |
													(1 << (SQLiteParser.REINDEX_ - 96)) |
													(1 << (SQLiteParser.RELEASE_ - 96)) |
													(1 << (SQLiteParser.RENAME_ - 96)) |
													(1 << (SQLiteParser.REPLACE_ - 96)) |
													(1 << (SQLiteParser.RESTRICT_ - 96)) |
													(1 << (SQLiteParser.RIGHT_ - 96)) |
													(1 << (SQLiteParser.ROLLBACK_ - 96)) |
													(1 << (SQLiteParser.ROW_ - 96)) |
													(1 << (SQLiteParser.ROWS_ - 96)))) !==
												0) ||
										(((_la - 128) & ~0x1f) == 0 &&
											((1 << (_la - 128)) &
												((1 << (SQLiteParser.SAVEPOINT_ - 128)) |
													(1 << (SQLiteParser.SELECT_ - 128)) |
													(1 << (SQLiteParser.SET_ - 128)) |
													(1 << (SQLiteParser.TABLE_ - 128)) |
													(1 << (SQLiteParser.TEMP_ - 128)) |
													(1 << (SQLiteParser.TEMPORARY_ - 128)) |
													(1 << (SQLiteParser.THEN_ - 128)) |
													(1 << (SQLiteParser.TO_ - 128)) |
													(1 << (SQLiteParser.TRANSACTION_ - 128)) |
													(1 << (SQLiteParser.TRIGGER_ - 128)) |
													(1 << (SQLiteParser.UNION_ - 128)) |
													(1 << (SQLiteParser.UNIQUE_ - 128)) |
													(1 << (SQLiteParser.UPDATE_ - 128)) |
													(1 << (SQLiteParser.USING_ - 128)) |
													(1 << (SQLiteParser.VACUUM_ - 128)) |
													(1 << (SQLiteParser.VALUES_ - 128)) |
													(1 << (SQLiteParser.VIEW_ - 128)) |
													(1 << (SQLiteParser.VIRTUAL_ - 128)) |
													(1 << (SQLiteParser.WHEN_ - 128)) |
													(1 << (SQLiteParser.WHERE_ - 128)) |
													(1 << (SQLiteParser.WITH_ - 128)) |
													(1 << (SQLiteParser.WITHOUT_ - 128)) |
													(1 << (SQLiteParser.FIRST_VALUE_ - 128)) |
													(1 << (SQLiteParser.OVER_ - 128)) |
													(1 << (SQLiteParser.PARTITION_ - 128)) |
													(1 << (SQLiteParser.RANGE_ - 128)) |
													(1 << (SQLiteParser.PRECEDING_ - 128)) |
													(1 << (SQLiteParser.UNBOUNDED_ - 128)) |
													(1 << (SQLiteParser.CURRENT_ - 128)) |
													(1 << (SQLiteParser.FOLLOWING_ - 128)) |
													(1 << (SQLiteParser.CUME_DIST_ - 128)) |
													(1 << (SQLiteParser.DENSE_RANK_ - 128)))) !==
												0) ||
										(((_la - 160) & ~0x1f) == 0 &&
											((1 << (_la - 160)) &
												((1 << (SQLiteParser.LAG_ - 160)) |
													(1 << (SQLiteParser.LAST_VALUE_ - 160)) |
													(1 << (SQLiteParser.LEAD_ - 160)) |
													(1 << (SQLiteParser.NTH_VALUE_ - 160)) |
													(1 << (SQLiteParser.NTILE_ - 160)) |
													(1 << (SQLiteParser.PERCENT_RANK_ - 160)) |
													(1 << (SQLiteParser.RANK_ - 160)) |
													(1 << (SQLiteParser.ROW_NUMBER_ - 160)) |
													(1 << (SQLiteParser.GENERATED_ - 160)) |
													(1 << (SQLiteParser.ALWAYS_ - 160)) |
													(1 << (SQLiteParser.STORED_ - 160)) |
													(1 << (SQLiteParser.TRUE_ - 160)) |
													(1 << (SQLiteParser.FALSE_ - 160)) |
													(1 << (SQLiteParser.WINDOW_ - 160)) |
													(1 << (SQLiteParser.NULLS_ - 160)) |
													(1 << (SQLiteParser.FIRST_ - 160)) |
													(1 << (SQLiteParser.LAST_ - 160)) |
													(1 << (SQLiteParser.FILTER_ - 160)) |
													(1 << (SQLiteParser.GROUPS_ - 160)) |
													(1 << (SQLiteParser.EXCLUDE_ - 160)) |
													(1 << (SQLiteParser.IDENTIFIER - 160)) |
													(1 << (SQLiteParser.NUMERIC_LITERAL - 160)) |
													(1 << (SQLiteParser.BIND_PARAMETER - 160)) |
													(1 << (SQLiteParser.STRING_LITERAL - 160)) |
													(1 << (SQLiteParser.BLOB_LITERAL - 160)))) !==
												0)
									) {
										this.state = 680;
										this.expr(0);
										this.state = 685;
										this._errHandler.sync(this);
										_la = this._input.LA(1);
										while (_la === SQLiteParser.COMMA) {
											this.state = 681;
											this.match(SQLiteParser.COMMA);
											this.state = 682;
											this.expr(0);
											this.state = 687;
											this._errHandler.sync(this);
											_la = this._input.LA(1);
										}
									}

									this.state = 690;
									this.match(SQLiteParser.CLOSE_PAR);
									break;
							}
							break;
					}
				}
				this.state = 698;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
			}
		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	raise_function() {
		let localctx = new Raise_functionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, SQLiteParser.RULE_raise_function);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 699;
			this.match(SQLiteParser.RAISE_);
			this.state = 700;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.IGNORE_:
					this.state = 701;
					this.match(SQLiteParser.IGNORE_);
					break;
				case SQLiteParser.ABORT_:
				case SQLiteParser.FAIL_:
				case SQLiteParser.ROLLBACK_:
					this.state = 702;
					_la = this._input.LA(1);
					if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.ROLLBACK_)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 703;
					this.match(SQLiteParser.COMMA);
					this.state = 704;
					this.error_message();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 707;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	literal_value() {
		let localctx = new Literal_valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, SQLiteParser.RULE_literal_value);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 709;
			_la = this._input.LA(1);
			if (
				!(
					(((_la - 52) & ~0x1f) == 0 &&
						((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE_ - 52)) | (1 << (SQLiteParser.CURRENT_TIME_ - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 52)))) !== 0) ||
					_la === SQLiteParser.NULL_ ||
					(((_la - 171) & ~0x1f) == 0 &&
						((1 << (_la - 171)) &
							((1 << (SQLiteParser.TRUE_ - 171)) |
								(1 << (SQLiteParser.FALSE_ - 171)) |
								(1 << (SQLiteParser.NUMERIC_LITERAL - 171)) |
								(1 << (SQLiteParser.STRING_LITERAL - 171)) |
								(1 << (SQLiteParser.BLOB_LITERAL - 171)))) !==
							0)
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	insert_stmt() {
		let localctx = new Insert_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, SQLiteParser.RULE_insert_stmt);
		var _la = 0; // Token type
		try {
			this.state = 781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.INSERT_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.WITH_:
					this.enterOuterAlt(localctx, 1);
					this.state = 712;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.WITH_) {
						this.state = 711;
						this.with_clause();
					}

					this.state = 719;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
					switch (la_) {
						case 1:
							this.state = 714;
							this.match(SQLiteParser.INSERT_);
							break;

						case 2:
							this.state = 715;
							this.match(SQLiteParser.REPLACE_);
							break;

						case 3:
							this.state = 716;
							this.match(SQLiteParser.INSERT_);
							this.state = 717;
							this.match(SQLiteParser.OR_);
							this.state = 718;
							_la = this._input.LA(1);
							if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							break;
					}
					this.state = 721;
					this.match(SQLiteParser.INTO_);
					this.state = 725;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
					if (la_ === 1) {
						this.state = 722;
						this.schema_name();
						this.state = 723;
						this.match(SQLiteParser.DOT);
					}
					this.state = 727;
					this.table_name();
					this.state = 730;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.AS_) {
						this.state = 728;
						this.match(SQLiteParser.AS_);
						this.state = 729;
						this.table_alias();
					}

					this.state = 743;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.OPEN_PAR) {
						this.state = 732;
						this.match(SQLiteParser.OPEN_PAR);
						this.state = 733;
						this.column_name();
						this.state = 738;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 734;
							this.match(SQLiteParser.COMMA);
							this.state = 735;
							this.column_name();
							this.state = 740;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 741;
						this.match(SQLiteParser.CLOSE_PAR);
					}

					this.state = 774;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
					switch (la_) {
						case 1:
							this.state = 745;
							this.match(SQLiteParser.VALUES_);
							this.state = 746;
							this.match(SQLiteParser.OPEN_PAR);
							this.state = 747;
							this.expr(0);
							this.state = 752;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === SQLiteParser.COMMA) {
								this.state = 748;
								this.match(SQLiteParser.COMMA);
								this.state = 749;
								this.expr(0);
								this.state = 754;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 755;
							this.match(SQLiteParser.CLOSE_PAR);
							this.state = 770;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === SQLiteParser.COMMA) {
								this.state = 756;
								this.match(SQLiteParser.COMMA);
								this.state = 757;
								this.match(SQLiteParser.OPEN_PAR);
								this.state = 758;
								this.expr(0);
								this.state = 763;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								while (_la === SQLiteParser.COMMA) {
									this.state = 759;
									this.match(SQLiteParser.COMMA);
									this.state = 760;
									this.expr(0);
									this.state = 765;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								}
								this.state = 766;
								this.match(SQLiteParser.CLOSE_PAR);
								this.state = 772;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							break;

						case 2:
							this.state = 773;
							this.select_stmt();
							break;
					}
					this.state = 777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ON_) {
						this.state = 776;
						this.upsert_clause();
					}

					break;
				case SQLiteParser.DEFAULT_:
					this.enterOuterAlt(localctx, 2);
					this.state = 779;
					this.match(SQLiteParser.DEFAULT_);
					this.state = 780;
					this.match(SQLiteParser.VALUES_);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	upsert_clause() {
		let localctx = new Upsert_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, SQLiteParser.RULE_upsert_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 783;
			this.match(SQLiteParser.ON_);
			this.state = 784;
			this.match(SQLiteParser.CONFLICT_);
			this.state = 799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.OPEN_PAR) {
				this.state = 785;
				this.match(SQLiteParser.OPEN_PAR);
				this.state = 786;
				this.indexed_column();
				this.state = 791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SQLiteParser.COMMA) {
					this.state = 787;
					this.match(SQLiteParser.COMMA);
					this.state = 788;
					this.indexed_column();
					this.state = 793;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 794;
				this.match(SQLiteParser.CLOSE_PAR);
				this.state = 797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLiteParser.WHERE_) {
					this.state = 795;
					this.match(SQLiteParser.WHERE_);
					this.state = 796;
					this.expr(0);
				}
			}

			this.state = 801;
			this.match(SQLiteParser.DO_);
			this.state = 828;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.NOTHING_:
					this.state = 802;
					this.match(SQLiteParser.NOTHING_);
					break;
				case SQLiteParser.UPDATE_:
					this.state = 803;
					this.match(SQLiteParser.UPDATE_);
					this.state = 804;
					this.match(SQLiteParser.SET_);

					this.state = 807;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
					switch (la_) {
						case 1:
							this.state = 805;
							this.column_name();
							break;

						case 2:
							this.state = 806;
							this.column_name_list();
							break;
					}
					this.state = 809;
					this.match(SQLiteParser.EQ);
					this.state = 810;
					this.expr(0);
					this.state = 821;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 811;
						this.match(SQLiteParser.COMMA);
						this.state = 814;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
						switch (la_) {
							case 1:
								this.state = 812;
								this.column_name();
								break;

							case 2:
								this.state = 813;
								this.column_name_list();
								break;
						}
						this.state = 816;
						this.match(SQLiteParser.EQ);
						this.state = 817;
						this.expr(0);
						this.state = 823;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.WHERE_) {
						this.state = 824;
						this.match(SQLiteParser.WHERE_);
						this.state = 825;
						this.expr(0);
					}

					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	pragma_value() {
		let localctx = new Pragma_valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, SQLiteParser.RULE_pragma_value);
		try {
			this.state = 833;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 830;
					this.signed_number();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 831;
					this.name();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 832;
					this.match(SQLiteParser.STRING_LITERAL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	select_stmt() {
		let localctx = new Select_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, SQLiteParser.RULE_select_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WITH_) {
				this.state = 835;
				this.common_table_stmt();
			}

			this.state = 838;
			this.select_core();
			this.state = 844;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 102, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 839;
					this.compound_operator();
					this.state = 840;
					this.select_core();
				}
				this.state = 846;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 102, this._ctx);
			}

			this.state = 848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ORDER_) {
				this.state = 847;
				this.order_by_stmt();
			}

			this.state = 851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.LIMIT_) {
				this.state = 850;
				this.limit_stmt();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	join_clause() {
		let localctx = new Join_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, SQLiteParser.RULE_join_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 853;
			this.table_or_subquery();
			this.state = 861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (
				_la === SQLiteParser.COMMA ||
				_la === SQLiteParser.CROSS_ ||
				(((_la - 87) & ~0x1f) == 0 &&
					((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER_ - 87)) | (1 << (SQLiteParser.JOIN_ - 87)) | (1 << (SQLiteParser.LEFT_ - 87)) | (1 << (SQLiteParser.NATURAL_ - 87)))) !== 0)
			) {
				this.state = 854;
				this.join_operator();
				this.state = 855;
				this.table_or_subquery();
				this.state = 857;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);
				if (la_ === 1) {
					this.state = 856;
					this.join_constraint();
				}
				this.state = 863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	select_core() {
		let localctx = new Select_coreContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, SQLiteParser.RULE_select_core);
		var _la = 0; // Token type
		try {
			this.state = 954;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.SELECT_:
					this.enterOuterAlt(localctx, 1);
					this.state = 864;
					this.match(SQLiteParser.SELECT_);
					this.state = 866;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
					if (la_ === 1) {
						this.state = 865;
						_la = this._input.LA(1);
						if (!(_la === SQLiteParser.ALL_ || _la === SQLiteParser.DISTINCT_)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
					}
					this.state = 868;
					this.result_column();
					this.state = 873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 869;
						this.match(SQLiteParser.COMMA);
						this.state = 870;
						this.result_column();
						this.state = 875;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.FROM_) {
						this.state = 876;
						this.match(SQLiteParser.FROM_);
						this.state = 886;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);
						switch (la_) {
							case 1:
								this.state = 877;
								this.table_or_subquery();
								this.state = 882;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								while (_la === SQLiteParser.COMMA) {
									this.state = 878;
									this.match(SQLiteParser.COMMA);
									this.state = 879;
									this.table_or_subquery();
									this.state = 884;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								}
								break;

							case 2:
								this.state = 885;
								this.join_clause();
								break;
						}
					}

					this.state = 892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.WHERE_) {
						this.state = 890;
						this.match(SQLiteParser.WHERE_);
						this.state = 891;
						this.expr(0);
					}

					this.state = 908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.GROUP_) {
						this.state = 894;
						this.match(SQLiteParser.GROUP_);
						this.state = 895;
						this.match(SQLiteParser.BY_);
						this.state = 896;
						this.expr(0);
						this.state = 901;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 897;
							this.match(SQLiteParser.COMMA);
							this.state = 898;
							this.expr(0);
							this.state = 903;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 906;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === SQLiteParser.HAVING_) {
							this.state = 904;
							this.match(SQLiteParser.HAVING_);
							this.state = 905;
							this.expr(0);
						}
					}

					this.state = 924;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.WINDOW_) {
						this.state = 910;
						this.match(SQLiteParser.WINDOW_);
						this.state = 911;
						this.window_name();
						this.state = 912;
						this.match(SQLiteParser.AS_);
						this.state = 913;
						this.window_defn();
						this.state = 921;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 914;
							this.match(SQLiteParser.COMMA);
							this.state = 915;
							this.window_name();
							this.state = 916;
							this.match(SQLiteParser.AS_);
							this.state = 917;
							this.window_defn();
							this.state = 923;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
					}

					break;
				case SQLiteParser.VALUES_:
					this.enterOuterAlt(localctx, 2);
					this.state = 926;
					this.match(SQLiteParser.VALUES_);
					this.state = 927;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 928;
					this.expr(0);
					this.state = 933;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 929;
						this.match(SQLiteParser.COMMA);
						this.state = 930;
						this.expr(0);
						this.state = 935;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 936;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 951;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 937;
						this.match(SQLiteParser.COMMA);
						this.state = 938;
						this.match(SQLiteParser.OPEN_PAR);
						this.state = 939;
						this.expr(0);
						this.state = 944;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 940;
							this.match(SQLiteParser.COMMA);
							this.state = 941;
							this.expr(0);
							this.state = 946;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 947;
						this.match(SQLiteParser.CLOSE_PAR);
						this.state = 953;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	factored_select_stmt() {
		let localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, SQLiteParser.RULE_factored_select_stmt);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 956;
			this.select_stmt();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	simple_select_stmt() {
		let localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, SQLiteParser.RULE_simple_select_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 959;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WITH_) {
				this.state = 958;
				this.common_table_stmt();
			}

			this.state = 961;
			this.select_core();
			this.state = 963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ORDER_) {
				this.state = 962;
				this.order_by_stmt();
			}

			this.state = 966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.LIMIT_) {
				this.state = 965;
				this.limit_stmt();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	compound_select_stmt() {
		let localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, SQLiteParser.RULE_compound_select_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 969;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WITH_) {
				this.state = 968;
				this.common_table_stmt();
			}

			this.state = 971;
			this.select_core();
			this.state = 981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 978;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case SQLiteParser.UNION_:
						this.state = 972;
						this.match(SQLiteParser.UNION_);
						this.state = 974;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === SQLiteParser.ALL_) {
							this.state = 973;
							this.match(SQLiteParser.ALL_);
						}

						break;
					case SQLiteParser.INTERSECT_:
						this.state = 976;
						this.match(SQLiteParser.INTERSECT_);
						break;
					case SQLiteParser.EXCEPT_:
						this.state = 977;
						this.match(SQLiteParser.EXCEPT_);
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 980;
				this.select_core();
				this.state = 983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === SQLiteParser.EXCEPT_ || _la === SQLiteParser.INTERSECT_ || _la === SQLiteParser.UNION_);
			this.state = 986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ORDER_) {
				this.state = 985;
				this.order_by_stmt();
			}

			this.state = 989;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.LIMIT_) {
				this.state = 988;
				this.limit_stmt();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_or_subquery() {
		let localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, SQLiteParser.RULE_table_or_subquery);
		var _la = 0; // Token type
		try {
			this.state = 1055;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 994;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 131, this._ctx);
					if (la_ === 1) {
						this.state = 991;
						this.schema_name();
						this.state = 992;
						this.match(SQLiteParser.DOT);
					}
					this.state = 996;
					this.table_name();
					this.state = 1001;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 133, this._ctx);
					if (la_ === 1) {
						this.state = 998;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 132, this._ctx);
						if (la_ === 1) {
							this.state = 997;
							this.match(SQLiteParser.AS_);
						}
						this.state = 1000;
						this.table_alias();
					}
					this.state = 1008;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLiteParser.INDEXED_:
							this.state = 1003;
							this.match(SQLiteParser.INDEXED_);
							this.state = 1004;
							this.match(SQLiteParser.BY_);
							this.state = 1005;
							this.index_name();
							break;
						case SQLiteParser.NOT_:
							this.state = 1006;
							this.match(SQLiteParser.NOT_);
							this.state = 1007;
							this.match(SQLiteParser.INDEXED_);
							break;
						case SQLiteParser.EOF:
						case SQLiteParser.SCOL:
						case SQLiteParser.CLOSE_PAR:
						case SQLiteParser.COMMA:
						case SQLiteParser.CROSS_:
						case SQLiteParser.DEFAULT_:
						case SQLiteParser.DELETE_:
						case SQLiteParser.EXCEPT_:
						case SQLiteParser.EXPLAIN_:
						case SQLiteParser.GROUP_:
						case SQLiteParser.INNER_:
						case SQLiteParser.INSERT_:
						case SQLiteParser.INTERSECT_:
						case SQLiteParser.JOIN_:
						case SQLiteParser.LEFT_:
						case SQLiteParser.LIMIT_:
						case SQLiteParser.NATURAL_:
						case SQLiteParser.ON_:
						case SQLiteParser.ORDER_:
						case SQLiteParser.REPLACE_:
						case SQLiteParser.SELECT_:
						case SQLiteParser.UNION_:
						case SQLiteParser.UPDATE_:
						case SQLiteParser.USING_:
						case SQLiteParser.VALUES_:
						case SQLiteParser.WHERE_:
						case SQLiteParser.WITH_:
						case SQLiteParser.WINDOW_:
							break;
						default:
							break;
					}
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1013;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
					if (la_ === 1) {
						this.state = 1010;
						this.schema_name();
						this.state = 1011;
						this.match(SQLiteParser.DOT);
					}
					this.state = 1015;
					this.table_function_name();
					this.state = 1016;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1017;
					this.expr(0);
					this.state = 1022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 1018;
						this.match(SQLiteParser.COMMA);
						this.state = 1019;
						this.expr(0);
						this.state = 1024;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1025;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1030;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
					if (la_ === 1) {
						this.state = 1027;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 137, this._ctx);
						if (la_ === 1) {
							this.state = 1026;
							this.match(SQLiteParser.AS_);
						}
						this.state = 1029;
						this.table_alias();
					}
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1032;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1042;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1033;
							this.table_or_subquery();
							this.state = 1038;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (_la === SQLiteParser.COMMA) {
								this.state = 1034;
								this.match(SQLiteParser.COMMA);
								this.state = 1035;
								this.table_or_subquery();
								this.state = 1040;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							break;

						case 2:
							this.state = 1041;
							this.join_clause();
							break;
					}
					this.state = 1044;
					this.match(SQLiteParser.CLOSE_PAR);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 1046;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1047;
					this.select_stmt();
					this.state = 1048;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1053;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
					if (la_ === 1) {
						this.state = 1050;
						this._errHandler.sync(this);
						var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
						if (la_ === 1) {
							this.state = 1049;
							this.match(SQLiteParser.AS_);
						}
						this.state = 1052;
						this.table_alias();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	result_column() {
		let localctx = new Result_columnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, SQLiteParser.RULE_result_column);
		var _la = 0; // Token type
		try {
			this.state = 1069;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 146, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1057;
					this.match(SQLiteParser.STAR);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1058;
					this.table_name();
					this.state = 1059;
					this.match(SQLiteParser.DOT);
					this.state = 1060;
					this.match(SQLiteParser.STAR);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1062;
					this.expr(0);
					this.state = 1067;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.AS_ || _la === SQLiteParser.IDENTIFIER || _la === SQLiteParser.STRING_LITERAL) {
						this.state = 1064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === SQLiteParser.AS_) {
							this.state = 1063;
							this.match(SQLiteParser.AS_);
						}

						this.state = 1066;
						this.column_alias();
					}

					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	join_operator() {
		let localctx = new Join_operatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, SQLiteParser.RULE_join_operator);
		var _la = 0; // Token type
		try {
			this.state = 1084;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.COMMA:
					this.enterOuterAlt(localctx, 1);
					this.state = 1071;
					this.match(SQLiteParser.COMMA);
					break;
				case SQLiteParser.CROSS_:
				case SQLiteParser.INNER_:
				case SQLiteParser.JOIN_:
				case SQLiteParser.LEFT_:
				case SQLiteParser.NATURAL_:
					this.enterOuterAlt(localctx, 2);
					this.state = 1073;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.NATURAL_) {
						this.state = 1072;
						this.match(SQLiteParser.NATURAL_);
					}

					this.state = 1081;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLiteParser.LEFT_:
							this.state = 1075;
							this.match(SQLiteParser.LEFT_);
							this.state = 1077;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLiteParser.OUTER_) {
								this.state = 1076;
								this.match(SQLiteParser.OUTER_);
							}

							break;
						case SQLiteParser.INNER_:
							this.state = 1079;
							this.match(SQLiteParser.INNER_);
							break;
						case SQLiteParser.CROSS_:
							this.state = 1080;
							this.match(SQLiteParser.CROSS_);
							break;
						case SQLiteParser.JOIN_:
							break;
						default:
							break;
					}
					this.state = 1083;
					this.match(SQLiteParser.JOIN_);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	join_constraint() {
		let localctx = new Join_constraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, SQLiteParser.RULE_join_constraint);
		var _la = 0; // Token type
		try {
			this.state = 1100;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.ON_:
					this.enterOuterAlt(localctx, 1);
					this.state = 1086;
					this.match(SQLiteParser.ON_);
					this.state = 1087;
					this.expr(0);
					break;
				case SQLiteParser.USING_:
					this.enterOuterAlt(localctx, 2);
					this.state = 1088;
					this.match(SQLiteParser.USING_);
					this.state = 1089;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1090;
					this.column_name();
					this.state = 1095;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 1091;
						this.match(SQLiteParser.COMMA);
						this.state = 1092;
						this.column_name();
						this.state = 1097;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1098;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	compound_operator() {
		let localctx = new Compound_operatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, SQLiteParser.RULE_compound_operator);
		var _la = 0; // Token type
		try {
			this.state = 1108;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.UNION_:
					this.enterOuterAlt(localctx, 1);
					this.state = 1102;
					this.match(SQLiteParser.UNION_);
					this.state = 1104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ALL_) {
						this.state = 1103;
						this.match(SQLiteParser.ALL_);
					}

					break;
				case SQLiteParser.INTERSECT_:
					this.enterOuterAlt(localctx, 2);
					this.state = 1106;
					this.match(SQLiteParser.INTERSECT_);
					break;
				case SQLiteParser.EXCEPT_:
					this.enterOuterAlt(localctx, 3);
					this.state = 1107;
					this.match(SQLiteParser.EXCEPT_);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	update_stmt() {
		let localctx = new Update_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, SQLiteParser.RULE_update_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WITH_) {
				this.state = 1110;
				this.with_clause();
			}

			this.state = 1113;
			this.match(SQLiteParser.UPDATE_);
			this.state = 1116;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
			if (la_ === 1) {
				this.state = 1114;
				this.match(SQLiteParser.OR_);
				this.state = 1115;
				_la = this._input.LA(1);
				if (!(_la === SQLiteParser.ABORT_ || _la === SQLiteParser.FAIL_ || _la === SQLiteParser.IGNORE_ || _la === SQLiteParser.REPLACE_ || _la === SQLiteParser.ROLLBACK_)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
			}
			this.state = 1118;
			this.qualified_table_name();
			this.state = 1119;
			this.match(SQLiteParser.SET_);
			this.state = 1122;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1120;
					this.column_name();
					break;

				case 2:
					this.state = 1121;
					this.column_name_list();
					break;
			}
			this.state = 1124;
			this.match(SQLiteParser.ASSIGN);
			this.state = 1125;
			this.expr(0);
			this.state = 1136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1126;
				this.match(SQLiteParser.COMMA);
				this.state = 1129;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 158, this._ctx);
				switch (la_) {
					case 1:
						this.state = 1127;
						this.column_name();
						break;

					case 2:
						this.state = 1128;
						this.column_name_list();
						break;
				}
				this.state = 1131;
				this.match(SQLiteParser.ASSIGN);
				this.state = 1132;
				this.expr(0);
				this.state = 1138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1141;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.WHERE_) {
				this.state = 1139;
				this.match(SQLiteParser.WHERE_);
				this.state = 1140;
				this.expr(0);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	column_name_list() {
		let localctx = new Column_name_listContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, SQLiteParser.RULE_column_name_list);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1143;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1144;
			this.column_name();
			this.state = 1149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1145;
				this.match(SQLiteParser.COMMA);
				this.state = 1146;
				this.column_name();
				this.state = 1151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1152;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	qualified_table_name() {
		let localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, SQLiteParser.RULE_qualified_table_name);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1157;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 162, this._ctx);
			if (la_ === 1) {
				this.state = 1154;
				this.schema_name();
				this.state = 1155;
				this.match(SQLiteParser.DOT);
			}
			this.state = 1159;
			this.table_name();
			this.state = 1162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.AS_) {
				this.state = 1160;
				this.match(SQLiteParser.AS_);
				this.state = 1161;
				this.alias();
			}

			this.state = 1169;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.INDEXED_:
					this.state = 1164;
					this.match(SQLiteParser.INDEXED_);
					this.state = 1165;
					this.match(SQLiteParser.BY_);
					this.state = 1166;
					this.index_name();
					break;
				case SQLiteParser.NOT_:
					this.state = 1167;
					this.match(SQLiteParser.NOT_);
					this.state = 1168;
					this.match(SQLiteParser.INDEXED_);
					break;
				case SQLiteParser.EOF:
				case SQLiteParser.SCOL:
				case SQLiteParser.DEFAULT_:
				case SQLiteParser.DELETE_:
				case SQLiteParser.EXPLAIN_:
				case SQLiteParser.INSERT_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.SELECT_:
				case SQLiteParser.SET_:
				case SQLiteParser.UPDATE_:
				case SQLiteParser.VALUES_:
				case SQLiteParser.WHERE_:
				case SQLiteParser.WITH_:
					break;
				default:
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	filter_clause() {
		let localctx = new Filter_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, SQLiteParser.RULE_filter_clause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1171;
			this.match(SQLiteParser.FILTER_);
			this.state = 1172;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1173;
			this.match(SQLiteParser.WHERE_);
			this.state = 1174;
			this.expr(0);
			this.state = 1175;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	window_defn() {
		let localctx = new Window_defnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, SQLiteParser.RULE_window_defn);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1177;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1179;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
			if (la_ === 1) {
				this.state = 1178;
				this.base_window_name();
			}
			this.state = 1191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.PARTITION_) {
				this.state = 1181;
				this.match(SQLiteParser.PARTITION_);
				this.state = 1182;
				this.match(SQLiteParser.BY_);
				this.state = 1183;
				this.expr(0);
				this.state = 1188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SQLiteParser.COMMA) {
					this.state = 1184;
					this.match(SQLiteParser.COMMA);
					this.state = 1185;
					this.expr(0);
					this.state = 1190;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
			}

			this.state = 1193;
			this.match(SQLiteParser.ORDER_);
			this.state = 1194;
			this.match(SQLiteParser.BY_);
			this.state = 1195;
			this.ordering_term();
			this.state = 1200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1196;
				this.match(SQLiteParser.COMMA);
				this.state = 1197;
				this.ordering_term();
				this.state = 1202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
				this.state = 1203;
				this.frame_spec();
			}

			this.state = 1206;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	over_clause() {
		let localctx = new Over_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, SQLiteParser.RULE_over_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1208;
			this.match(SQLiteParser.OVER_);
			this.state = 1242;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1209;
					this.window_name();
					break;

				case 2:
					this.state = 1210;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1212;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
					if (la_ === 1) {
						this.state = 1211;
						this.base_window_name();
					}
					this.state = 1224;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1214;
						this.match(SQLiteParser.PARTITION_);
						this.state = 1215;
						this.match(SQLiteParser.BY_);
						this.state = 1216;
						this.expr(0);
						this.state = 1221;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 1217;
							this.match(SQLiteParser.COMMA);
							this.state = 1218;
							this.expr(0);
							this.state = 1223;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
					}

					this.state = 1236;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ORDER_) {
						this.state = 1226;
						this.match(SQLiteParser.ORDER_);
						this.state = 1227;
						this.match(SQLiteParser.BY_);
						this.state = 1228;
						this.ordering_term();
						this.state = 1233;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === SQLiteParser.COMMA) {
							this.state = 1229;
							this.match(SQLiteParser.COMMA);
							this.state = 1230;
							this.ordering_term();
							this.state = 1235;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
					}

					this.state = 1239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
						this.state = 1238;
						this.frame_spec();
					}

					this.state = 1241;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	frame_spec() {
		let localctx = new Frame_specContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, SQLiteParser.RULE_frame_spec);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1244;
			this.frame_clause();
			this.state = 1252;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.EXCLUDE_:
					this.state = 1245;
					this.match(SQLiteParser.EXCLUDE_);

					this.state = 1246;
					this.match(SQLiteParser.NO_);
					this.state = 1247;
					this.match(SQLiteParser.OTHERS_);
					break;
				case SQLiteParser.CURRENT_:
					this.state = 1248;
					this.match(SQLiteParser.CURRENT_);
					this.state = 1249;
					this.match(SQLiteParser.ROW_);
					break;
				case SQLiteParser.GROUP_:
					this.state = 1250;
					this.match(SQLiteParser.GROUP_);
					break;
				case SQLiteParser.TIES_:
					this.state = 1251;
					this.match(SQLiteParser.TIES_);
					break;
				case SQLiteParser.CLOSE_PAR:
					break;
				default:
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	frame_clause() {
		let localctx = new Frame_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, SQLiteParser.RULE_frame_clause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1254;
			_la = this._input.LA(1);
			if (!(_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1261;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1255;
					this.frame_single();
					break;

				case 2:
					this.state = 1256;
					this.match(SQLiteParser.BETWEEN_);
					this.state = 1257;
					this.frame_left();
					this.state = 1258;
					this.match(SQLiteParser.AND_);
					this.state = 1259;
					this.frame_right();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	simple_function_invocation() {
		let localctx = new Simple_function_invocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, SQLiteParser.RULE_simple_function_invocation);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1263;
			this.simple_func();
			this.state = 1264;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1274;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.OPEN_PAR:
				case SQLiteParser.PLUS:
				case SQLiteParser.MINUS:
				case SQLiteParser.TILDE:
				case SQLiteParser.ABORT_:
				case SQLiteParser.ACTION_:
				case SQLiteParser.ADD_:
				case SQLiteParser.AFTER_:
				case SQLiteParser.ALL_:
				case SQLiteParser.ALTER_:
				case SQLiteParser.ANALYZE_:
				case SQLiteParser.AND_:
				case SQLiteParser.AS_:
				case SQLiteParser.ASC_:
				case SQLiteParser.ATTACH_:
				case SQLiteParser.AUTOINCREMENT_:
				case SQLiteParser.BEFORE_:
				case SQLiteParser.BEGIN_:
				case SQLiteParser.BETWEEN_:
				case SQLiteParser.BY_:
				case SQLiteParser.CASCADE_:
				case SQLiteParser.CASE_:
				case SQLiteParser.CAST_:
				case SQLiteParser.CHECK_:
				case SQLiteParser.COLLATE_:
				case SQLiteParser.COLUMN_:
				case SQLiteParser.COMMIT_:
				case SQLiteParser.CONFLICT_:
				case SQLiteParser.CONSTRAINT_:
				case SQLiteParser.CREATE_:
				case SQLiteParser.CROSS_:
				case SQLiteParser.CURRENT_DATE_:
				case SQLiteParser.CURRENT_TIME_:
				case SQLiteParser.CURRENT_TIMESTAMP_:
				case SQLiteParser.DATABASE_:
				case SQLiteParser.DEFAULT_:
				case SQLiteParser.DEFERRABLE_:
				case SQLiteParser.DEFERRED_:
				case SQLiteParser.DELETE_:
				case SQLiteParser.DESC_:
				case SQLiteParser.DETACH_:
				case SQLiteParser.DISTINCT_:
				case SQLiteParser.DROP_:
				case SQLiteParser.EACH_:
				case SQLiteParser.ELSE_:
				case SQLiteParser.END_:
				case SQLiteParser.ESCAPE_:
				case SQLiteParser.EXCEPT_:
				case SQLiteParser.EXCLUSIVE_:
				case SQLiteParser.EXISTS_:
				case SQLiteParser.EXPLAIN_:
				case SQLiteParser.FAIL_:
				case SQLiteParser.FOR_:
				case SQLiteParser.FOREIGN_:
				case SQLiteParser.FROM_:
				case SQLiteParser.FULL_:
				case SQLiteParser.GLOB_:
				case SQLiteParser.GROUP_:
				case SQLiteParser.HAVING_:
				case SQLiteParser.IF_:
				case SQLiteParser.IGNORE_:
				case SQLiteParser.IMMEDIATE_:
				case SQLiteParser.IN_:
				case SQLiteParser.INDEX_:
				case SQLiteParser.INDEXED_:
				case SQLiteParser.INITIALLY_:
				case SQLiteParser.INNER_:
				case SQLiteParser.INSERT_:
				case SQLiteParser.INSTEAD_:
				case SQLiteParser.INTERSECT_:
				case SQLiteParser.INTO_:
				case SQLiteParser.IS_:
				case SQLiteParser.ISNULL_:
				case SQLiteParser.JOIN_:
				case SQLiteParser.KEY_:
				case SQLiteParser.LEFT_:
				case SQLiteParser.LIKE_:
				case SQLiteParser.LIMIT_:
				case SQLiteParser.MATCH_:
				case SQLiteParser.NATURAL_:
				case SQLiteParser.NO_:
				case SQLiteParser.NOT_:
				case SQLiteParser.NOTNULL_:
				case SQLiteParser.NULL_:
				case SQLiteParser.OF_:
				case SQLiteParser.OFFSET_:
				case SQLiteParser.ON_:
				case SQLiteParser.OR_:
				case SQLiteParser.ORDER_:
				case SQLiteParser.OUTER_:
				case SQLiteParser.PLAN_:
				case SQLiteParser.PRAGMA_:
				case SQLiteParser.PRIMARY_:
				case SQLiteParser.QUERY_:
				case SQLiteParser.RAISE_:
				case SQLiteParser.RECURSIVE_:
				case SQLiteParser.REFERENCES_:
				case SQLiteParser.REGEXP_:
				case SQLiteParser.REINDEX_:
				case SQLiteParser.RELEASE_:
				case SQLiteParser.RENAME_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.RESTRICT_:
				case SQLiteParser.RIGHT_:
				case SQLiteParser.ROLLBACK_:
				case SQLiteParser.ROW_:
				case SQLiteParser.ROWS_:
				case SQLiteParser.SAVEPOINT_:
				case SQLiteParser.SELECT_:
				case SQLiteParser.SET_:
				case SQLiteParser.TABLE_:
				case SQLiteParser.TEMP_:
				case SQLiteParser.TEMPORARY_:
				case SQLiteParser.THEN_:
				case SQLiteParser.TO_:
				case SQLiteParser.TRANSACTION_:
				case SQLiteParser.TRIGGER_:
				case SQLiteParser.UNION_:
				case SQLiteParser.UNIQUE_:
				case SQLiteParser.UPDATE_:
				case SQLiteParser.USING_:
				case SQLiteParser.VACUUM_:
				case SQLiteParser.VALUES_:
				case SQLiteParser.VIEW_:
				case SQLiteParser.VIRTUAL_:
				case SQLiteParser.WHEN_:
				case SQLiteParser.WHERE_:
				case SQLiteParser.WITH_:
				case SQLiteParser.WITHOUT_:
				case SQLiteParser.FIRST_VALUE_:
				case SQLiteParser.OVER_:
				case SQLiteParser.PARTITION_:
				case SQLiteParser.RANGE_:
				case SQLiteParser.PRECEDING_:
				case SQLiteParser.UNBOUNDED_:
				case SQLiteParser.CURRENT_:
				case SQLiteParser.FOLLOWING_:
				case SQLiteParser.CUME_DIST_:
				case SQLiteParser.DENSE_RANK_:
				case SQLiteParser.LAG_:
				case SQLiteParser.LAST_VALUE_:
				case SQLiteParser.LEAD_:
				case SQLiteParser.NTH_VALUE_:
				case SQLiteParser.NTILE_:
				case SQLiteParser.PERCENT_RANK_:
				case SQLiteParser.RANK_:
				case SQLiteParser.ROW_NUMBER_:
				case SQLiteParser.GENERATED_:
				case SQLiteParser.ALWAYS_:
				case SQLiteParser.STORED_:
				case SQLiteParser.TRUE_:
				case SQLiteParser.FALSE_:
				case SQLiteParser.WINDOW_:
				case SQLiteParser.NULLS_:
				case SQLiteParser.FIRST_:
				case SQLiteParser.LAST_:
				case SQLiteParser.FILTER_:
				case SQLiteParser.GROUPS_:
				case SQLiteParser.EXCLUDE_:
				case SQLiteParser.IDENTIFIER:
				case SQLiteParser.NUMERIC_LITERAL:
				case SQLiteParser.BIND_PARAMETER:
				case SQLiteParser.STRING_LITERAL:
				case SQLiteParser.BLOB_LITERAL:
					this.state = 1265;
					this.expr(0);
					this.state = 1270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 1266;
						this.match(SQLiteParser.COMMA);
						this.state = 1267;
						this.expr(0);
						this.state = 1272;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
				case SQLiteParser.STAR:
					this.state = 1273;
					this.match(SQLiteParser.STAR);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 1276;
			this.match(SQLiteParser.CLOSE_PAR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	aggregate_function_invocation() {
		let localctx = new Aggregate_function_invocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, SQLiteParser.RULE_aggregate_function_invocation);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1278;
			this.aggregate_func();
			this.state = 1279;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1292;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.OPEN_PAR:
				case SQLiteParser.PLUS:
				case SQLiteParser.MINUS:
				case SQLiteParser.TILDE:
				case SQLiteParser.ABORT_:
				case SQLiteParser.ACTION_:
				case SQLiteParser.ADD_:
				case SQLiteParser.AFTER_:
				case SQLiteParser.ALL_:
				case SQLiteParser.ALTER_:
				case SQLiteParser.ANALYZE_:
				case SQLiteParser.AND_:
				case SQLiteParser.AS_:
				case SQLiteParser.ASC_:
				case SQLiteParser.ATTACH_:
				case SQLiteParser.AUTOINCREMENT_:
				case SQLiteParser.BEFORE_:
				case SQLiteParser.BEGIN_:
				case SQLiteParser.BETWEEN_:
				case SQLiteParser.BY_:
				case SQLiteParser.CASCADE_:
				case SQLiteParser.CASE_:
				case SQLiteParser.CAST_:
				case SQLiteParser.CHECK_:
				case SQLiteParser.COLLATE_:
				case SQLiteParser.COLUMN_:
				case SQLiteParser.COMMIT_:
				case SQLiteParser.CONFLICT_:
				case SQLiteParser.CONSTRAINT_:
				case SQLiteParser.CREATE_:
				case SQLiteParser.CROSS_:
				case SQLiteParser.CURRENT_DATE_:
				case SQLiteParser.CURRENT_TIME_:
				case SQLiteParser.CURRENT_TIMESTAMP_:
				case SQLiteParser.DATABASE_:
				case SQLiteParser.DEFAULT_:
				case SQLiteParser.DEFERRABLE_:
				case SQLiteParser.DEFERRED_:
				case SQLiteParser.DELETE_:
				case SQLiteParser.DESC_:
				case SQLiteParser.DETACH_:
				case SQLiteParser.DISTINCT_:
				case SQLiteParser.DROP_:
				case SQLiteParser.EACH_:
				case SQLiteParser.ELSE_:
				case SQLiteParser.END_:
				case SQLiteParser.ESCAPE_:
				case SQLiteParser.EXCEPT_:
				case SQLiteParser.EXCLUSIVE_:
				case SQLiteParser.EXISTS_:
				case SQLiteParser.EXPLAIN_:
				case SQLiteParser.FAIL_:
				case SQLiteParser.FOR_:
				case SQLiteParser.FOREIGN_:
				case SQLiteParser.FROM_:
				case SQLiteParser.FULL_:
				case SQLiteParser.GLOB_:
				case SQLiteParser.GROUP_:
				case SQLiteParser.HAVING_:
				case SQLiteParser.IF_:
				case SQLiteParser.IGNORE_:
				case SQLiteParser.IMMEDIATE_:
				case SQLiteParser.IN_:
				case SQLiteParser.INDEX_:
				case SQLiteParser.INDEXED_:
				case SQLiteParser.INITIALLY_:
				case SQLiteParser.INNER_:
				case SQLiteParser.INSERT_:
				case SQLiteParser.INSTEAD_:
				case SQLiteParser.INTERSECT_:
				case SQLiteParser.INTO_:
				case SQLiteParser.IS_:
				case SQLiteParser.ISNULL_:
				case SQLiteParser.JOIN_:
				case SQLiteParser.KEY_:
				case SQLiteParser.LEFT_:
				case SQLiteParser.LIKE_:
				case SQLiteParser.LIMIT_:
				case SQLiteParser.MATCH_:
				case SQLiteParser.NATURAL_:
				case SQLiteParser.NO_:
				case SQLiteParser.NOT_:
				case SQLiteParser.NOTNULL_:
				case SQLiteParser.NULL_:
				case SQLiteParser.OF_:
				case SQLiteParser.OFFSET_:
				case SQLiteParser.ON_:
				case SQLiteParser.OR_:
				case SQLiteParser.ORDER_:
				case SQLiteParser.OUTER_:
				case SQLiteParser.PLAN_:
				case SQLiteParser.PRAGMA_:
				case SQLiteParser.PRIMARY_:
				case SQLiteParser.QUERY_:
				case SQLiteParser.RAISE_:
				case SQLiteParser.RECURSIVE_:
				case SQLiteParser.REFERENCES_:
				case SQLiteParser.REGEXP_:
				case SQLiteParser.REINDEX_:
				case SQLiteParser.RELEASE_:
				case SQLiteParser.RENAME_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.RESTRICT_:
				case SQLiteParser.RIGHT_:
				case SQLiteParser.ROLLBACK_:
				case SQLiteParser.ROW_:
				case SQLiteParser.ROWS_:
				case SQLiteParser.SAVEPOINT_:
				case SQLiteParser.SELECT_:
				case SQLiteParser.SET_:
				case SQLiteParser.TABLE_:
				case SQLiteParser.TEMP_:
				case SQLiteParser.TEMPORARY_:
				case SQLiteParser.THEN_:
				case SQLiteParser.TO_:
				case SQLiteParser.TRANSACTION_:
				case SQLiteParser.TRIGGER_:
				case SQLiteParser.UNION_:
				case SQLiteParser.UNIQUE_:
				case SQLiteParser.UPDATE_:
				case SQLiteParser.USING_:
				case SQLiteParser.VACUUM_:
				case SQLiteParser.VALUES_:
				case SQLiteParser.VIEW_:
				case SQLiteParser.VIRTUAL_:
				case SQLiteParser.WHEN_:
				case SQLiteParser.WHERE_:
				case SQLiteParser.WITH_:
				case SQLiteParser.WITHOUT_:
				case SQLiteParser.FIRST_VALUE_:
				case SQLiteParser.OVER_:
				case SQLiteParser.PARTITION_:
				case SQLiteParser.RANGE_:
				case SQLiteParser.PRECEDING_:
				case SQLiteParser.UNBOUNDED_:
				case SQLiteParser.CURRENT_:
				case SQLiteParser.FOLLOWING_:
				case SQLiteParser.CUME_DIST_:
				case SQLiteParser.DENSE_RANK_:
				case SQLiteParser.LAG_:
				case SQLiteParser.LAST_VALUE_:
				case SQLiteParser.LEAD_:
				case SQLiteParser.NTH_VALUE_:
				case SQLiteParser.NTILE_:
				case SQLiteParser.PERCENT_RANK_:
				case SQLiteParser.RANK_:
				case SQLiteParser.ROW_NUMBER_:
				case SQLiteParser.GENERATED_:
				case SQLiteParser.ALWAYS_:
				case SQLiteParser.STORED_:
				case SQLiteParser.TRUE_:
				case SQLiteParser.FALSE_:
				case SQLiteParser.WINDOW_:
				case SQLiteParser.NULLS_:
				case SQLiteParser.FIRST_:
				case SQLiteParser.LAST_:
				case SQLiteParser.FILTER_:
				case SQLiteParser.GROUPS_:
				case SQLiteParser.EXCLUDE_:
				case SQLiteParser.IDENTIFIER:
				case SQLiteParser.NUMERIC_LITERAL:
				case SQLiteParser.BIND_PARAMETER:
				case SQLiteParser.STRING_LITERAL:
				case SQLiteParser.BLOB_LITERAL:
					this.state = 1281;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);
					if (la_ === 1) {
						this.state = 1280;
						this.match(SQLiteParser.DISTINCT_);
					}
					this.state = 1283;
					this.expr(0);
					this.state = 1288;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 1284;
						this.match(SQLiteParser.COMMA);
						this.state = 1285;
						this.expr(0);
						this.state = 1290;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
				case SQLiteParser.STAR:
					this.state = 1291;
					this.match(SQLiteParser.STAR);
					break;
				case SQLiteParser.CLOSE_PAR:
					break;
				default:
					break;
			}
			this.state = 1294;
			this.match(SQLiteParser.CLOSE_PAR);
			this.state = 1296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.FILTER_) {
				this.state = 1295;
				this.filter_clause();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	window_function_invocation() {
		let localctx = new Window_function_invocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, SQLiteParser.RULE_window_function_invocation);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1298;
			this.window_function();
			this.state = 1299;
			this.match(SQLiteParser.OPEN_PAR);
			this.state = 1309;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.OPEN_PAR:
				case SQLiteParser.PLUS:
				case SQLiteParser.MINUS:
				case SQLiteParser.TILDE:
				case SQLiteParser.ABORT_:
				case SQLiteParser.ACTION_:
				case SQLiteParser.ADD_:
				case SQLiteParser.AFTER_:
				case SQLiteParser.ALL_:
				case SQLiteParser.ALTER_:
				case SQLiteParser.ANALYZE_:
				case SQLiteParser.AND_:
				case SQLiteParser.AS_:
				case SQLiteParser.ASC_:
				case SQLiteParser.ATTACH_:
				case SQLiteParser.AUTOINCREMENT_:
				case SQLiteParser.BEFORE_:
				case SQLiteParser.BEGIN_:
				case SQLiteParser.BETWEEN_:
				case SQLiteParser.BY_:
				case SQLiteParser.CASCADE_:
				case SQLiteParser.CASE_:
				case SQLiteParser.CAST_:
				case SQLiteParser.CHECK_:
				case SQLiteParser.COLLATE_:
				case SQLiteParser.COLUMN_:
				case SQLiteParser.COMMIT_:
				case SQLiteParser.CONFLICT_:
				case SQLiteParser.CONSTRAINT_:
				case SQLiteParser.CREATE_:
				case SQLiteParser.CROSS_:
				case SQLiteParser.CURRENT_DATE_:
				case SQLiteParser.CURRENT_TIME_:
				case SQLiteParser.CURRENT_TIMESTAMP_:
				case SQLiteParser.DATABASE_:
				case SQLiteParser.DEFAULT_:
				case SQLiteParser.DEFERRABLE_:
				case SQLiteParser.DEFERRED_:
				case SQLiteParser.DELETE_:
				case SQLiteParser.DESC_:
				case SQLiteParser.DETACH_:
				case SQLiteParser.DISTINCT_:
				case SQLiteParser.DROP_:
				case SQLiteParser.EACH_:
				case SQLiteParser.ELSE_:
				case SQLiteParser.END_:
				case SQLiteParser.ESCAPE_:
				case SQLiteParser.EXCEPT_:
				case SQLiteParser.EXCLUSIVE_:
				case SQLiteParser.EXISTS_:
				case SQLiteParser.EXPLAIN_:
				case SQLiteParser.FAIL_:
				case SQLiteParser.FOR_:
				case SQLiteParser.FOREIGN_:
				case SQLiteParser.FROM_:
				case SQLiteParser.FULL_:
				case SQLiteParser.GLOB_:
				case SQLiteParser.GROUP_:
				case SQLiteParser.HAVING_:
				case SQLiteParser.IF_:
				case SQLiteParser.IGNORE_:
				case SQLiteParser.IMMEDIATE_:
				case SQLiteParser.IN_:
				case SQLiteParser.INDEX_:
				case SQLiteParser.INDEXED_:
				case SQLiteParser.INITIALLY_:
				case SQLiteParser.INNER_:
				case SQLiteParser.INSERT_:
				case SQLiteParser.INSTEAD_:
				case SQLiteParser.INTERSECT_:
				case SQLiteParser.INTO_:
				case SQLiteParser.IS_:
				case SQLiteParser.ISNULL_:
				case SQLiteParser.JOIN_:
				case SQLiteParser.KEY_:
				case SQLiteParser.LEFT_:
				case SQLiteParser.LIKE_:
				case SQLiteParser.LIMIT_:
				case SQLiteParser.MATCH_:
				case SQLiteParser.NATURAL_:
				case SQLiteParser.NO_:
				case SQLiteParser.NOT_:
				case SQLiteParser.NOTNULL_:
				case SQLiteParser.NULL_:
				case SQLiteParser.OF_:
				case SQLiteParser.OFFSET_:
				case SQLiteParser.ON_:
				case SQLiteParser.OR_:
				case SQLiteParser.ORDER_:
				case SQLiteParser.OUTER_:
				case SQLiteParser.PLAN_:
				case SQLiteParser.PRAGMA_:
				case SQLiteParser.PRIMARY_:
				case SQLiteParser.QUERY_:
				case SQLiteParser.RAISE_:
				case SQLiteParser.RECURSIVE_:
				case SQLiteParser.REFERENCES_:
				case SQLiteParser.REGEXP_:
				case SQLiteParser.REINDEX_:
				case SQLiteParser.RELEASE_:
				case SQLiteParser.RENAME_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.RESTRICT_:
				case SQLiteParser.RIGHT_:
				case SQLiteParser.ROLLBACK_:
				case SQLiteParser.ROW_:
				case SQLiteParser.ROWS_:
				case SQLiteParser.SAVEPOINT_:
				case SQLiteParser.SELECT_:
				case SQLiteParser.SET_:
				case SQLiteParser.TABLE_:
				case SQLiteParser.TEMP_:
				case SQLiteParser.TEMPORARY_:
				case SQLiteParser.THEN_:
				case SQLiteParser.TO_:
				case SQLiteParser.TRANSACTION_:
				case SQLiteParser.TRIGGER_:
				case SQLiteParser.UNION_:
				case SQLiteParser.UNIQUE_:
				case SQLiteParser.UPDATE_:
				case SQLiteParser.USING_:
				case SQLiteParser.VACUUM_:
				case SQLiteParser.VALUES_:
				case SQLiteParser.VIEW_:
				case SQLiteParser.VIRTUAL_:
				case SQLiteParser.WHEN_:
				case SQLiteParser.WHERE_:
				case SQLiteParser.WITH_:
				case SQLiteParser.WITHOUT_:
				case SQLiteParser.FIRST_VALUE_:
				case SQLiteParser.OVER_:
				case SQLiteParser.PARTITION_:
				case SQLiteParser.RANGE_:
				case SQLiteParser.PRECEDING_:
				case SQLiteParser.UNBOUNDED_:
				case SQLiteParser.CURRENT_:
				case SQLiteParser.FOLLOWING_:
				case SQLiteParser.CUME_DIST_:
				case SQLiteParser.DENSE_RANK_:
				case SQLiteParser.LAG_:
				case SQLiteParser.LAST_VALUE_:
				case SQLiteParser.LEAD_:
				case SQLiteParser.NTH_VALUE_:
				case SQLiteParser.NTILE_:
				case SQLiteParser.PERCENT_RANK_:
				case SQLiteParser.RANK_:
				case SQLiteParser.ROW_NUMBER_:
				case SQLiteParser.GENERATED_:
				case SQLiteParser.ALWAYS_:
				case SQLiteParser.STORED_:
				case SQLiteParser.TRUE_:
				case SQLiteParser.FALSE_:
				case SQLiteParser.WINDOW_:
				case SQLiteParser.NULLS_:
				case SQLiteParser.FIRST_:
				case SQLiteParser.LAST_:
				case SQLiteParser.FILTER_:
				case SQLiteParser.GROUPS_:
				case SQLiteParser.EXCLUDE_:
				case SQLiteParser.IDENTIFIER:
				case SQLiteParser.NUMERIC_LITERAL:
				case SQLiteParser.BIND_PARAMETER:
				case SQLiteParser.STRING_LITERAL:
				case SQLiteParser.BLOB_LITERAL:
					this.state = 1300;
					this.expr(0);
					this.state = 1305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLiteParser.COMMA) {
						this.state = 1301;
						this.match(SQLiteParser.COMMA);
						this.state = 1302;
						this.expr(0);
						this.state = 1307;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
				case SQLiteParser.STAR:
					this.state = 1308;
					this.match(SQLiteParser.STAR);
					break;
				case SQLiteParser.CLOSE_PAR:
					break;
				default:
					break;
			}
			this.state = 1311;
			this.match(SQLiteParser.CLOSE_PAR);
			this.state = 1313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.FILTER_) {
				this.state = 1312;
				this.filter_clause();
			}

			this.state = 1315;
			this.match(SQLiteParser.OVER_);
			this.state = 1318;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 188, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1316;
					this.window_defn();
					break;

				case 2:
					this.state = 1317;
					this.window_name();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	common_table_stmt() {
		let localctx = new Common_table_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, SQLiteParser.RULE_common_table_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1320;
			this.match(SQLiteParser.WITH_);
			this.state = 1322;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 189, this._ctx);
			if (la_ === 1) {
				this.state = 1321;
				this.match(SQLiteParser.RECURSIVE_);
			}
			this.state = 1324;
			this.common_table_expression();
			this.state = 1329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1325;
				this.match(SQLiteParser.COMMA);
				this.state = 1326;
				this.common_table_expression();
				this.state = 1331;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	order_by_stmt() {
		let localctx = new Order_by_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, SQLiteParser.RULE_order_by_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1332;
			this.match(SQLiteParser.ORDER_);
			this.state = 1333;
			this.match(SQLiteParser.BY_);
			this.state = 1334;
			this.ordering_term();
			this.state = 1339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1335;
				this.match(SQLiteParser.COMMA);
				this.state = 1336;
				this.ordering_term();
				this.state = 1341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	limit_stmt() {
		let localctx = new Limit_stmtContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, SQLiteParser.RULE_limit_stmt);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1342;
			this.match(SQLiteParser.LIMIT_);
			this.state = 1343;
			this.expr(0);
			this.state = 1346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.COMMA || _la === SQLiteParser.OFFSET_) {
				this.state = 1344;
				_la = this._input.LA(1);
				if (!(_la === SQLiteParser.COMMA || _la === SQLiteParser.OFFSET_)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1345;
				this.expr(0);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	ordering_term() {
		let localctx = new Ordering_termContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, SQLiteParser.RULE_ordering_term);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1348;
			this.expr(0);
			this.state = 1351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.COLLATE_) {
				this.state = 1349;
				this.match(SQLiteParser.COLLATE_);
				this.state = 1350;
				this.collation_name();
			}

			this.state = 1354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
				this.state = 1353;
				this.asc_desc();
			}

			this.state = 1358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.NULLS_) {
				this.state = 1356;
				this.match(SQLiteParser.NULLS_);
				this.state = 1357;
				_la = this._input.LA(1);
				if (!(_la === SQLiteParser.FIRST_ || _la === SQLiteParser.LAST_)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	asc_desc() {
		let localctx = new Asc_descContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, SQLiteParser.RULE_asc_desc);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1360;
			_la = this._input.LA(1);
			if (!(_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	frame_left() {
		let localctx = new Frame_leftContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, SQLiteParser.RULE_frame_left);
		try {
			this.state = 1372;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 196, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1362;
					this.expr(0);
					this.state = 1363;
					this.match(SQLiteParser.PRECEDING_);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1365;
					this.expr(0);
					this.state = 1366;
					this.match(SQLiteParser.FOLLOWING_);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1368;
					this.match(SQLiteParser.CURRENT_);
					this.state = 1369;
					this.match(SQLiteParser.ROW_);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 1370;
					this.match(SQLiteParser.UNBOUNDED_);
					this.state = 1371;
					this.match(SQLiteParser.PRECEDING_);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	frame_right() {
		let localctx = new Frame_rightContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, SQLiteParser.RULE_frame_right);
		try {
			this.state = 1384;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1374;
					this.expr(0);
					this.state = 1375;
					this.match(SQLiteParser.PRECEDING_);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1377;
					this.expr(0);
					this.state = 1378;
					this.match(SQLiteParser.FOLLOWING_);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1380;
					this.match(SQLiteParser.CURRENT_);
					this.state = 1381;
					this.match(SQLiteParser.ROW_);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 1382;
					this.match(SQLiteParser.UNBOUNDED_);
					this.state = 1383;
					this.match(SQLiteParser.FOLLOWING_);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	frame_single() {
		let localctx = new Frame_singleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, SQLiteParser.RULE_frame_single);
		try {
			this.state = 1393;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 198, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1386;
					this.expr(0);
					this.state = 1387;
					this.match(SQLiteParser.PRECEDING_);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1389;
					this.match(SQLiteParser.UNBOUNDED_);
					this.state = 1390;
					this.match(SQLiteParser.PRECEDING_);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1391;
					this.match(SQLiteParser.CURRENT_);
					this.state = 1392;
					this.match(SQLiteParser.ROW_);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	window_function() {
		let localctx = new Window_functionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, SQLiteParser.RULE_window_function);
		var _la = 0; // Token type
		try {
			this.state = 1480;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.FIRST_VALUE_:
				case SQLiteParser.LAST_VALUE_:
					this.enterOuterAlt(localctx, 1);
					this.state = 1395;
					_la = this._input.LA(1);
					if (!(_la === SQLiteParser.FIRST_VALUE_ || _la === SQLiteParser.LAST_VALUE_)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1396;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1397;
					this.expr(0);
					this.state = 1398;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1399;
					this.match(SQLiteParser.OVER_);
					this.state = 1400;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1402;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1401;
						this.partition_by();
					}

					this.state = 1404;
					this.order_by_expr_asc_desc();
					this.state = 1406;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
						this.state = 1405;
						this.frame_clause();
					}

					this.state = 1408;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.CUME_DIST_:
				case SQLiteParser.PERCENT_RANK_:
					this.enterOuterAlt(localctx, 2);
					this.state = 1410;
					_la = this._input.LA(1);
					if (!(_la === SQLiteParser.CUME_DIST_ || _la === SQLiteParser.PERCENT_RANK_)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1411;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1412;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1413;
					this.match(SQLiteParser.OVER_);
					this.state = 1414;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1416;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1415;
						this.partition_by();
					}

					this.state = 1419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ORDER_) {
						this.state = 1418;
						this.order_by_expr();
					}

					this.state = 1421;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.DENSE_RANK_:
				case SQLiteParser.RANK_:
				case SQLiteParser.ROW_NUMBER_:
					this.enterOuterAlt(localctx, 3);
					this.state = 1422;
					_la = this._input.LA(1);
					if (!(((_la - 159) & ~0x1f) == 0 && ((1 << (_la - 159)) & ((1 << (SQLiteParser.DENSE_RANK_ - 159)) | (1 << (SQLiteParser.RANK_ - 159)) | (1 << (SQLiteParser.ROW_NUMBER_ - 159)))) !== 0)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1423;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1424;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1425;
					this.match(SQLiteParser.OVER_);
					this.state = 1426;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1427;
						this.partition_by();
					}

					this.state = 1430;
					this.order_by_expr_asc_desc();
					this.state = 1431;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.LAG_:
				case SQLiteParser.LEAD_:
					this.enterOuterAlt(localctx, 4);
					this.state = 1433;
					_la = this._input.LA(1);
					if (!(_la === SQLiteParser.LAG_ || _la === SQLiteParser.LEAD_)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1434;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1435;
					this.expr(0);
					this.state = 1437;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
					if (la_ === 1) {
						this.state = 1436;
						this.of_OF_fset();
					}
					this.state = 1440;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.COMMA) {
						this.state = 1439;
						this.default_DEFAULT__value();
					}

					this.state = 1442;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1443;
					this.match(SQLiteParser.OVER_);
					this.state = 1444;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1445;
						this.partition_by();
					}

					this.state = 1448;
					this.order_by_expr_asc_desc();
					this.state = 1449;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.NTH_VALUE_:
					this.enterOuterAlt(localctx, 5);
					this.state = 1451;
					this.match(SQLiteParser.NTH_VALUE_);
					this.state = 1452;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1453;
					this.expr(0);
					this.state = 1454;
					this.match(SQLiteParser.COMMA);
					this.state = 1455;
					this.signed_number();
					this.state = 1456;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1457;
					this.match(SQLiteParser.OVER_);
					this.state = 1458;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1460;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1459;
						this.partition_by();
					}

					this.state = 1462;
					this.order_by_expr_asc_desc();
					this.state = 1464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.ROWS_ || _la === SQLiteParser.RANGE_ || _la === SQLiteParser.GROUPS_) {
						this.state = 1463;
						this.frame_clause();
					}

					this.state = 1466;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				case SQLiteParser.NTILE_:
					this.enterOuterAlt(localctx, 6);
					this.state = 1468;
					this.match(SQLiteParser.NTILE_);
					this.state = 1469;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1470;
					this.expr(0);
					this.state = 1471;
					this.match(SQLiteParser.CLOSE_PAR);
					this.state = 1472;
					this.match(SQLiteParser.OVER_);
					this.state = 1473;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLiteParser.PARTITION_) {
						this.state = 1474;
						this.partition_by();
					}

					this.state = 1477;
					this.order_by_expr_asc_desc();
					this.state = 1478;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	of_OF_fset() {
		let localctx = new Of_OF_fsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, SQLiteParser.RULE_of_OF_fset);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1482;
			this.match(SQLiteParser.COMMA);
			this.state = 1483;
			this.signed_number();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	default_DEFAULT__value() {
		let localctx = new Default_DEFAULT__valueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, SQLiteParser.RULE_default_DEFAULT__value);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1485;
			this.match(SQLiteParser.COMMA);
			this.state = 1486;
			this.signed_number();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	partition_by() {
		let localctx = new Partition_byContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, SQLiteParser.RULE_partition_by);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1488;
			this.match(SQLiteParser.PARTITION_);
			this.state = 1489;
			this.match(SQLiteParser.BY_);
			this.state = 1491;
			this._errHandler.sync(this);
			var _alt = 1;
			do {
				switch (_alt) {
					case 1:
						this.state = 1490;
						this.expr(0);
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1493;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 211, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	order_by_expr() {
		let localctx = new Order_by_exprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, SQLiteParser.RULE_order_by_expr);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1495;
			this.match(SQLiteParser.ORDER_);
			this.state = 1496;
			this.match(SQLiteParser.BY_);
			this.state = 1498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 1497;
				this.expr(0);
				this.state = 1500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (
				((_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << SQLiteParser.OPEN_PAR) |
							(1 << SQLiteParser.PLUS) |
							(1 << SQLiteParser.MINUS) |
							(1 << SQLiteParser.TILDE) |
							(1 << SQLiteParser.ABORT_) |
							(1 << SQLiteParser.ACTION_) |
							(1 << SQLiteParser.ADD_) |
							(1 << SQLiteParser.AFTER_) |
							(1 << SQLiteParser.ALL_) |
							(1 << SQLiteParser.ALTER_) |
							(1 << SQLiteParser.ANALYZE_))) !==
						0) ||
				(((_la - 32) & ~0x1f) == 0 &&
					((1 << (_la - 32)) &
						((1 << (SQLiteParser.AND_ - 32)) |
							(1 << (SQLiteParser.AS_ - 32)) |
							(1 << (SQLiteParser.ASC_ - 32)) |
							(1 << (SQLiteParser.ATTACH_ - 32)) |
							(1 << (SQLiteParser.AUTOINCREMENT_ - 32)) |
							(1 << (SQLiteParser.BEFORE_ - 32)) |
							(1 << (SQLiteParser.BEGIN_ - 32)) |
							(1 << (SQLiteParser.BETWEEN_ - 32)) |
							(1 << (SQLiteParser.BY_ - 32)) |
							(1 << (SQLiteParser.CASCADE_ - 32)) |
							(1 << (SQLiteParser.CASE_ - 32)) |
							(1 << (SQLiteParser.CAST_ - 32)) |
							(1 << (SQLiteParser.CHECK_ - 32)) |
							(1 << (SQLiteParser.COLLATE_ - 32)) |
							(1 << (SQLiteParser.COLUMN_ - 32)) |
							(1 << (SQLiteParser.COMMIT_ - 32)) |
							(1 << (SQLiteParser.CONFLICT_ - 32)) |
							(1 << (SQLiteParser.CONSTRAINT_ - 32)) |
							(1 << (SQLiteParser.CREATE_ - 32)) |
							(1 << (SQLiteParser.CROSS_ - 32)) |
							(1 << (SQLiteParser.CURRENT_DATE_ - 32)) |
							(1 << (SQLiteParser.CURRENT_TIME_ - 32)) |
							(1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 32)) |
							(1 << (SQLiteParser.DATABASE_ - 32)) |
							(1 << (SQLiteParser.DEFAULT_ - 32)) |
							(1 << (SQLiteParser.DEFERRABLE_ - 32)) |
							(1 << (SQLiteParser.DEFERRED_ - 32)) |
							(1 << (SQLiteParser.DELETE_ - 32)) |
							(1 << (SQLiteParser.DESC_ - 32)) |
							(1 << (SQLiteParser.DETACH_ - 32)) |
							(1 << (SQLiteParser.DISTINCT_ - 32)) |
							(1 << (SQLiteParser.DROP_ - 32)))) !==
						0) ||
				(((_la - 64) & ~0x1f) == 0 &&
					((1 << (_la - 64)) &
						((1 << (SQLiteParser.EACH_ - 64)) |
							(1 << (SQLiteParser.ELSE_ - 64)) |
							(1 << (SQLiteParser.END_ - 64)) |
							(1 << (SQLiteParser.ESCAPE_ - 64)) |
							(1 << (SQLiteParser.EXCEPT_ - 64)) |
							(1 << (SQLiteParser.EXCLUSIVE_ - 64)) |
							(1 << (SQLiteParser.EXISTS_ - 64)) |
							(1 << (SQLiteParser.EXPLAIN_ - 64)) |
							(1 << (SQLiteParser.FAIL_ - 64)) |
							(1 << (SQLiteParser.FOR_ - 64)) |
							(1 << (SQLiteParser.FOREIGN_ - 64)) |
							(1 << (SQLiteParser.FROM_ - 64)) |
							(1 << (SQLiteParser.FULL_ - 64)) |
							(1 << (SQLiteParser.GLOB_ - 64)) |
							(1 << (SQLiteParser.GROUP_ - 64)) |
							(1 << (SQLiteParser.HAVING_ - 64)) |
							(1 << (SQLiteParser.IF_ - 64)) |
							(1 << (SQLiteParser.IGNORE_ - 64)) |
							(1 << (SQLiteParser.IMMEDIATE_ - 64)) |
							(1 << (SQLiteParser.IN_ - 64)) |
							(1 << (SQLiteParser.INDEX_ - 64)) |
							(1 << (SQLiteParser.INDEXED_ - 64)) |
							(1 << (SQLiteParser.INITIALLY_ - 64)) |
							(1 << (SQLiteParser.INNER_ - 64)) |
							(1 << (SQLiteParser.INSERT_ - 64)) |
							(1 << (SQLiteParser.INSTEAD_ - 64)) |
							(1 << (SQLiteParser.INTERSECT_ - 64)) |
							(1 << (SQLiteParser.INTO_ - 64)) |
							(1 << (SQLiteParser.IS_ - 64)) |
							(1 << (SQLiteParser.ISNULL_ - 64)) |
							(1 << (SQLiteParser.JOIN_ - 64)) |
							(1 << (SQLiteParser.KEY_ - 64)))) !==
						0) ||
				(((_la - 96) & ~0x1f) == 0 &&
					((1 << (_la - 96)) &
						((1 << (SQLiteParser.LEFT_ - 96)) |
							(1 << (SQLiteParser.LIKE_ - 96)) |
							(1 << (SQLiteParser.LIMIT_ - 96)) |
							(1 << (SQLiteParser.MATCH_ - 96)) |
							(1 << (SQLiteParser.NATURAL_ - 96)) |
							(1 << (SQLiteParser.NO_ - 96)) |
							(1 << (SQLiteParser.NOT_ - 96)) |
							(1 << (SQLiteParser.NOTNULL_ - 96)) |
							(1 << (SQLiteParser.NULL_ - 96)) |
							(1 << (SQLiteParser.OF_ - 96)) |
							(1 << (SQLiteParser.OFFSET_ - 96)) |
							(1 << (SQLiteParser.ON_ - 96)) |
							(1 << (SQLiteParser.OR_ - 96)) |
							(1 << (SQLiteParser.ORDER_ - 96)) |
							(1 << (SQLiteParser.OUTER_ - 96)) |
							(1 << (SQLiteParser.PLAN_ - 96)) |
							(1 << (SQLiteParser.PRAGMA_ - 96)) |
							(1 << (SQLiteParser.PRIMARY_ - 96)) |
							(1 << (SQLiteParser.QUERY_ - 96)) |
							(1 << (SQLiteParser.RAISE_ - 96)) |
							(1 << (SQLiteParser.RECURSIVE_ - 96)) |
							(1 << (SQLiteParser.REFERENCES_ - 96)) |
							(1 << (SQLiteParser.REGEXP_ - 96)) |
							(1 << (SQLiteParser.REINDEX_ - 96)) |
							(1 << (SQLiteParser.RELEASE_ - 96)) |
							(1 << (SQLiteParser.RENAME_ - 96)) |
							(1 << (SQLiteParser.REPLACE_ - 96)) |
							(1 << (SQLiteParser.RESTRICT_ - 96)) |
							(1 << (SQLiteParser.RIGHT_ - 96)) |
							(1 << (SQLiteParser.ROLLBACK_ - 96)) |
							(1 << (SQLiteParser.ROW_ - 96)) |
							(1 << (SQLiteParser.ROWS_ - 96)))) !==
						0) ||
				(((_la - 128) & ~0x1f) == 0 &&
					((1 << (_la - 128)) &
						((1 << (SQLiteParser.SAVEPOINT_ - 128)) |
							(1 << (SQLiteParser.SELECT_ - 128)) |
							(1 << (SQLiteParser.SET_ - 128)) |
							(1 << (SQLiteParser.TABLE_ - 128)) |
							(1 << (SQLiteParser.TEMP_ - 128)) |
							(1 << (SQLiteParser.TEMPORARY_ - 128)) |
							(1 << (SQLiteParser.THEN_ - 128)) |
							(1 << (SQLiteParser.TO_ - 128)) |
							(1 << (SQLiteParser.TRANSACTION_ - 128)) |
							(1 << (SQLiteParser.TRIGGER_ - 128)) |
							(1 << (SQLiteParser.UNION_ - 128)) |
							(1 << (SQLiteParser.UNIQUE_ - 128)) |
							(1 << (SQLiteParser.UPDATE_ - 128)) |
							(1 << (SQLiteParser.USING_ - 128)) |
							(1 << (SQLiteParser.VACUUM_ - 128)) |
							(1 << (SQLiteParser.VALUES_ - 128)) |
							(1 << (SQLiteParser.VIEW_ - 128)) |
							(1 << (SQLiteParser.VIRTUAL_ - 128)) |
							(1 << (SQLiteParser.WHEN_ - 128)) |
							(1 << (SQLiteParser.WHERE_ - 128)) |
							(1 << (SQLiteParser.WITH_ - 128)) |
							(1 << (SQLiteParser.WITHOUT_ - 128)) |
							(1 << (SQLiteParser.FIRST_VALUE_ - 128)) |
							(1 << (SQLiteParser.OVER_ - 128)) |
							(1 << (SQLiteParser.PARTITION_ - 128)) |
							(1 << (SQLiteParser.RANGE_ - 128)) |
							(1 << (SQLiteParser.PRECEDING_ - 128)) |
							(1 << (SQLiteParser.UNBOUNDED_ - 128)) |
							(1 << (SQLiteParser.CURRENT_ - 128)) |
							(1 << (SQLiteParser.FOLLOWING_ - 128)) |
							(1 << (SQLiteParser.CUME_DIST_ - 128)) |
							(1 << (SQLiteParser.DENSE_RANK_ - 128)))) !==
						0) ||
				(((_la - 160) & ~0x1f) == 0 &&
					((1 << (_la - 160)) &
						((1 << (SQLiteParser.LAG_ - 160)) |
							(1 << (SQLiteParser.LAST_VALUE_ - 160)) |
							(1 << (SQLiteParser.LEAD_ - 160)) |
							(1 << (SQLiteParser.NTH_VALUE_ - 160)) |
							(1 << (SQLiteParser.NTILE_ - 160)) |
							(1 << (SQLiteParser.PERCENT_RANK_ - 160)) |
							(1 << (SQLiteParser.RANK_ - 160)) |
							(1 << (SQLiteParser.ROW_NUMBER_ - 160)) |
							(1 << (SQLiteParser.GENERATED_ - 160)) |
							(1 << (SQLiteParser.ALWAYS_ - 160)) |
							(1 << (SQLiteParser.STORED_ - 160)) |
							(1 << (SQLiteParser.TRUE_ - 160)) |
							(1 << (SQLiteParser.FALSE_ - 160)) |
							(1 << (SQLiteParser.WINDOW_ - 160)) |
							(1 << (SQLiteParser.NULLS_ - 160)) |
							(1 << (SQLiteParser.FIRST_ - 160)) |
							(1 << (SQLiteParser.LAST_ - 160)) |
							(1 << (SQLiteParser.FILTER_ - 160)) |
							(1 << (SQLiteParser.GROUPS_ - 160)) |
							(1 << (SQLiteParser.EXCLUDE_ - 160)) |
							(1 << (SQLiteParser.IDENTIFIER - 160)) |
							(1 << (SQLiteParser.NUMERIC_LITERAL - 160)) |
							(1 << (SQLiteParser.BIND_PARAMETER - 160)) |
							(1 << (SQLiteParser.STRING_LITERAL - 160)) |
							(1 << (SQLiteParser.BLOB_LITERAL - 160)))) !==
						0)
			);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	order_by_expr_asc_desc() {
		let localctx = new Order_by_expr_asc_descContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, SQLiteParser.RULE_order_by_expr_asc_desc);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1502;
			this.match(SQLiteParser.ORDER_);
			this.state = 1503;
			this.match(SQLiteParser.BY_);
			this.state = 1504;
			this.expr_asc_desc();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	expr_asc_desc() {
		let localctx = new Expr_asc_descContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, SQLiteParser.RULE_expr_asc_desc);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1506;
			this.expr(0);
			this.state = 1508;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
				this.state = 1507;
				this.asc_desc();
			}

			this.state = 1517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLiteParser.COMMA) {
				this.state = 1510;
				this.match(SQLiteParser.COMMA);
				this.state = 1511;
				this.expr(0);
				this.state = 1513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLiteParser.ASC_ || _la === SQLiteParser.DESC_) {
					this.state = 1512;
					this.asc_desc();
				}

				this.state = 1519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	initial_select() {
		let localctx = new Initial_selectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, SQLiteParser.RULE_initial_select);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1520;
			this.select_stmt();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	recursive__select() {
		let localctx = new Recursive__selectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, SQLiteParser.RULE_recursive__select);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1522;
			this.select_stmt();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	unary_operator() {
		let localctx = new Unary_operatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, SQLiteParser.RULE_unary_operator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1524;
			_la = this._input.LA(1);
			if (!(((_la & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) !== 0) || _la === SQLiteParser.NOT_)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	error_message() {
		let localctx = new Error_messageContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, SQLiteParser.RULE_error_message);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1526;
			this.match(SQLiteParser.STRING_LITERAL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	module_argument() {
		let localctx = new Module_argumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, SQLiteParser.RULE_module_argument);
		try {
			this.state = 1530;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 216, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1528;
					this.expr(0);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1529;
					this.column_def();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	column_alias() {
		let localctx = new Column_aliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, SQLiteParser.RULE_column_alias);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1532;
			_la = this._input.LA(1);
			if (!(_la === SQLiteParser.IDENTIFIER || _la === SQLiteParser.STRING_LITERAL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	keyword() {
		let localctx = new KeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, SQLiteParser.RULE_keyword);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1534;
			_la = this._input.LA(1);
			if (
				!(
					(((_la - 25) & ~0x1f) == 0 &&
						((1 << (_la - 25)) &
							((1 << (SQLiteParser.ABORT_ - 25)) |
								(1 << (SQLiteParser.ACTION_ - 25)) |
								(1 << (SQLiteParser.ADD_ - 25)) |
								(1 << (SQLiteParser.AFTER_ - 25)) |
								(1 << (SQLiteParser.ALL_ - 25)) |
								(1 << (SQLiteParser.ALTER_ - 25)) |
								(1 << (SQLiteParser.ANALYZE_ - 25)) |
								(1 << (SQLiteParser.AND_ - 25)) |
								(1 << (SQLiteParser.AS_ - 25)) |
								(1 << (SQLiteParser.ASC_ - 25)) |
								(1 << (SQLiteParser.ATTACH_ - 25)) |
								(1 << (SQLiteParser.AUTOINCREMENT_ - 25)) |
								(1 << (SQLiteParser.BEFORE_ - 25)) |
								(1 << (SQLiteParser.BEGIN_ - 25)) |
								(1 << (SQLiteParser.BETWEEN_ - 25)) |
								(1 << (SQLiteParser.BY_ - 25)) |
								(1 << (SQLiteParser.CASCADE_ - 25)) |
								(1 << (SQLiteParser.CASE_ - 25)) |
								(1 << (SQLiteParser.CAST_ - 25)) |
								(1 << (SQLiteParser.CHECK_ - 25)) |
								(1 << (SQLiteParser.COLLATE_ - 25)) |
								(1 << (SQLiteParser.COLUMN_ - 25)) |
								(1 << (SQLiteParser.COMMIT_ - 25)) |
								(1 << (SQLiteParser.CONFLICT_ - 25)) |
								(1 << (SQLiteParser.CONSTRAINT_ - 25)) |
								(1 << (SQLiteParser.CREATE_ - 25)) |
								(1 << (SQLiteParser.CROSS_ - 25)) |
								(1 << (SQLiteParser.CURRENT_DATE_ - 25)) |
								(1 << (SQLiteParser.CURRENT_TIME_ - 25)) |
								(1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 25)) |
								(1 << (SQLiteParser.DATABASE_ - 25)) |
								(1 << (SQLiteParser.DEFAULT_ - 25)))) !==
							0) ||
					(((_la - 57) & ~0x1f) == 0 &&
						((1 << (_la - 57)) &
							((1 << (SQLiteParser.DEFERRABLE_ - 57)) |
								(1 << (SQLiteParser.DEFERRED_ - 57)) |
								(1 << (SQLiteParser.DELETE_ - 57)) |
								(1 << (SQLiteParser.DESC_ - 57)) |
								(1 << (SQLiteParser.DETACH_ - 57)) |
								(1 << (SQLiteParser.DISTINCT_ - 57)) |
								(1 << (SQLiteParser.DROP_ - 57)) |
								(1 << (SQLiteParser.EACH_ - 57)) |
								(1 << (SQLiteParser.ELSE_ - 57)) |
								(1 << (SQLiteParser.END_ - 57)) |
								(1 << (SQLiteParser.ESCAPE_ - 57)) |
								(1 << (SQLiteParser.EXCEPT_ - 57)) |
								(1 << (SQLiteParser.EXCLUSIVE_ - 57)) |
								(1 << (SQLiteParser.EXISTS_ - 57)) |
								(1 << (SQLiteParser.EXPLAIN_ - 57)) |
								(1 << (SQLiteParser.FAIL_ - 57)) |
								(1 << (SQLiteParser.FOR_ - 57)) |
								(1 << (SQLiteParser.FOREIGN_ - 57)) |
								(1 << (SQLiteParser.FROM_ - 57)) |
								(1 << (SQLiteParser.FULL_ - 57)) |
								(1 << (SQLiteParser.GLOB_ - 57)) |
								(1 << (SQLiteParser.GROUP_ - 57)) |
								(1 << (SQLiteParser.HAVING_ - 57)) |
								(1 << (SQLiteParser.IF_ - 57)) |
								(1 << (SQLiteParser.IGNORE_ - 57)) |
								(1 << (SQLiteParser.IMMEDIATE_ - 57)) |
								(1 << (SQLiteParser.IN_ - 57)) |
								(1 << (SQLiteParser.INDEX_ - 57)) |
								(1 << (SQLiteParser.INDEXED_ - 57)) |
								(1 << (SQLiteParser.INITIALLY_ - 57)) |
								(1 << (SQLiteParser.INNER_ - 57)) |
								(1 << (SQLiteParser.INSERT_ - 57)))) !==
							0) ||
					(((_la - 89) & ~0x1f) == 0 &&
						((1 << (_la - 89)) &
							((1 << (SQLiteParser.INSTEAD_ - 89)) |
								(1 << (SQLiteParser.INTERSECT_ - 89)) |
								(1 << (SQLiteParser.INTO_ - 89)) |
								(1 << (SQLiteParser.IS_ - 89)) |
								(1 << (SQLiteParser.ISNULL_ - 89)) |
								(1 << (SQLiteParser.JOIN_ - 89)) |
								(1 << (SQLiteParser.KEY_ - 89)) |
								(1 << (SQLiteParser.LEFT_ - 89)) |
								(1 << (SQLiteParser.LIKE_ - 89)) |
								(1 << (SQLiteParser.LIMIT_ - 89)) |
								(1 << (SQLiteParser.MATCH_ - 89)) |
								(1 << (SQLiteParser.NATURAL_ - 89)) |
								(1 << (SQLiteParser.NO_ - 89)) |
								(1 << (SQLiteParser.NOT_ - 89)) |
								(1 << (SQLiteParser.NOTNULL_ - 89)) |
								(1 << (SQLiteParser.NULL_ - 89)) |
								(1 << (SQLiteParser.OF_ - 89)) |
								(1 << (SQLiteParser.OFFSET_ - 89)) |
								(1 << (SQLiteParser.ON_ - 89)) |
								(1 << (SQLiteParser.OR_ - 89)) |
								(1 << (SQLiteParser.ORDER_ - 89)) |
								(1 << (SQLiteParser.OUTER_ - 89)) |
								(1 << (SQLiteParser.PLAN_ - 89)) |
								(1 << (SQLiteParser.PRAGMA_ - 89)) |
								(1 << (SQLiteParser.PRIMARY_ - 89)) |
								(1 << (SQLiteParser.QUERY_ - 89)) |
								(1 << (SQLiteParser.RAISE_ - 89)) |
								(1 << (SQLiteParser.RECURSIVE_ - 89)) |
								(1 << (SQLiteParser.REFERENCES_ - 89)) |
								(1 << (SQLiteParser.REGEXP_ - 89)) |
								(1 << (SQLiteParser.REINDEX_ - 89)) |
								(1 << (SQLiteParser.RELEASE_ - 89)))) !==
							0) ||
					(((_la - 121) & ~0x1f) == 0 &&
						((1 << (_la - 121)) &
							((1 << (SQLiteParser.RENAME_ - 121)) |
								(1 << (SQLiteParser.REPLACE_ - 121)) |
								(1 << (SQLiteParser.RESTRICT_ - 121)) |
								(1 << (SQLiteParser.RIGHT_ - 121)) |
								(1 << (SQLiteParser.ROLLBACK_ - 121)) |
								(1 << (SQLiteParser.ROW_ - 121)) |
								(1 << (SQLiteParser.ROWS_ - 121)) |
								(1 << (SQLiteParser.SAVEPOINT_ - 121)) |
								(1 << (SQLiteParser.SELECT_ - 121)) |
								(1 << (SQLiteParser.SET_ - 121)) |
								(1 << (SQLiteParser.TABLE_ - 121)) |
								(1 << (SQLiteParser.TEMP_ - 121)) |
								(1 << (SQLiteParser.TEMPORARY_ - 121)) |
								(1 << (SQLiteParser.THEN_ - 121)) |
								(1 << (SQLiteParser.TO_ - 121)) |
								(1 << (SQLiteParser.TRANSACTION_ - 121)) |
								(1 << (SQLiteParser.TRIGGER_ - 121)) |
								(1 << (SQLiteParser.UNION_ - 121)) |
								(1 << (SQLiteParser.UNIQUE_ - 121)) |
								(1 << (SQLiteParser.UPDATE_ - 121)) |
								(1 << (SQLiteParser.USING_ - 121)) |
								(1 << (SQLiteParser.VACUUM_ - 121)) |
								(1 << (SQLiteParser.VALUES_ - 121)) |
								(1 << (SQLiteParser.VIEW_ - 121)) |
								(1 << (SQLiteParser.VIRTUAL_ - 121)) |
								(1 << (SQLiteParser.WHEN_ - 121)) |
								(1 << (SQLiteParser.WHERE_ - 121)) |
								(1 << (SQLiteParser.WITH_ - 121)) |
								(1 << (SQLiteParser.WITHOUT_ - 121)) |
								(1 << (SQLiteParser.FIRST_VALUE_ - 121)) |
								(1 << (SQLiteParser.OVER_ - 121)) |
								(1 << (SQLiteParser.PARTITION_ - 121)))) !==
							0) ||
					(((_la - 153) & ~0x1f) == 0 &&
						((1 << (_la - 153)) &
							((1 << (SQLiteParser.RANGE_ - 153)) |
								(1 << (SQLiteParser.PRECEDING_ - 153)) |
								(1 << (SQLiteParser.UNBOUNDED_ - 153)) |
								(1 << (SQLiteParser.CURRENT_ - 153)) |
								(1 << (SQLiteParser.FOLLOWING_ - 153)) |
								(1 << (SQLiteParser.CUME_DIST_ - 153)) |
								(1 << (SQLiteParser.DENSE_RANK_ - 153)) |
								(1 << (SQLiteParser.LAG_ - 153)) |
								(1 << (SQLiteParser.LAST_VALUE_ - 153)) |
								(1 << (SQLiteParser.LEAD_ - 153)) |
								(1 << (SQLiteParser.NTH_VALUE_ - 153)) |
								(1 << (SQLiteParser.NTILE_ - 153)) |
								(1 << (SQLiteParser.PERCENT_RANK_ - 153)) |
								(1 << (SQLiteParser.RANK_ - 153)) |
								(1 << (SQLiteParser.ROW_NUMBER_ - 153)) |
								(1 << (SQLiteParser.GENERATED_ - 153)) |
								(1 << (SQLiteParser.ALWAYS_ - 153)) |
								(1 << (SQLiteParser.STORED_ - 153)) |
								(1 << (SQLiteParser.TRUE_ - 153)) |
								(1 << (SQLiteParser.FALSE_ - 153)) |
								(1 << (SQLiteParser.WINDOW_ - 153)) |
								(1 << (SQLiteParser.NULLS_ - 153)) |
								(1 << (SQLiteParser.FIRST_ - 153)) |
								(1 << (SQLiteParser.LAST_ - 153)) |
								(1 << (SQLiteParser.FILTER_ - 153)) |
								(1 << (SQLiteParser.GROUPS_ - 153)) |
								(1 << (SQLiteParser.EXCLUDE_ - 153)))) !==
							0)
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	name() {
		let localctx = new NameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, SQLiteParser.RULE_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1536;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	function_name() {
		let localctx = new Function_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, SQLiteParser.RULE_function_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1538;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	schema_name() {
		let localctx = new Schema_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, SQLiteParser.RULE_schema_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1540;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_name() {
		let localctx = new Table_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, SQLiteParser.RULE_table_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1542;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_or_index_name() {
		let localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, SQLiteParser.RULE_table_or_index_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1544;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	new_table_name() {
		let localctx = new New_table_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, SQLiteParser.RULE_new_table_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1546;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	column_name() {
		let localctx = new Column_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, SQLiteParser.RULE_column_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1548;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	collation_name() {
		let localctx = new Collation_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, SQLiteParser.RULE_collation_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1550;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	foreign_table() {
		let localctx = new Foreign_tableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, SQLiteParser.RULE_foreign_table);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1552;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	index_name() {
		let localctx = new Index_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, SQLiteParser.RULE_index_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1554;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	trigger_name() {
		let localctx = new Trigger_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, SQLiteParser.RULE_trigger_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1556;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	view_name() {
		let localctx = new View_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, SQLiteParser.RULE_view_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1558;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	module_name() {
		let localctx = new Module_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, SQLiteParser.RULE_module_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1560;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	pragma_name() {
		let localctx = new Pragma_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, SQLiteParser.RULE_pragma_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1562;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	savepoint_name() {
		let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, SQLiteParser.RULE_savepoint_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1564;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_alias() {
		let localctx = new Table_aliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, SQLiteParser.RULE_table_alias);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1566;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	transaction_name() {
		let localctx = new Transaction_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, SQLiteParser.RULE_transaction_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1568;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	window_name() {
		let localctx = new Window_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, SQLiteParser.RULE_window_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1570;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	alias() {
		let localctx = new AliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, SQLiteParser.RULE_alias);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1572;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	filename() {
		let localctx = new FilenameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, SQLiteParser.RULE_filename);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1574;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	base_window_name() {
		let localctx = new Base_window_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, SQLiteParser.RULE_base_window_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1576;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	simple_func() {
		let localctx = new Simple_funcContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, SQLiteParser.RULE_simple_func);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1578;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	aggregate_func() {
		let localctx = new Aggregate_funcContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, SQLiteParser.RULE_aggregate_func);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1580;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	table_function_name() {
		let localctx = new Table_function_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, SQLiteParser.RULE_table_function_name);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1582;
			this.any_name();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	any_name() {
		let localctx = new Any_nameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, SQLiteParser.RULE_any_name);
		try {
			this.state = 1591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLiteParser.IDENTIFIER:
					this.enterOuterAlt(localctx, 1);
					this.state = 1584;
					this.match(SQLiteParser.IDENTIFIER);
					break;
				case SQLiteParser.ABORT_:
				case SQLiteParser.ACTION_:
				case SQLiteParser.ADD_:
				case SQLiteParser.AFTER_:
				case SQLiteParser.ALL_:
				case SQLiteParser.ALTER_:
				case SQLiteParser.ANALYZE_:
				case SQLiteParser.AND_:
				case SQLiteParser.AS_:
				case SQLiteParser.ASC_:
				case SQLiteParser.ATTACH_:
				case SQLiteParser.AUTOINCREMENT_:
				case SQLiteParser.BEFORE_:
				case SQLiteParser.BEGIN_:
				case SQLiteParser.BETWEEN_:
				case SQLiteParser.BY_:
				case SQLiteParser.CASCADE_:
				case SQLiteParser.CASE_:
				case SQLiteParser.CAST_:
				case SQLiteParser.CHECK_:
				case SQLiteParser.COLLATE_:
				case SQLiteParser.COLUMN_:
				case SQLiteParser.COMMIT_:
				case SQLiteParser.CONFLICT_:
				case SQLiteParser.CONSTRAINT_:
				case SQLiteParser.CREATE_:
				case SQLiteParser.CROSS_:
				case SQLiteParser.CURRENT_DATE_:
				case SQLiteParser.CURRENT_TIME_:
				case SQLiteParser.CURRENT_TIMESTAMP_:
				case SQLiteParser.DATABASE_:
				case SQLiteParser.DEFAULT_:
				case SQLiteParser.DEFERRABLE_:
				case SQLiteParser.DEFERRED_:
				case SQLiteParser.DELETE_:
				case SQLiteParser.DESC_:
				case SQLiteParser.DETACH_:
				case SQLiteParser.DISTINCT_:
				case SQLiteParser.DROP_:
				case SQLiteParser.EACH_:
				case SQLiteParser.ELSE_:
				case SQLiteParser.END_:
				case SQLiteParser.ESCAPE_:
				case SQLiteParser.EXCEPT_:
				case SQLiteParser.EXCLUSIVE_:
				case SQLiteParser.EXISTS_:
				case SQLiteParser.EXPLAIN_:
				case SQLiteParser.FAIL_:
				case SQLiteParser.FOR_:
				case SQLiteParser.FOREIGN_:
				case SQLiteParser.FROM_:
				case SQLiteParser.FULL_:
				case SQLiteParser.GLOB_:
				case SQLiteParser.GROUP_:
				case SQLiteParser.HAVING_:
				case SQLiteParser.IF_:
				case SQLiteParser.IGNORE_:
				case SQLiteParser.IMMEDIATE_:
				case SQLiteParser.IN_:
				case SQLiteParser.INDEX_:
				case SQLiteParser.INDEXED_:
				case SQLiteParser.INITIALLY_:
				case SQLiteParser.INNER_:
				case SQLiteParser.INSERT_:
				case SQLiteParser.INSTEAD_:
				case SQLiteParser.INTERSECT_:
				case SQLiteParser.INTO_:
				case SQLiteParser.IS_:
				case SQLiteParser.ISNULL_:
				case SQLiteParser.JOIN_:
				case SQLiteParser.KEY_:
				case SQLiteParser.LEFT_:
				case SQLiteParser.LIKE_:
				case SQLiteParser.LIMIT_:
				case SQLiteParser.MATCH_:
				case SQLiteParser.NATURAL_:
				case SQLiteParser.NO_:
				case SQLiteParser.NOT_:
				case SQLiteParser.NOTNULL_:
				case SQLiteParser.NULL_:
				case SQLiteParser.OF_:
				case SQLiteParser.OFFSET_:
				case SQLiteParser.ON_:
				case SQLiteParser.OR_:
				case SQLiteParser.ORDER_:
				case SQLiteParser.OUTER_:
				case SQLiteParser.PLAN_:
				case SQLiteParser.PRAGMA_:
				case SQLiteParser.PRIMARY_:
				case SQLiteParser.QUERY_:
				case SQLiteParser.RAISE_:
				case SQLiteParser.RECURSIVE_:
				case SQLiteParser.REFERENCES_:
				case SQLiteParser.REGEXP_:
				case SQLiteParser.REINDEX_:
				case SQLiteParser.RELEASE_:
				case SQLiteParser.RENAME_:
				case SQLiteParser.REPLACE_:
				case SQLiteParser.RESTRICT_:
				case SQLiteParser.RIGHT_:
				case SQLiteParser.ROLLBACK_:
				case SQLiteParser.ROW_:
				case SQLiteParser.ROWS_:
				case SQLiteParser.SAVEPOINT_:
				case SQLiteParser.SELECT_:
				case SQLiteParser.SET_:
				case SQLiteParser.TABLE_:
				case SQLiteParser.TEMP_:
				case SQLiteParser.TEMPORARY_:
				case SQLiteParser.THEN_:
				case SQLiteParser.TO_:
				case SQLiteParser.TRANSACTION_:
				case SQLiteParser.TRIGGER_:
				case SQLiteParser.UNION_:
				case SQLiteParser.UNIQUE_:
				case SQLiteParser.UPDATE_:
				case SQLiteParser.USING_:
				case SQLiteParser.VACUUM_:
				case SQLiteParser.VALUES_:
				case SQLiteParser.VIEW_:
				case SQLiteParser.VIRTUAL_:
				case SQLiteParser.WHEN_:
				case SQLiteParser.WHERE_:
				case SQLiteParser.WITH_:
				case SQLiteParser.WITHOUT_:
				case SQLiteParser.FIRST_VALUE_:
				case SQLiteParser.OVER_:
				case SQLiteParser.PARTITION_:
				case SQLiteParser.RANGE_:
				case SQLiteParser.PRECEDING_:
				case SQLiteParser.UNBOUNDED_:
				case SQLiteParser.CURRENT_:
				case SQLiteParser.FOLLOWING_:
				case SQLiteParser.CUME_DIST_:
				case SQLiteParser.DENSE_RANK_:
				case SQLiteParser.LAG_:
				case SQLiteParser.LAST_VALUE_:
				case SQLiteParser.LEAD_:
				case SQLiteParser.NTH_VALUE_:
				case SQLiteParser.NTILE_:
				case SQLiteParser.PERCENT_RANK_:
				case SQLiteParser.RANK_:
				case SQLiteParser.ROW_NUMBER_:
				case SQLiteParser.GENERATED_:
				case SQLiteParser.ALWAYS_:
				case SQLiteParser.STORED_:
				case SQLiteParser.TRUE_:
				case SQLiteParser.FALSE_:
				case SQLiteParser.WINDOW_:
				case SQLiteParser.NULLS_:
				case SQLiteParser.FIRST_:
				case SQLiteParser.LAST_:
				case SQLiteParser.FILTER_:
				case SQLiteParser.GROUPS_:
				case SQLiteParser.EXCLUDE_:
					this.enterOuterAlt(localctx, 2);
					this.state = 1585;
					this.keyword();
					break;
				case SQLiteParser.STRING_LITERAL:
					this.enterOuterAlt(localctx, 3);
					this.state = 1586;
					this.match(SQLiteParser.STRING_LITERAL);
					break;
				case SQLiteParser.OPEN_PAR:
					this.enterOuterAlt(localctx, 4);
					this.state = 1587;
					this.match(SQLiteParser.OPEN_PAR);
					this.state = 1588;
					this.any_name();
					this.state = 1589;
					this.match(SQLiteParser.CLOSE_PAR);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}
}

SQLiteParser.EOF = antlr4.Token.EOF;
SQLiteParser.SCOL = 1;
SQLiteParser.DOT = 2;
SQLiteParser.OPEN_PAR = 3;
SQLiteParser.CLOSE_PAR = 4;
SQLiteParser.COMMA = 5;
SQLiteParser.ASSIGN = 6;
SQLiteParser.STAR = 7;
SQLiteParser.PLUS = 8;
SQLiteParser.MINUS = 9;
SQLiteParser.TILDE = 10;
SQLiteParser.PIPE2 = 11;
SQLiteParser.DIV = 12;
SQLiteParser.MOD = 13;
SQLiteParser.LT2 = 14;
SQLiteParser.GT2 = 15;
SQLiteParser.AMP = 16;
SQLiteParser.PIPE = 17;
SQLiteParser.LT = 18;
SQLiteParser.LT_EQ = 19;
SQLiteParser.GT = 20;
SQLiteParser.GT_EQ = 21;
SQLiteParser.EQ = 22;
SQLiteParser.NOT_EQ1 = 23;
SQLiteParser.NOT_EQ2 = 24;
SQLiteParser.ABORT_ = 25;
SQLiteParser.ACTION_ = 26;
SQLiteParser.ADD_ = 27;
SQLiteParser.AFTER_ = 28;
SQLiteParser.ALL_ = 29;
SQLiteParser.ALTER_ = 30;
SQLiteParser.ANALYZE_ = 31;
SQLiteParser.AND_ = 32;
SQLiteParser.AS_ = 33;
SQLiteParser.ASC_ = 34;
SQLiteParser.ATTACH_ = 35;
SQLiteParser.AUTOINCREMENT_ = 36;
SQLiteParser.BEFORE_ = 37;
SQLiteParser.BEGIN_ = 38;
SQLiteParser.BETWEEN_ = 39;
SQLiteParser.BY_ = 40;
SQLiteParser.CASCADE_ = 41;
SQLiteParser.CASE_ = 42;
SQLiteParser.CAST_ = 43;
SQLiteParser.CHECK_ = 44;
SQLiteParser.COLLATE_ = 45;
SQLiteParser.COLUMN_ = 46;
SQLiteParser.COMMIT_ = 47;
SQLiteParser.CONFLICT_ = 48;
SQLiteParser.CONSTRAINT_ = 49;
SQLiteParser.CREATE_ = 50;
SQLiteParser.CROSS_ = 51;
SQLiteParser.CURRENT_DATE_ = 52;
SQLiteParser.CURRENT_TIME_ = 53;
SQLiteParser.CURRENT_TIMESTAMP_ = 54;
SQLiteParser.DATABASE_ = 55;
SQLiteParser.DEFAULT_ = 56;
SQLiteParser.DEFERRABLE_ = 57;
SQLiteParser.DEFERRED_ = 58;
SQLiteParser.DELETE_ = 59;
SQLiteParser.DESC_ = 60;
SQLiteParser.DETACH_ = 61;
SQLiteParser.DISTINCT_ = 62;
SQLiteParser.DROP_ = 63;
SQLiteParser.EACH_ = 64;
SQLiteParser.ELSE_ = 65;
SQLiteParser.END_ = 66;
SQLiteParser.ESCAPE_ = 67;
SQLiteParser.EXCEPT_ = 68;
SQLiteParser.EXCLUSIVE_ = 69;
SQLiteParser.EXISTS_ = 70;
SQLiteParser.EXPLAIN_ = 71;
SQLiteParser.FAIL_ = 72;
SQLiteParser.FOR_ = 73;
SQLiteParser.FOREIGN_ = 74;
SQLiteParser.FROM_ = 75;
SQLiteParser.FULL_ = 76;
SQLiteParser.GLOB_ = 77;
SQLiteParser.GROUP_ = 78;
SQLiteParser.HAVING_ = 79;
SQLiteParser.IF_ = 80;
SQLiteParser.IGNORE_ = 81;
SQLiteParser.IMMEDIATE_ = 82;
SQLiteParser.IN_ = 83;
SQLiteParser.INDEX_ = 84;
SQLiteParser.INDEXED_ = 85;
SQLiteParser.INITIALLY_ = 86;
SQLiteParser.INNER_ = 87;
SQLiteParser.INSERT_ = 88;
SQLiteParser.INSTEAD_ = 89;
SQLiteParser.INTERSECT_ = 90;
SQLiteParser.INTO_ = 91;
SQLiteParser.IS_ = 92;
SQLiteParser.ISNULL_ = 93;
SQLiteParser.JOIN_ = 94;
SQLiteParser.KEY_ = 95;
SQLiteParser.LEFT_ = 96;
SQLiteParser.LIKE_ = 97;
SQLiteParser.LIMIT_ = 98;
SQLiteParser.MATCH_ = 99;
SQLiteParser.NATURAL_ = 100;
SQLiteParser.NO_ = 101;
SQLiteParser.NOT_ = 102;
SQLiteParser.NOTNULL_ = 103;
SQLiteParser.NULL_ = 104;
SQLiteParser.OF_ = 105;
SQLiteParser.OFFSET_ = 106;
SQLiteParser.ON_ = 107;
SQLiteParser.OR_ = 108;
SQLiteParser.ORDER_ = 109;
SQLiteParser.OUTER_ = 110;
SQLiteParser.PLAN_ = 111;
SQLiteParser.PRAGMA_ = 112;
SQLiteParser.PRIMARY_ = 113;
SQLiteParser.QUERY_ = 114;
SQLiteParser.RAISE_ = 115;
SQLiteParser.RECURSIVE_ = 116;
SQLiteParser.REFERENCES_ = 117;
SQLiteParser.REGEXP_ = 118;
SQLiteParser.REINDEX_ = 119;
SQLiteParser.RELEASE_ = 120;
SQLiteParser.RENAME_ = 121;
SQLiteParser.REPLACE_ = 122;
SQLiteParser.RESTRICT_ = 123;
SQLiteParser.RIGHT_ = 124;
SQLiteParser.ROLLBACK_ = 125;
SQLiteParser.ROW_ = 126;
SQLiteParser.ROWS_ = 127;
SQLiteParser.SAVEPOINT_ = 128;
SQLiteParser.SELECT_ = 129;
SQLiteParser.SET_ = 130;
SQLiteParser.TABLE_ = 131;
SQLiteParser.TEMP_ = 132;
SQLiteParser.TEMPORARY_ = 133;
SQLiteParser.THEN_ = 134;
SQLiteParser.TO_ = 135;
SQLiteParser.TRANSACTION_ = 136;
SQLiteParser.TRIGGER_ = 137;
SQLiteParser.UNION_ = 138;
SQLiteParser.UNIQUE_ = 139;
SQLiteParser.UPDATE_ = 140;
SQLiteParser.USING_ = 141;
SQLiteParser.VACUUM_ = 142;
SQLiteParser.VALUES_ = 143;
SQLiteParser.VIEW_ = 144;
SQLiteParser.VIRTUAL_ = 145;
SQLiteParser.WHEN_ = 146;
SQLiteParser.WHERE_ = 147;
SQLiteParser.WITH_ = 148;
SQLiteParser.WITHOUT_ = 149;
SQLiteParser.FIRST_VALUE_ = 150;
SQLiteParser.OVER_ = 151;
SQLiteParser.PARTITION_ = 152;
SQLiteParser.RANGE_ = 153;
SQLiteParser.PRECEDING_ = 154;
SQLiteParser.UNBOUNDED_ = 155;
SQLiteParser.CURRENT_ = 156;
SQLiteParser.FOLLOWING_ = 157;
SQLiteParser.CUME_DIST_ = 158;
SQLiteParser.DENSE_RANK_ = 159;
SQLiteParser.LAG_ = 160;
SQLiteParser.LAST_VALUE_ = 161;
SQLiteParser.LEAD_ = 162;
SQLiteParser.NTH_VALUE_ = 163;
SQLiteParser.NTILE_ = 164;
SQLiteParser.PERCENT_RANK_ = 165;
SQLiteParser.RANK_ = 166;
SQLiteParser.ROW_NUMBER_ = 167;
SQLiteParser.GENERATED_ = 168;
SQLiteParser.ALWAYS_ = 169;
SQLiteParser.STORED_ = 170;
SQLiteParser.TRUE_ = 171;
SQLiteParser.FALSE_ = 172;
SQLiteParser.WINDOW_ = 173;
SQLiteParser.NULLS_ = 174;
SQLiteParser.FIRST_ = 175;
SQLiteParser.LAST_ = 176;
SQLiteParser.FILTER_ = 177;
SQLiteParser.GROUPS_ = 178;
SQLiteParser.EXCLUDE_ = 179;
SQLiteParser.TIES_ = 180;
SQLiteParser.OTHERS_ = 181;
SQLiteParser.DO_ = 182;
SQLiteParser.NOTHING_ = 183;
SQLiteParser.IDENTIFIER = 184;
SQLiteParser.NUMERIC_LITERAL = 185;
SQLiteParser.BIND_PARAMETER = 186;
SQLiteParser.STRING_LITERAL = 187;
SQLiteParser.BLOB_LITERAL = 188;
SQLiteParser.SINGLE_LINE_COMMENT = 189;
SQLiteParser.MULTILINE_COMMENT = 190;
SQLiteParser.SPACES = 191;
SQLiteParser.UNEXPECTED_CHAR = 192;

SQLiteParser.RULE_parse = 0;
SQLiteParser.RULE_sql_stmt_list = 1;
SQLiteParser.RULE_sql_stmt = 2;
SQLiteParser.RULE_indexed_column = 3;
SQLiteParser.RULE_column_def = 4;
SQLiteParser.RULE_type_name = 5;
SQLiteParser.RULE_column_constraint = 6;
SQLiteParser.RULE_signed_number = 7;
SQLiteParser.RULE_table_constraint = 8;
SQLiteParser.RULE_foreign_key_clause = 9;
SQLiteParser.RULE_conflict_clause = 10;
SQLiteParser.RULE_with_clause = 11;
SQLiteParser.RULE_cte_table_name = 12;
SQLiteParser.RULE_recursive_cte = 13;
SQLiteParser.RULE_common_table_expression = 14;
SQLiteParser.RULE_delete_stmt = 15;
SQLiteParser.RULE_expr = 16;
SQLiteParser.RULE_raise_function = 17;
SQLiteParser.RULE_literal_value = 18;
SQLiteParser.RULE_insert_stmt = 19;
SQLiteParser.RULE_upsert_clause = 20;
SQLiteParser.RULE_pragma_value = 21;
SQLiteParser.RULE_select_stmt = 22;
SQLiteParser.RULE_join_clause = 23;
SQLiteParser.RULE_select_core = 24;
SQLiteParser.RULE_factored_select_stmt = 25;
SQLiteParser.RULE_simple_select_stmt = 26;
SQLiteParser.RULE_compound_select_stmt = 27;
SQLiteParser.RULE_table_or_subquery = 28;
SQLiteParser.RULE_result_column = 29;
SQLiteParser.RULE_join_operator = 30;
SQLiteParser.RULE_join_constraint = 31;
SQLiteParser.RULE_compound_operator = 32;
SQLiteParser.RULE_update_stmt = 33;
SQLiteParser.RULE_column_name_list = 34;
SQLiteParser.RULE_qualified_table_name = 35;
SQLiteParser.RULE_filter_clause = 36;
SQLiteParser.RULE_window_defn = 37;
SQLiteParser.RULE_over_clause = 38;
SQLiteParser.RULE_frame_spec = 39;
SQLiteParser.RULE_frame_clause = 40;
SQLiteParser.RULE_simple_function_invocation = 41;
SQLiteParser.RULE_aggregate_function_invocation = 42;
SQLiteParser.RULE_window_function_invocation = 43;
SQLiteParser.RULE_common_table_stmt = 44;
SQLiteParser.RULE_order_by_stmt = 45;
SQLiteParser.RULE_limit_stmt = 46;
SQLiteParser.RULE_ordering_term = 47;
SQLiteParser.RULE_asc_desc = 48;
SQLiteParser.RULE_frame_left = 49;
SQLiteParser.RULE_frame_right = 50;
SQLiteParser.RULE_frame_single = 51;
SQLiteParser.RULE_window_function = 52;
SQLiteParser.RULE_of_OF_fset = 53;
SQLiteParser.RULE_default_DEFAULT__value = 54;
SQLiteParser.RULE_partition_by = 55;
SQLiteParser.RULE_order_by_expr = 56;
SQLiteParser.RULE_order_by_expr_asc_desc = 57;
SQLiteParser.RULE_expr_asc_desc = 58;
SQLiteParser.RULE_initial_select = 59;
SQLiteParser.RULE_recursive__select = 60;
SQLiteParser.RULE_unary_operator = 61;
SQLiteParser.RULE_error_message = 62;
SQLiteParser.RULE_module_argument = 63;
SQLiteParser.RULE_column_alias = 64;
SQLiteParser.RULE_keyword = 65;
SQLiteParser.RULE_name = 66;
SQLiteParser.RULE_function_name = 67;
SQLiteParser.RULE_schema_name = 68;
SQLiteParser.RULE_table_name = 69;
SQLiteParser.RULE_table_or_index_name = 70;
SQLiteParser.RULE_new_table_name = 71;
SQLiteParser.RULE_column_name = 72;
SQLiteParser.RULE_collation_name = 73;
SQLiteParser.RULE_foreign_table = 74;
SQLiteParser.RULE_index_name = 75;
SQLiteParser.RULE_trigger_name = 76;
SQLiteParser.RULE_view_name = 77;
SQLiteParser.RULE_module_name = 78;
SQLiteParser.RULE_pragma_name = 79;
SQLiteParser.RULE_savepoint_name = 80;
SQLiteParser.RULE_table_alias = 81;
SQLiteParser.RULE_transaction_name = 82;
SQLiteParser.RULE_window_name = 83;
SQLiteParser.RULE_alias = 84;
SQLiteParser.RULE_filename = 85;
SQLiteParser.RULE_base_window_name = 86;
SQLiteParser.RULE_simple_func = 87;
SQLiteParser.RULE_aggregate_func = 88;
SQLiteParser.RULE_table_function_name = 89;
SQLiteParser.RULE_any_name = 90;

class ParseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_parse;
	}

	EOF() {
		return this.getToken(SQLiteParser.EOF, 0);
	}

	sql_stmt_list = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Sql_stmt_listContext);
		} else {
			return this.getTypedRuleContext(Sql_stmt_listContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterParse(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitParse(this);
		}
	}
}

class Sql_stmt_listContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_sql_stmt_list;
	}

	sql_stmt = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Sql_stmtContext);
		} else {
			return this.getTypedRuleContext(Sql_stmtContext, i);
		}
	};

	SCOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.SCOL);
		} else {
			return this.getToken(SQLiteParser.SCOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSql_stmt_list(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSql_stmt_list(this);
		}
	}
}

class Sql_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_sql_stmt;
	}

	delete_stmt() {
		return this.getTypedRuleContext(Delete_stmtContext, 0);
	}

	insert_stmt() {
		return this.getTypedRuleContext(Insert_stmtContext, 0);
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	update_stmt() {
		return this.getTypedRuleContext(Update_stmtContext, 0);
	}

	EXPLAIN_() {
		return this.getToken(SQLiteParser.EXPLAIN_, 0);
	}

	QUERY_() {
		return this.getToken(SQLiteParser.QUERY_, 0);
	}

	PLAN_() {
		return this.getToken(SQLiteParser.PLAN_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSql_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSql_stmt(this);
		}
	}
}

class Indexed_columnContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_indexed_column;
	}

	column_name() {
		return this.getTypedRuleContext(Column_nameContext, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	COLLATE_() {
		return this.getToken(SQLiteParser.COLLATE_, 0);
	}

	collation_name() {
		return this.getTypedRuleContext(Collation_nameContext, 0);
	}

	asc_desc() {
		return this.getTypedRuleContext(Asc_descContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterIndexed_column(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitIndexed_column(this);
		}
	}
}

class Column_defContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_column_def;
	}

	column_name() {
		return this.getTypedRuleContext(Column_nameContext, 0);
	}

	type_name() {
		return this.getTypedRuleContext(Type_nameContext, 0);
	}

	column_constraint = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_constraintContext);
		} else {
			return this.getTypedRuleContext(Column_constraintContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterColumn_def(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitColumn_def(this);
		}
	}
}

class Type_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_type_name;
	}

	name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(NameContext);
		} else {
			return this.getTypedRuleContext(NameContext, i);
		}
	};

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	signed_number = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Signed_numberContext);
		} else {
			return this.getTypedRuleContext(Signed_numberContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterType_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitType_name(this);
		}
	}
}

class Column_constraintContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_column_constraint;
	}

	CHECK_() {
		return this.getToken(SQLiteParser.CHECK_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	DEFAULT_() {
		return this.getToken(SQLiteParser.DEFAULT_, 0);
	}

	COLLATE_() {
		return this.getToken(SQLiteParser.COLLATE_, 0);
	}

	collation_name() {
		return this.getTypedRuleContext(Collation_nameContext, 0);
	}

	foreign_key_clause() {
		return this.getTypedRuleContext(Foreign_key_clauseContext, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	CONSTRAINT_() {
		return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	}

	name() {
		return this.getTypedRuleContext(NameContext, 0);
	}

	PRIMARY_() {
		return this.getToken(SQLiteParser.PRIMARY_, 0);
	}

	KEY_() {
		return this.getToken(SQLiteParser.KEY_, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	NULL_() {
		return this.getToken(SQLiteParser.NULL_, 0);
	}

	UNIQUE_() {
		return this.getToken(SQLiteParser.UNIQUE_, 0);
	}

	signed_number() {
		return this.getTypedRuleContext(Signed_numberContext, 0);
	}

	literal_value() {
		return this.getTypedRuleContext(Literal_valueContext, 0);
	}

	conflict_clause() {
		return this.getTypedRuleContext(Conflict_clauseContext, 0);
	}

	GENERATED_() {
		return this.getToken(SQLiteParser.GENERATED_, 0);
	}

	ALWAYS_() {
		return this.getToken(SQLiteParser.ALWAYS_, 0);
	}

	STORED_() {
		return this.getToken(SQLiteParser.STORED_, 0);
	}

	VIRTUAL_() {
		return this.getToken(SQLiteParser.VIRTUAL_, 0);
	}

	asc_desc() {
		return this.getTypedRuleContext(Asc_descContext, 0);
	}

	AUTOINCREMENT_() {
		return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterColumn_constraint(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitColumn_constraint(this);
		}
	}
}

class Signed_numberContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_signed_number;
	}

	NUMERIC_LITERAL() {
		return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
	}

	PLUS() {
		return this.getToken(SQLiteParser.PLUS, 0);
	}

	MINUS() {
		return this.getToken(SQLiteParser.MINUS, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSigned_number(this);
		}
	}
}

class Table_constraintContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_constraint;
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	indexed_column = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Indexed_columnContext);
		} else {
			return this.getTypedRuleContext(Indexed_columnContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	CHECK_() {
		return this.getToken(SQLiteParser.CHECK_, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	FOREIGN_() {
		return this.getToken(SQLiteParser.FOREIGN_, 0);
	}

	KEY_() {
		return this.getToken(SQLiteParser.KEY_, 0);
	}

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	foreign_key_clause() {
		return this.getTypedRuleContext(Foreign_key_clauseContext, 0);
	}

	CONSTRAINT_() {
		return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	}

	name() {
		return this.getTypedRuleContext(NameContext, 0);
	}

	PRIMARY_() {
		return this.getToken(SQLiteParser.PRIMARY_, 0);
	}

	UNIQUE_() {
		return this.getToken(SQLiteParser.UNIQUE_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	conflict_clause() {
		return this.getTypedRuleContext(Conflict_clauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_constraint(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_constraint(this);
		}
	}
}

class Foreign_key_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_foreign_key_clause;
	}

	REFERENCES_() {
		return this.getToken(SQLiteParser.REFERENCES_, 0);
	}

	foreign_table() {
		return this.getTypedRuleContext(Foreign_tableContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	ON_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.ON_);
		} else {
			return this.getToken(SQLiteParser.ON_, i);
		}
	};

	MATCH_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.MATCH_);
		} else {
			return this.getToken(SQLiteParser.MATCH_, i);
		}
	};

	name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(NameContext);
		} else {
			return this.getTypedRuleContext(NameContext, i);
		}
	};

	DEFERRABLE_() {
		return this.getToken(SQLiteParser.DEFERRABLE_, 0);
	}

	DELETE_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.DELETE_);
		} else {
			return this.getToken(SQLiteParser.DELETE_, i);
		}
	};

	UPDATE_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.UPDATE_);
		} else {
			return this.getToken(SQLiteParser.UPDATE_, i);
		}
	};

	SET_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.SET_);
		} else {
			return this.getToken(SQLiteParser.SET_, i);
		}
	};

	CASCADE_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CASCADE_);
		} else {
			return this.getToken(SQLiteParser.CASCADE_, i);
		}
	};

	RESTRICT_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.RESTRICT_);
		} else {
			return this.getToken(SQLiteParser.RESTRICT_, i);
		}
	};

	NO_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.NO_);
		} else {
			return this.getToken(SQLiteParser.NO_, i);
		}
	};

	ACTION_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.ACTION_);
		} else {
			return this.getToken(SQLiteParser.ACTION_, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	NULL_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.NULL_);
		} else {
			return this.getToken(SQLiteParser.NULL_, i);
		}
	};

	DEFAULT_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.DEFAULT_);
		} else {
			return this.getToken(SQLiteParser.DEFAULT_, i);
		}
	};

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	INITIALLY_() {
		return this.getToken(SQLiteParser.INITIALLY_, 0);
	}

	DEFERRED_() {
		return this.getToken(SQLiteParser.DEFERRED_, 0);
	}

	IMMEDIATE_() {
		return this.getToken(SQLiteParser.IMMEDIATE_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterForeign_key_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitForeign_key_clause(this);
		}
	}
}

class Conflict_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_conflict_clause;
	}

	ON_() {
		return this.getToken(SQLiteParser.ON_, 0);
	}

	CONFLICT_() {
		return this.getToken(SQLiteParser.CONFLICT_, 0);
	}

	ROLLBACK_() {
		return this.getToken(SQLiteParser.ROLLBACK_, 0);
	}

	ABORT_() {
		return this.getToken(SQLiteParser.ABORT_, 0);
	}

	FAIL_() {
		return this.getToken(SQLiteParser.FAIL_, 0);
	}

	IGNORE_() {
		return this.getToken(SQLiteParser.IGNORE_, 0);
	}

	REPLACE_() {
		return this.getToken(SQLiteParser.REPLACE_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterConflict_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitConflict_clause(this);
		}
	}
}

class With_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_with_clause;
	}

	WITH_() {
		return this.getToken(SQLiteParser.WITH_, 0);
	}

	cte_table_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Cte_table_nameContext);
		} else {
			return this.getTypedRuleContext(Cte_table_nameContext, i);
		}
	};

	AS_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.AS_);
		} else {
			return this.getToken(SQLiteParser.AS_, i);
		}
	};

	OPEN_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.OPEN_PAR);
		} else {
			return this.getToken(SQLiteParser.OPEN_PAR, i);
		}
	};

	select_stmt = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Select_stmtContext);
		} else {
			return this.getTypedRuleContext(Select_stmtContext, i);
		}
	};

	CLOSE_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CLOSE_PAR);
		} else {
			return this.getToken(SQLiteParser.CLOSE_PAR, i);
		}
	};

	RECURSIVE_() {
		return this.getToken(SQLiteParser.RECURSIVE_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterWith_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitWith_clause(this);
		}
	}
}

class Cte_table_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_cte_table_name;
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCte_table_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCte_table_name(this);
		}
	}
}

class Recursive_cteContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_recursive_cte;
	}

	cte_table_name() {
		return this.getTypedRuleContext(Cte_table_nameContext, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	initial_select() {
		return this.getTypedRuleContext(Initial_selectContext, 0);
	}

	UNION_() {
		return this.getToken(SQLiteParser.UNION_, 0);
	}

	recursive__select() {
		return this.getTypedRuleContext(Recursive__selectContext, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	ALL_() {
		return this.getToken(SQLiteParser.ALL_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterRecursive_cte(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitRecursive_cte(this);
		}
	}
}

class Common_table_expressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_common_table_expression;
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	OPEN_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.OPEN_PAR);
		} else {
			return this.getToken(SQLiteParser.OPEN_PAR, i);
		}
	};

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	CLOSE_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CLOSE_PAR);
		} else {
			return this.getToken(SQLiteParser.CLOSE_PAR, i);
		}
	};

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCommon_table_expression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCommon_table_expression(this);
		}
	}
}

class Delete_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_delete_stmt;
	}

	DELETE_() {
		return this.getToken(SQLiteParser.DELETE_, 0);
	}

	FROM_() {
		return this.getToken(SQLiteParser.FROM_, 0);
	}

	qualified_table_name() {
		return this.getTypedRuleContext(Qualified_table_nameContext, 0);
	}

	with_clause() {
		return this.getTypedRuleContext(With_clauseContext, 0);
	}

	WHERE_() {
		return this.getToken(SQLiteParser.WHERE_, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterDelete_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitDelete_stmt(this);
		}
	}
}

class ExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_expr;
	}

	literal_value() {
		return this.getTypedRuleContext(Literal_valueContext, 0);
	}

	BIND_PARAMETER() {
		return this.getToken(SQLiteParser.BIND_PARAMETER, 0);
	}

	column_name() {
		return this.getTypedRuleContext(Column_nameContext, 0);
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	DOT = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.DOT);
		} else {
			return this.getToken(SQLiteParser.DOT, i);
		}
	};

	schema_name() {
		return this.getTypedRuleContext(Schema_nameContext, 0);
	}

	unary_operator() {
		return this.getTypedRuleContext(Unary_operatorContext, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	function_name() {
		return this.getTypedRuleContext(Function_nameContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	STAR() {
		return this.getToken(SQLiteParser.STAR, 0);
	}

	filter_clause() {
		return this.getTypedRuleContext(Filter_clauseContext, 0);
	}

	over_clause() {
		return this.getTypedRuleContext(Over_clauseContext, 0);
	}

	DISTINCT_() {
		return this.getToken(SQLiteParser.DISTINCT_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	CAST_() {
		return this.getToken(SQLiteParser.CAST_, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	type_name() {
		return this.getTypedRuleContext(Type_nameContext, 0);
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	EXISTS_() {
		return this.getToken(SQLiteParser.EXISTS_, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	CASE_() {
		return this.getToken(SQLiteParser.CASE_, 0);
	}

	END_() {
		return this.getToken(SQLiteParser.END_, 0);
	}

	WHEN_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.WHEN_);
		} else {
			return this.getToken(SQLiteParser.WHEN_, i);
		}
	};

	THEN_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.THEN_);
		} else {
			return this.getToken(SQLiteParser.THEN_, i);
		}
	};

	ELSE_() {
		return this.getToken(SQLiteParser.ELSE_, 0);
	}

	raise_function() {
		return this.getTypedRuleContext(Raise_functionContext, 0);
	}

	PIPE2() {
		return this.getToken(SQLiteParser.PIPE2, 0);
	}

	DIV() {
		return this.getToken(SQLiteParser.DIV, 0);
	}

	MOD() {
		return this.getToken(SQLiteParser.MOD, 0);
	}

	PLUS() {
		return this.getToken(SQLiteParser.PLUS, 0);
	}

	MINUS() {
		return this.getToken(SQLiteParser.MINUS, 0);
	}

	LT2() {
		return this.getToken(SQLiteParser.LT2, 0);
	}

	GT2() {
		return this.getToken(SQLiteParser.GT2, 0);
	}

	AMP() {
		return this.getToken(SQLiteParser.AMP, 0);
	}

	PIPE() {
		return this.getToken(SQLiteParser.PIPE, 0);
	}

	LT() {
		return this.getToken(SQLiteParser.LT, 0);
	}

	LT_EQ() {
		return this.getToken(SQLiteParser.LT_EQ, 0);
	}

	GT() {
		return this.getToken(SQLiteParser.GT, 0);
	}

	GT_EQ() {
		return this.getToken(SQLiteParser.GT_EQ, 0);
	}

	ASSIGN() {
		return this.getToken(SQLiteParser.ASSIGN, 0);
	}

	EQ() {
		return this.getToken(SQLiteParser.EQ, 0);
	}

	NOT_EQ1() {
		return this.getToken(SQLiteParser.NOT_EQ1, 0);
	}

	NOT_EQ2() {
		return this.getToken(SQLiteParser.NOT_EQ2, 0);
	}

	IS_() {
		return this.getToken(SQLiteParser.IS_, 0);
	}

	IN_() {
		return this.getToken(SQLiteParser.IN_, 0);
	}

	LIKE_() {
		return this.getToken(SQLiteParser.LIKE_, 0);
	}

	GLOB_() {
		return this.getToken(SQLiteParser.GLOB_, 0);
	}

	MATCH_() {
		return this.getToken(SQLiteParser.MATCH_, 0);
	}

	REGEXP_() {
		return this.getToken(SQLiteParser.REGEXP_, 0);
	}

	AND_() {
		return this.getToken(SQLiteParser.AND_, 0);
	}

	OR_() {
		return this.getToken(SQLiteParser.OR_, 0);
	}

	BETWEEN_() {
		return this.getToken(SQLiteParser.BETWEEN_, 0);
	}

	COLLATE_() {
		return this.getToken(SQLiteParser.COLLATE_, 0);
	}

	collation_name() {
		return this.getTypedRuleContext(Collation_nameContext, 0);
	}

	ESCAPE_() {
		return this.getToken(SQLiteParser.ESCAPE_, 0);
	}

	ISNULL_() {
		return this.getToken(SQLiteParser.ISNULL_, 0);
	}

	NOTNULL_() {
		return this.getToken(SQLiteParser.NOTNULL_, 0);
	}

	NULL_() {
		return this.getToken(SQLiteParser.NULL_, 0);
	}

	table_function_name() {
		return this.getTypedRuleContext(Table_function_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitExpr(this);
		}
	}
}

class Raise_functionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_raise_function;
	}

	RAISE_() {
		return this.getToken(SQLiteParser.RAISE_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	IGNORE_() {
		return this.getToken(SQLiteParser.IGNORE_, 0);
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	error_message() {
		return this.getTypedRuleContext(Error_messageContext, 0);
	}

	ROLLBACK_() {
		return this.getToken(SQLiteParser.ROLLBACK_, 0);
	}

	ABORT_() {
		return this.getToken(SQLiteParser.ABORT_, 0);
	}

	FAIL_() {
		return this.getToken(SQLiteParser.FAIL_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterRaise_function(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitRaise_function(this);
		}
	}
}

class Literal_valueContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_literal_value;
	}

	NUMERIC_LITERAL() {
		return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
	}

	STRING_LITERAL() {
		return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	}

	BLOB_LITERAL() {
		return this.getToken(SQLiteParser.BLOB_LITERAL, 0);
	}

	NULL_() {
		return this.getToken(SQLiteParser.NULL_, 0);
	}

	TRUE_() {
		return this.getToken(SQLiteParser.TRUE_, 0);
	}

	FALSE_() {
		return this.getToken(SQLiteParser.FALSE_, 0);
	}

	CURRENT_TIME_() {
		return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
	}

	CURRENT_DATE_() {
		return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
	}

	CURRENT_TIMESTAMP_() {
		return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterLiteral_value(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitLiteral_value(this);
		}
	}
}

class Insert_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_insert_stmt;
	}

	INTO_() {
		return this.getToken(SQLiteParser.INTO_, 0);
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	INSERT_() {
		return this.getToken(SQLiteParser.INSERT_, 0);
	}

	REPLACE_() {
		return this.getToken(SQLiteParser.REPLACE_, 0);
	}

	OR_() {
		return this.getToken(SQLiteParser.OR_, 0);
	}

	with_clause() {
		return this.getTypedRuleContext(With_clauseContext, 0);
	}

	ROLLBACK_() {
		return this.getToken(SQLiteParser.ROLLBACK_, 0);
	}

	ABORT_() {
		return this.getToken(SQLiteParser.ABORT_, 0);
	}

	FAIL_() {
		return this.getToken(SQLiteParser.FAIL_, 0);
	}

	IGNORE_() {
		return this.getToken(SQLiteParser.IGNORE_, 0);
	}

	schema_name() {
		return this.getTypedRuleContext(Schema_nameContext, 0);
	}

	DOT() {
		return this.getToken(SQLiteParser.DOT, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	table_alias() {
		return this.getTypedRuleContext(Table_aliasContext, 0);
	}

	OPEN_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.OPEN_PAR);
		} else {
			return this.getToken(SQLiteParser.OPEN_PAR, i);
		}
	};

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	CLOSE_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CLOSE_PAR);
		} else {
			return this.getToken(SQLiteParser.CLOSE_PAR, i);
		}
	};

	VALUES_() {
		return this.getToken(SQLiteParser.VALUES_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	upsert_clause() {
		return this.getTypedRuleContext(Upsert_clauseContext, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	DEFAULT_() {
		return this.getToken(SQLiteParser.DEFAULT_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterInsert_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitInsert_stmt(this);
		}
	}
}

class Upsert_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_upsert_clause;
	}

	ON_() {
		return this.getToken(SQLiteParser.ON_, 0);
	}

	CONFLICT_() {
		return this.getToken(SQLiteParser.CONFLICT_, 0);
	}

	DO_() {
		return this.getToken(SQLiteParser.DO_, 0);
	}

	NOTHING_() {
		return this.getToken(SQLiteParser.NOTHING_, 0);
	}

	UPDATE_() {
		return this.getToken(SQLiteParser.UPDATE_, 0);
	}

	SET_() {
		return this.getToken(SQLiteParser.SET_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	indexed_column = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Indexed_columnContext);
		} else {
			return this.getTypedRuleContext(Indexed_columnContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	EQ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.EQ);
		} else {
			return this.getToken(SQLiteParser.EQ, i);
		}
	};

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	WHERE_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.WHERE_);
		} else {
			return this.getToken(SQLiteParser.WHERE_, i);
		}
	};

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	column_name_list = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_name_listContext);
		} else {
			return this.getTypedRuleContext(Column_name_listContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterUpsert_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitUpsert_clause(this);
		}
	}
}

class Pragma_valueContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_pragma_value;
	}

	signed_number() {
		return this.getTypedRuleContext(Signed_numberContext, 0);
	}

	name() {
		return this.getTypedRuleContext(NameContext, 0);
	}

	STRING_LITERAL() {
		return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterPragma_value(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitPragma_value(this);
		}
	}
}

class Select_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_select_stmt;
	}

	select_core = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Select_coreContext);
		} else {
			return this.getTypedRuleContext(Select_coreContext, i);
		}
	};

	common_table_stmt() {
		return this.getTypedRuleContext(Common_table_stmtContext, 0);
	}

	compound_operator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Compound_operatorContext);
		} else {
			return this.getTypedRuleContext(Compound_operatorContext, i);
		}
	};

	order_by_stmt() {
		return this.getTypedRuleContext(Order_by_stmtContext, 0);
	}

	limit_stmt() {
		return this.getTypedRuleContext(Limit_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSelect_stmt(this);
		}
	}
}

class Join_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_join_clause;
	}

	table_or_subquery = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Table_or_subqueryContext);
		} else {
			return this.getTypedRuleContext(Table_or_subqueryContext, i);
		}
	};

	join_operator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Join_operatorContext);
		} else {
			return this.getTypedRuleContext(Join_operatorContext, i);
		}
	};

	join_constraint = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Join_constraintContext);
		} else {
			return this.getTypedRuleContext(Join_constraintContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterJoin_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitJoin_clause(this);
		}
	}
}

class Select_coreContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_select_core;
	}

	SELECT_() {
		return this.getToken(SQLiteParser.SELECT_, 0);
	}

	result_column = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Result_columnContext);
		} else {
			return this.getTypedRuleContext(Result_columnContext, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	FROM_() {
		return this.getToken(SQLiteParser.FROM_, 0);
	}

	WHERE_() {
		return this.getToken(SQLiteParser.WHERE_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	GROUP_() {
		return this.getToken(SQLiteParser.GROUP_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	WINDOW_() {
		return this.getToken(SQLiteParser.WINDOW_, 0);
	}

	window_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Window_nameContext);
		} else {
			return this.getTypedRuleContext(Window_nameContext, i);
		}
	};

	AS_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.AS_);
		} else {
			return this.getToken(SQLiteParser.AS_, i);
		}
	};

	window_defn = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Window_defnContext);
		} else {
			return this.getTypedRuleContext(Window_defnContext, i);
		}
	};

	DISTINCT_() {
		return this.getToken(SQLiteParser.DISTINCT_, 0);
	}

	ALL_() {
		return this.getToken(SQLiteParser.ALL_, 0);
	}

	table_or_subquery = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Table_or_subqueryContext);
		} else {
			return this.getTypedRuleContext(Table_or_subqueryContext, i);
		}
	};

	join_clause() {
		return this.getTypedRuleContext(Join_clauseContext, 0);
	}

	HAVING_() {
		return this.getToken(SQLiteParser.HAVING_, 0);
	}

	VALUES_() {
		return this.getToken(SQLiteParser.VALUES_, 0);
	}

	OPEN_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.OPEN_PAR);
		} else {
			return this.getToken(SQLiteParser.OPEN_PAR, i);
		}
	};

	CLOSE_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CLOSE_PAR);
		} else {
			return this.getToken(SQLiteParser.CLOSE_PAR, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSelect_core(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSelect_core(this);
		}
	}
}

class Factored_select_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_factored_select_stmt;
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFactored_select_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFactored_select_stmt(this);
		}
	}
}

class Simple_select_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_simple_select_stmt;
	}

	select_core() {
		return this.getTypedRuleContext(Select_coreContext, 0);
	}

	common_table_stmt() {
		return this.getTypedRuleContext(Common_table_stmtContext, 0);
	}

	order_by_stmt() {
		return this.getTypedRuleContext(Order_by_stmtContext, 0);
	}

	limit_stmt() {
		return this.getTypedRuleContext(Limit_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSimple_select_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSimple_select_stmt(this);
		}
	}
}

class Compound_select_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_compound_select_stmt;
	}

	select_core = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Select_coreContext);
		} else {
			return this.getTypedRuleContext(Select_coreContext, i);
		}
	};

	common_table_stmt() {
		return this.getTypedRuleContext(Common_table_stmtContext, 0);
	}

	order_by_stmt() {
		return this.getTypedRuleContext(Order_by_stmtContext, 0);
	}

	limit_stmt() {
		return this.getTypedRuleContext(Limit_stmtContext, 0);
	}

	UNION_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.UNION_);
		} else {
			return this.getToken(SQLiteParser.UNION_, i);
		}
	};

	INTERSECT_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.INTERSECT_);
		} else {
			return this.getToken(SQLiteParser.INTERSECT_, i);
		}
	};

	EXCEPT_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.EXCEPT_);
		} else {
			return this.getToken(SQLiteParser.EXCEPT_, i);
		}
	};

	ALL_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.ALL_);
		} else {
			return this.getToken(SQLiteParser.ALL_, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCompound_select_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCompound_select_stmt(this);
		}
	}
}

class Table_or_subqueryContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_or_subquery;
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	schema_name() {
		return this.getTypedRuleContext(Schema_nameContext, 0);
	}

	DOT() {
		return this.getToken(SQLiteParser.DOT, 0);
	}

	table_alias() {
		return this.getTypedRuleContext(Table_aliasContext, 0);
	}

	INDEXED_() {
		return this.getToken(SQLiteParser.INDEXED_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	index_name() {
		return this.getTypedRuleContext(Index_nameContext, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	table_function_name() {
		return this.getTypedRuleContext(Table_function_nameContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	table_or_subquery = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Table_or_subqueryContext);
		} else {
			return this.getTypedRuleContext(Table_or_subqueryContext, i);
		}
	};

	join_clause() {
		return this.getTypedRuleContext(Join_clauseContext, 0);
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_or_subquery(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_or_subquery(this);
		}
	}
}

class Result_columnContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_result_column;
	}

	STAR() {
		return this.getToken(SQLiteParser.STAR, 0);
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	DOT() {
		return this.getToken(SQLiteParser.DOT, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	column_alias() {
		return this.getTypedRuleContext(Column_aliasContext, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterResult_column(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitResult_column(this);
		}
	}
}

class Join_operatorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_join_operator;
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	JOIN_() {
		return this.getToken(SQLiteParser.JOIN_, 0);
	}

	NATURAL_() {
		return this.getToken(SQLiteParser.NATURAL_, 0);
	}

	LEFT_() {
		return this.getToken(SQLiteParser.LEFT_, 0);
	}

	INNER_() {
		return this.getToken(SQLiteParser.INNER_, 0);
	}

	CROSS_() {
		return this.getToken(SQLiteParser.CROSS_, 0);
	}

	OUTER_() {
		return this.getToken(SQLiteParser.OUTER_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterJoin_operator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitJoin_operator(this);
		}
	}
}

class Join_constraintContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_join_constraint;
	}

	ON_() {
		return this.getToken(SQLiteParser.ON_, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	USING_() {
		return this.getToken(SQLiteParser.USING_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterJoin_constraint(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitJoin_constraint(this);
		}
	}
}

class Compound_operatorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_compound_operator;
	}

	UNION_() {
		return this.getToken(SQLiteParser.UNION_, 0);
	}

	ALL_() {
		return this.getToken(SQLiteParser.ALL_, 0);
	}

	INTERSECT_() {
		return this.getToken(SQLiteParser.INTERSECT_, 0);
	}

	EXCEPT_() {
		return this.getToken(SQLiteParser.EXCEPT_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCompound_operator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCompound_operator(this);
		}
	}
}

class Update_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_update_stmt;
	}

	UPDATE_() {
		return this.getToken(SQLiteParser.UPDATE_, 0);
	}

	qualified_table_name() {
		return this.getTypedRuleContext(Qualified_table_nameContext, 0);
	}

	SET_() {
		return this.getToken(SQLiteParser.SET_, 0);
	}

	ASSIGN = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.ASSIGN);
		} else {
			return this.getToken(SQLiteParser.ASSIGN, i);
		}
	};

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	column_name_list = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_name_listContext);
		} else {
			return this.getTypedRuleContext(Column_name_listContext, i);
		}
	};

	with_clause() {
		return this.getTypedRuleContext(With_clauseContext, 0);
	}

	OR_() {
		return this.getToken(SQLiteParser.OR_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	WHERE_() {
		return this.getToken(SQLiteParser.WHERE_, 0);
	}

	ROLLBACK_() {
		return this.getToken(SQLiteParser.ROLLBACK_, 0);
	}

	ABORT_() {
		return this.getToken(SQLiteParser.ABORT_, 0);
	}

	REPLACE_() {
		return this.getToken(SQLiteParser.REPLACE_, 0);
	}

	FAIL_() {
		return this.getToken(SQLiteParser.FAIL_, 0);
	}

	IGNORE_() {
		return this.getToken(SQLiteParser.IGNORE_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterUpdate_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitUpdate_stmt(this);
		}
	}
}

class Column_name_listContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_column_name_list;
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	column_name = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Column_nameContext);
		} else {
			return this.getTypedRuleContext(Column_nameContext, i);
		}
	};

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterColumn_name_list(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitColumn_name_list(this);
		}
	}
}

class Qualified_table_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_qualified_table_name;
	}

	table_name() {
		return this.getTypedRuleContext(Table_nameContext, 0);
	}

	schema_name() {
		return this.getTypedRuleContext(Schema_nameContext, 0);
	}

	DOT() {
		return this.getToken(SQLiteParser.DOT, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	alias() {
		return this.getTypedRuleContext(AliasContext, 0);
	}

	INDEXED_() {
		return this.getToken(SQLiteParser.INDEXED_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	index_name() {
		return this.getTypedRuleContext(Index_nameContext, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterQualified_table_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitQualified_table_name(this);
		}
	}
}

class Filter_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_filter_clause;
	}

	FILTER_() {
		return this.getToken(SQLiteParser.FILTER_, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	WHERE_() {
		return this.getToken(SQLiteParser.WHERE_, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFilter_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFilter_clause(this);
		}
	}
}

class Window_defnContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_window_defn;
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	BY_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.BY_);
		} else {
			return this.getToken(SQLiteParser.BY_, i);
		}
	};

	ordering_term = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Ordering_termContext);
		} else {
			return this.getTypedRuleContext(Ordering_termContext, i);
		}
	};

	base_window_name() {
		return this.getTypedRuleContext(Base_window_nameContext, 0);
	}

	PARTITION_() {
		return this.getToken(SQLiteParser.PARTITION_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	frame_spec() {
		return this.getTypedRuleContext(Frame_specContext, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterWindow_defn(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitWindow_defn(this);
		}
	}
}

class Over_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_over_clause;
	}

	OVER_() {
		return this.getToken(SQLiteParser.OVER_, 0);
	}

	window_name() {
		return this.getTypedRuleContext(Window_nameContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	base_window_name() {
		return this.getTypedRuleContext(Base_window_nameContext, 0);
	}

	PARTITION_() {
		return this.getToken(SQLiteParser.PARTITION_, 0);
	}

	BY_ = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.BY_);
		} else {
			return this.getToken(SQLiteParser.BY_, i);
		}
	};

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	ordering_term = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Ordering_termContext);
		} else {
			return this.getTypedRuleContext(Ordering_termContext, i);
		}
	};

	frame_spec() {
		return this.getTypedRuleContext(Frame_specContext, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOver_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOver_clause(this);
		}
	}
}

class Frame_specContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_frame_spec;
	}

	frame_clause() {
		return this.getTypedRuleContext(Frame_clauseContext, 0);
	}

	EXCLUDE_() {
		return this.getToken(SQLiteParser.EXCLUDE_, 0);
	}

	CURRENT_() {
		return this.getToken(SQLiteParser.CURRENT_, 0);
	}

	ROW_() {
		return this.getToken(SQLiteParser.ROW_, 0);
	}

	GROUP_() {
		return this.getToken(SQLiteParser.GROUP_, 0);
	}

	TIES_() {
		return this.getToken(SQLiteParser.TIES_, 0);
	}

	NO_() {
		return this.getToken(SQLiteParser.NO_, 0);
	}

	OTHERS_() {
		return this.getToken(SQLiteParser.OTHERS_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFrame_spec(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFrame_spec(this);
		}
	}
}

class Frame_clauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_frame_clause;
	}

	RANGE_() {
		return this.getToken(SQLiteParser.RANGE_, 0);
	}

	ROWS_() {
		return this.getToken(SQLiteParser.ROWS_, 0);
	}

	GROUPS_() {
		return this.getToken(SQLiteParser.GROUPS_, 0);
	}

	frame_single() {
		return this.getTypedRuleContext(Frame_singleContext, 0);
	}

	BETWEEN_() {
		return this.getToken(SQLiteParser.BETWEEN_, 0);
	}

	frame_left() {
		return this.getTypedRuleContext(Frame_leftContext, 0);
	}

	AND_() {
		return this.getToken(SQLiteParser.AND_, 0);
	}

	frame_right() {
		return this.getTypedRuleContext(Frame_rightContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFrame_clause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFrame_clause(this);
		}
	}
}

class Simple_function_invocationContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_simple_function_invocation;
	}

	simple_func() {
		return this.getTypedRuleContext(Simple_funcContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	STAR() {
		return this.getToken(SQLiteParser.STAR, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSimple_function_invocation(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSimple_function_invocation(this);
		}
	}
}

class Aggregate_function_invocationContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_aggregate_function_invocation;
	}

	aggregate_func() {
		return this.getTypedRuleContext(Aggregate_funcContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	STAR() {
		return this.getToken(SQLiteParser.STAR, 0);
	}

	filter_clause() {
		return this.getTypedRuleContext(Filter_clauseContext, 0);
	}

	DISTINCT_() {
		return this.getToken(SQLiteParser.DISTINCT_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterAggregate_function_invocation(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitAggregate_function_invocation(this);
		}
	}
}

class Window_function_invocationContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_window_function_invocation;
	}

	window_function() {
		return this.getTypedRuleContext(Window_functionContext, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	OVER_() {
		return this.getToken(SQLiteParser.OVER_, 0);
	}

	window_defn() {
		return this.getTypedRuleContext(Window_defnContext, 0);
	}

	window_name() {
		return this.getTypedRuleContext(Window_nameContext, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	STAR() {
		return this.getToken(SQLiteParser.STAR, 0);
	}

	filter_clause() {
		return this.getTypedRuleContext(Filter_clauseContext, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterWindow_function_invocation(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitWindow_function_invocation(this);
		}
	}
}

class Common_table_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_common_table_stmt;
	}

	WITH_() {
		return this.getToken(SQLiteParser.WITH_, 0);
	}

	common_table_expression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Common_table_expressionContext);
		} else {
			return this.getTypedRuleContext(Common_table_expressionContext, i);
		}
	};

	RECURSIVE_() {
		return this.getToken(SQLiteParser.RECURSIVE_, 0);
	}

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCommon_table_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCommon_table_stmt(this);
		}
	}
}

class Order_by_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_order_by_stmt;
	}

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	ordering_term = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Ordering_termContext);
		} else {
			return this.getTypedRuleContext(Ordering_termContext, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOrder_by_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOrder_by_stmt(this);
		}
	}
}

class Limit_stmtContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_limit_stmt;
	}

	LIMIT_() {
		return this.getToken(SQLiteParser.LIMIT_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	OFFSET_() {
		return this.getToken(SQLiteParser.OFFSET_, 0);
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterLimit_stmt(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitLimit_stmt(this);
		}
	}
}

class Ordering_termContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_ordering_term;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	COLLATE_() {
		return this.getToken(SQLiteParser.COLLATE_, 0);
	}

	collation_name() {
		return this.getTypedRuleContext(Collation_nameContext, 0);
	}

	asc_desc() {
		return this.getTypedRuleContext(Asc_descContext, 0);
	}

	NULLS_() {
		return this.getToken(SQLiteParser.NULLS_, 0);
	}

	FIRST_() {
		return this.getToken(SQLiteParser.FIRST_, 0);
	}

	LAST_() {
		return this.getToken(SQLiteParser.LAST_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOrdering_term(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOrdering_term(this);
		}
	}
}

class Asc_descContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_asc_desc;
	}

	ASC_() {
		return this.getToken(SQLiteParser.ASC_, 0);
	}

	DESC_() {
		return this.getToken(SQLiteParser.DESC_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterAsc_desc(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitAsc_desc(this);
		}
	}
}

class Frame_leftContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_frame_left;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	PRECEDING_() {
		return this.getToken(SQLiteParser.PRECEDING_, 0);
	}

	FOLLOWING_() {
		return this.getToken(SQLiteParser.FOLLOWING_, 0);
	}

	CURRENT_() {
		return this.getToken(SQLiteParser.CURRENT_, 0);
	}

	ROW_() {
		return this.getToken(SQLiteParser.ROW_, 0);
	}

	UNBOUNDED_() {
		return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFrame_left(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFrame_left(this);
		}
	}
}

class Frame_rightContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_frame_right;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	PRECEDING_() {
		return this.getToken(SQLiteParser.PRECEDING_, 0);
	}

	FOLLOWING_() {
		return this.getToken(SQLiteParser.FOLLOWING_, 0);
	}

	CURRENT_() {
		return this.getToken(SQLiteParser.CURRENT_, 0);
	}

	ROW_() {
		return this.getToken(SQLiteParser.ROW_, 0);
	}

	UNBOUNDED_() {
		return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFrame_right(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFrame_right(this);
		}
	}
}

class Frame_singleContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_frame_single;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	PRECEDING_() {
		return this.getToken(SQLiteParser.PRECEDING_, 0);
	}

	UNBOUNDED_() {
		return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	}

	CURRENT_() {
		return this.getToken(SQLiteParser.CURRENT_, 0);
	}

	ROW_() {
		return this.getToken(SQLiteParser.ROW_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFrame_single(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFrame_single(this);
		}
	}
}

class Window_functionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_window_function;
	}

	OPEN_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.OPEN_PAR);
		} else {
			return this.getToken(SQLiteParser.OPEN_PAR, i);
		}
	};

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	CLOSE_PAR = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.CLOSE_PAR);
		} else {
			return this.getToken(SQLiteParser.CLOSE_PAR, i);
		}
	};

	OVER_() {
		return this.getToken(SQLiteParser.OVER_, 0);
	}

	order_by_expr_asc_desc() {
		return this.getTypedRuleContext(Order_by_expr_asc_descContext, 0);
	}

	FIRST_VALUE_() {
		return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
	}

	LAST_VALUE_() {
		return this.getToken(SQLiteParser.LAST_VALUE_, 0);
	}

	partition_by() {
		return this.getTypedRuleContext(Partition_byContext, 0);
	}

	frame_clause() {
		return this.getTypedRuleContext(Frame_clauseContext, 0);
	}

	CUME_DIST_() {
		return this.getToken(SQLiteParser.CUME_DIST_, 0);
	}

	PERCENT_RANK_() {
		return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
	}

	order_by_expr() {
		return this.getTypedRuleContext(Order_by_exprContext, 0);
	}

	DENSE_RANK_() {
		return this.getToken(SQLiteParser.DENSE_RANK_, 0);
	}

	RANK_() {
		return this.getToken(SQLiteParser.RANK_, 0);
	}

	ROW_NUMBER_() {
		return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
	}

	LAG_() {
		return this.getToken(SQLiteParser.LAG_, 0);
	}

	LEAD_() {
		return this.getToken(SQLiteParser.LEAD_, 0);
	}

	of_OF_fset() {
		return this.getTypedRuleContext(Of_OF_fsetContext, 0);
	}

	default_DEFAULT__value() {
		return this.getTypedRuleContext(Default_DEFAULT__valueContext, 0);
	}

	NTH_VALUE_() {
		return this.getToken(SQLiteParser.NTH_VALUE_, 0);
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	signed_number() {
		return this.getTypedRuleContext(Signed_numberContext, 0);
	}

	NTILE_() {
		return this.getToken(SQLiteParser.NTILE_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterWindow_function(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitWindow_function(this);
		}
	}
}

class Of_OF_fsetContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_of_OF_fset;
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	signed_number() {
		return this.getTypedRuleContext(Signed_numberContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOf_OF_fset(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOf_OF_fset(this);
		}
	}
}

class Default_DEFAULT__valueContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_default_DEFAULT__value;
	}

	COMMA() {
		return this.getToken(SQLiteParser.COMMA, 0);
	}

	signed_number() {
		return this.getTypedRuleContext(Signed_numberContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterDefault_DEFAULT__value(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitDefault_DEFAULT__value(this);
		}
	}
}

class Partition_byContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_partition_by;
	}

	PARTITION_() {
		return this.getToken(SQLiteParser.PARTITION_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterPartition_by(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitPartition_by(this);
		}
	}
}

class Order_by_exprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_order_by_expr;
	}

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOrder_by_expr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOrder_by_expr(this);
		}
	}
}

class Order_by_expr_asc_descContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_order_by_expr_asc_desc;
	}

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	expr_asc_desc() {
		return this.getTypedRuleContext(Expr_asc_descContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterOrder_by_expr_asc_desc(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitOrder_by_expr_asc_desc(this);
		}
	}
}

class Expr_asc_descContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_expr_asc_desc;
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	asc_desc = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Asc_descContext);
		} else {
			return this.getTypedRuleContext(Asc_descContext, i);
		}
	};

	COMMA = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLiteParser.COMMA);
		} else {
			return this.getToken(SQLiteParser.COMMA, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterExpr_asc_desc(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitExpr_asc_desc(this);
		}
	}
}

class Initial_selectContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_initial_select;
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterInitial_select(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitInitial_select(this);
		}
	}
}

class Recursive__selectContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_recursive__select;
	}

	select_stmt() {
		return this.getTypedRuleContext(Select_stmtContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterRecursive__select(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitRecursive__select(this);
		}
	}
}

class Unary_operatorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_unary_operator;
	}

	MINUS() {
		return this.getToken(SQLiteParser.MINUS, 0);
	}

	PLUS() {
		return this.getToken(SQLiteParser.PLUS, 0);
	}

	TILDE() {
		return this.getToken(SQLiteParser.TILDE, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterUnary_operator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitUnary_operator(this);
		}
	}
}

class Error_messageContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_error_message;
	}

	STRING_LITERAL() {
		return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterError_message(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitError_message(this);
		}
	}
}

class Module_argumentContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_module_argument;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	column_def() {
		return this.getTypedRuleContext(Column_defContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterModule_argument(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitModule_argument(this);
		}
	}
}

class Column_aliasContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_column_alias;
	}

	IDENTIFIER() {
		return this.getToken(SQLiteParser.IDENTIFIER, 0);
	}

	STRING_LITERAL() {
		return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterColumn_alias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitColumn_alias(this);
		}
	}
}

class KeywordContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_keyword;
	}

	ABORT_() {
		return this.getToken(SQLiteParser.ABORT_, 0);
	}

	ACTION_() {
		return this.getToken(SQLiteParser.ACTION_, 0);
	}

	ADD_() {
		return this.getToken(SQLiteParser.ADD_, 0);
	}

	AFTER_() {
		return this.getToken(SQLiteParser.AFTER_, 0);
	}

	ALL_() {
		return this.getToken(SQLiteParser.ALL_, 0);
	}

	ALTER_() {
		return this.getToken(SQLiteParser.ALTER_, 0);
	}

	ANALYZE_() {
		return this.getToken(SQLiteParser.ANALYZE_, 0);
	}

	AND_() {
		return this.getToken(SQLiteParser.AND_, 0);
	}

	AS_() {
		return this.getToken(SQLiteParser.AS_, 0);
	}

	ASC_() {
		return this.getToken(SQLiteParser.ASC_, 0);
	}

	ATTACH_() {
		return this.getToken(SQLiteParser.ATTACH_, 0);
	}

	AUTOINCREMENT_() {
		return this.getToken(SQLiteParser.AUTOINCREMENT_, 0);
	}

	BEFORE_() {
		return this.getToken(SQLiteParser.BEFORE_, 0);
	}

	BEGIN_() {
		return this.getToken(SQLiteParser.BEGIN_, 0);
	}

	BETWEEN_() {
		return this.getToken(SQLiteParser.BETWEEN_, 0);
	}

	BY_() {
		return this.getToken(SQLiteParser.BY_, 0);
	}

	CASCADE_() {
		return this.getToken(SQLiteParser.CASCADE_, 0);
	}

	CASE_() {
		return this.getToken(SQLiteParser.CASE_, 0);
	}

	CAST_() {
		return this.getToken(SQLiteParser.CAST_, 0);
	}

	CHECK_() {
		return this.getToken(SQLiteParser.CHECK_, 0);
	}

	COLLATE_() {
		return this.getToken(SQLiteParser.COLLATE_, 0);
	}

	COLUMN_() {
		return this.getToken(SQLiteParser.COLUMN_, 0);
	}

	COMMIT_() {
		return this.getToken(SQLiteParser.COMMIT_, 0);
	}

	CONFLICT_() {
		return this.getToken(SQLiteParser.CONFLICT_, 0);
	}

	CONSTRAINT_() {
		return this.getToken(SQLiteParser.CONSTRAINT_, 0);
	}

	CREATE_() {
		return this.getToken(SQLiteParser.CREATE_, 0);
	}

	CROSS_() {
		return this.getToken(SQLiteParser.CROSS_, 0);
	}

	CURRENT_DATE_() {
		return this.getToken(SQLiteParser.CURRENT_DATE_, 0);
	}

	CURRENT_TIME_() {
		return this.getToken(SQLiteParser.CURRENT_TIME_, 0);
	}

	CURRENT_TIMESTAMP_() {
		return this.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0);
	}

	DATABASE_() {
		return this.getToken(SQLiteParser.DATABASE_, 0);
	}

	DEFAULT_() {
		return this.getToken(SQLiteParser.DEFAULT_, 0);
	}

	DEFERRABLE_() {
		return this.getToken(SQLiteParser.DEFERRABLE_, 0);
	}

	DEFERRED_() {
		return this.getToken(SQLiteParser.DEFERRED_, 0);
	}

	DELETE_() {
		return this.getToken(SQLiteParser.DELETE_, 0);
	}

	DESC_() {
		return this.getToken(SQLiteParser.DESC_, 0);
	}

	DETACH_() {
		return this.getToken(SQLiteParser.DETACH_, 0);
	}

	DISTINCT_() {
		return this.getToken(SQLiteParser.DISTINCT_, 0);
	}

	DROP_() {
		return this.getToken(SQLiteParser.DROP_, 0);
	}

	EACH_() {
		return this.getToken(SQLiteParser.EACH_, 0);
	}

	ELSE_() {
		return this.getToken(SQLiteParser.ELSE_, 0);
	}

	END_() {
		return this.getToken(SQLiteParser.END_, 0);
	}

	ESCAPE_() {
		return this.getToken(SQLiteParser.ESCAPE_, 0);
	}

	EXCEPT_() {
		return this.getToken(SQLiteParser.EXCEPT_, 0);
	}

	EXCLUSIVE_() {
		return this.getToken(SQLiteParser.EXCLUSIVE_, 0);
	}

	EXISTS_() {
		return this.getToken(SQLiteParser.EXISTS_, 0);
	}

	EXPLAIN_() {
		return this.getToken(SQLiteParser.EXPLAIN_, 0);
	}

	FAIL_() {
		return this.getToken(SQLiteParser.FAIL_, 0);
	}

	FOR_() {
		return this.getToken(SQLiteParser.FOR_, 0);
	}

	FOREIGN_() {
		return this.getToken(SQLiteParser.FOREIGN_, 0);
	}

	FROM_() {
		return this.getToken(SQLiteParser.FROM_, 0);
	}

	FULL_() {
		return this.getToken(SQLiteParser.FULL_, 0);
	}

	GLOB_() {
		return this.getToken(SQLiteParser.GLOB_, 0);
	}

	GROUP_() {
		return this.getToken(SQLiteParser.GROUP_, 0);
	}

	HAVING_() {
		return this.getToken(SQLiteParser.HAVING_, 0);
	}

	IF_() {
		return this.getToken(SQLiteParser.IF_, 0);
	}

	IGNORE_() {
		return this.getToken(SQLiteParser.IGNORE_, 0);
	}

	IMMEDIATE_() {
		return this.getToken(SQLiteParser.IMMEDIATE_, 0);
	}

	IN_() {
		return this.getToken(SQLiteParser.IN_, 0);
	}

	INDEX_() {
		return this.getToken(SQLiteParser.INDEX_, 0);
	}

	INDEXED_() {
		return this.getToken(SQLiteParser.INDEXED_, 0);
	}

	INITIALLY_() {
		return this.getToken(SQLiteParser.INITIALLY_, 0);
	}

	INNER_() {
		return this.getToken(SQLiteParser.INNER_, 0);
	}

	INSERT_() {
		return this.getToken(SQLiteParser.INSERT_, 0);
	}

	INSTEAD_() {
		return this.getToken(SQLiteParser.INSTEAD_, 0);
	}

	INTERSECT_() {
		return this.getToken(SQLiteParser.INTERSECT_, 0);
	}

	INTO_() {
		return this.getToken(SQLiteParser.INTO_, 0);
	}

	IS_() {
		return this.getToken(SQLiteParser.IS_, 0);
	}

	ISNULL_() {
		return this.getToken(SQLiteParser.ISNULL_, 0);
	}

	JOIN_() {
		return this.getToken(SQLiteParser.JOIN_, 0);
	}

	KEY_() {
		return this.getToken(SQLiteParser.KEY_, 0);
	}

	LEFT_() {
		return this.getToken(SQLiteParser.LEFT_, 0);
	}

	LIKE_() {
		return this.getToken(SQLiteParser.LIKE_, 0);
	}

	LIMIT_() {
		return this.getToken(SQLiteParser.LIMIT_, 0);
	}

	MATCH_() {
		return this.getToken(SQLiteParser.MATCH_, 0);
	}

	NATURAL_() {
		return this.getToken(SQLiteParser.NATURAL_, 0);
	}

	NO_() {
		return this.getToken(SQLiteParser.NO_, 0);
	}

	NOT_() {
		return this.getToken(SQLiteParser.NOT_, 0);
	}

	NOTNULL_() {
		return this.getToken(SQLiteParser.NOTNULL_, 0);
	}

	NULL_() {
		return this.getToken(SQLiteParser.NULL_, 0);
	}

	OF_() {
		return this.getToken(SQLiteParser.OF_, 0);
	}

	OFFSET_() {
		return this.getToken(SQLiteParser.OFFSET_, 0);
	}

	ON_() {
		return this.getToken(SQLiteParser.ON_, 0);
	}

	OR_() {
		return this.getToken(SQLiteParser.OR_, 0);
	}

	ORDER_() {
		return this.getToken(SQLiteParser.ORDER_, 0);
	}

	OUTER_() {
		return this.getToken(SQLiteParser.OUTER_, 0);
	}

	PLAN_() {
		return this.getToken(SQLiteParser.PLAN_, 0);
	}

	PRAGMA_() {
		return this.getToken(SQLiteParser.PRAGMA_, 0);
	}

	PRIMARY_() {
		return this.getToken(SQLiteParser.PRIMARY_, 0);
	}

	QUERY_() {
		return this.getToken(SQLiteParser.QUERY_, 0);
	}

	RAISE_() {
		return this.getToken(SQLiteParser.RAISE_, 0);
	}

	RECURSIVE_() {
		return this.getToken(SQLiteParser.RECURSIVE_, 0);
	}

	REFERENCES_() {
		return this.getToken(SQLiteParser.REFERENCES_, 0);
	}

	REGEXP_() {
		return this.getToken(SQLiteParser.REGEXP_, 0);
	}

	REINDEX_() {
		return this.getToken(SQLiteParser.REINDEX_, 0);
	}

	RELEASE_() {
		return this.getToken(SQLiteParser.RELEASE_, 0);
	}

	RENAME_() {
		return this.getToken(SQLiteParser.RENAME_, 0);
	}

	REPLACE_() {
		return this.getToken(SQLiteParser.REPLACE_, 0);
	}

	RESTRICT_() {
		return this.getToken(SQLiteParser.RESTRICT_, 0);
	}

	RIGHT_() {
		return this.getToken(SQLiteParser.RIGHT_, 0);
	}

	ROLLBACK_() {
		return this.getToken(SQLiteParser.ROLLBACK_, 0);
	}

	ROW_() {
		return this.getToken(SQLiteParser.ROW_, 0);
	}

	ROWS_() {
		return this.getToken(SQLiteParser.ROWS_, 0);
	}

	SAVEPOINT_() {
		return this.getToken(SQLiteParser.SAVEPOINT_, 0);
	}

	SELECT_() {
		return this.getToken(SQLiteParser.SELECT_, 0);
	}

	SET_() {
		return this.getToken(SQLiteParser.SET_, 0);
	}

	TABLE_() {
		return this.getToken(SQLiteParser.TABLE_, 0);
	}

	TEMP_() {
		return this.getToken(SQLiteParser.TEMP_, 0);
	}

	TEMPORARY_() {
		return this.getToken(SQLiteParser.TEMPORARY_, 0);
	}

	THEN_() {
		return this.getToken(SQLiteParser.THEN_, 0);
	}

	TO_() {
		return this.getToken(SQLiteParser.TO_, 0);
	}

	TRANSACTION_() {
		return this.getToken(SQLiteParser.TRANSACTION_, 0);
	}

	TRIGGER_() {
		return this.getToken(SQLiteParser.TRIGGER_, 0);
	}

	UNION_() {
		return this.getToken(SQLiteParser.UNION_, 0);
	}

	UNIQUE_() {
		return this.getToken(SQLiteParser.UNIQUE_, 0);
	}

	UPDATE_() {
		return this.getToken(SQLiteParser.UPDATE_, 0);
	}

	USING_() {
		return this.getToken(SQLiteParser.USING_, 0);
	}

	VACUUM_() {
		return this.getToken(SQLiteParser.VACUUM_, 0);
	}

	VALUES_() {
		return this.getToken(SQLiteParser.VALUES_, 0);
	}

	VIEW_() {
		return this.getToken(SQLiteParser.VIEW_, 0);
	}

	VIRTUAL_() {
		return this.getToken(SQLiteParser.VIRTUAL_, 0);
	}

	WHEN_() {
		return this.getToken(SQLiteParser.WHEN_, 0);
	}

	WHERE_() {
		return this.getToken(SQLiteParser.WHERE_, 0);
	}

	WITH_() {
		return this.getToken(SQLiteParser.WITH_, 0);
	}

	WITHOUT_() {
		return this.getToken(SQLiteParser.WITHOUT_, 0);
	}

	FIRST_VALUE_() {
		return this.getToken(SQLiteParser.FIRST_VALUE_, 0);
	}

	OVER_() {
		return this.getToken(SQLiteParser.OVER_, 0);
	}

	PARTITION_() {
		return this.getToken(SQLiteParser.PARTITION_, 0);
	}

	RANGE_() {
		return this.getToken(SQLiteParser.RANGE_, 0);
	}

	PRECEDING_() {
		return this.getToken(SQLiteParser.PRECEDING_, 0);
	}

	UNBOUNDED_() {
		return this.getToken(SQLiteParser.UNBOUNDED_, 0);
	}

	CURRENT_() {
		return this.getToken(SQLiteParser.CURRENT_, 0);
	}

	FOLLOWING_() {
		return this.getToken(SQLiteParser.FOLLOWING_, 0);
	}

	CUME_DIST_() {
		return this.getToken(SQLiteParser.CUME_DIST_, 0);
	}

	DENSE_RANK_() {
		return this.getToken(SQLiteParser.DENSE_RANK_, 0);
	}

	LAG_() {
		return this.getToken(SQLiteParser.LAG_, 0);
	}

	LAST_VALUE_() {
		return this.getToken(SQLiteParser.LAST_VALUE_, 0);
	}

	LEAD_() {
		return this.getToken(SQLiteParser.LEAD_, 0);
	}

	NTH_VALUE_() {
		return this.getToken(SQLiteParser.NTH_VALUE_, 0);
	}

	NTILE_() {
		return this.getToken(SQLiteParser.NTILE_, 0);
	}

	PERCENT_RANK_() {
		return this.getToken(SQLiteParser.PERCENT_RANK_, 0);
	}

	RANK_() {
		return this.getToken(SQLiteParser.RANK_, 0);
	}

	ROW_NUMBER_() {
		return this.getToken(SQLiteParser.ROW_NUMBER_, 0);
	}

	GENERATED_() {
		return this.getToken(SQLiteParser.GENERATED_, 0);
	}

	ALWAYS_() {
		return this.getToken(SQLiteParser.ALWAYS_, 0);
	}

	STORED_() {
		return this.getToken(SQLiteParser.STORED_, 0);
	}

	TRUE_() {
		return this.getToken(SQLiteParser.TRUE_, 0);
	}

	FALSE_() {
		return this.getToken(SQLiteParser.FALSE_, 0);
	}

	WINDOW_() {
		return this.getToken(SQLiteParser.WINDOW_, 0);
	}

	NULLS_() {
		return this.getToken(SQLiteParser.NULLS_, 0);
	}

	FIRST_() {
		return this.getToken(SQLiteParser.FIRST_, 0);
	}

	LAST_() {
		return this.getToken(SQLiteParser.LAST_, 0);
	}

	FILTER_() {
		return this.getToken(SQLiteParser.FILTER_, 0);
	}

	GROUPS_() {
		return this.getToken(SQLiteParser.GROUPS_, 0);
	}

	EXCLUDE_() {
		return this.getToken(SQLiteParser.EXCLUDE_, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitKeyword(this);
		}
	}
}

class NameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitName(this);
		}
	}
}

class Function_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_function_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFunction_name(this);
		}
	}
}

class Schema_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_schema_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSchema_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSchema_name(this);
		}
	}
}

class Table_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_name(this);
		}
	}
}

class Table_or_index_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_or_index_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_or_index_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_or_index_name(this);
		}
	}
}

class New_table_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_new_table_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterNew_table_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitNew_table_name(this);
		}
	}
}

class Column_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_column_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterColumn_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitColumn_name(this);
		}
	}
}

class Collation_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_collation_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterCollation_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitCollation_name(this);
		}
	}
}

class Foreign_tableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_foreign_table;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterForeign_table(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitForeign_table(this);
		}
	}
}

class Index_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_index_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitIndex_name(this);
		}
	}
}

class Trigger_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_trigger_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTrigger_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTrigger_name(this);
		}
	}
}

class View_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_view_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterView_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitView_name(this);
		}
	}
}

class Module_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_module_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitModule_name(this);
		}
	}
}

class Pragma_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_pragma_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterPragma_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitPragma_name(this);
		}
	}
}

class Savepoint_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_savepoint_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSavepoint_name(this);
		}
	}
}

class Table_aliasContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_alias;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_alias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_alias(this);
		}
	}
}

class Transaction_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_transaction_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTransaction_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTransaction_name(this);
		}
	}
}

class Window_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_window_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterWindow_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitWindow_name(this);
		}
	}
}

class AliasContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_alias;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterAlias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitAlias(this);
		}
	}
}

class FilenameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_filename;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterFilename(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitFilename(this);
		}
	}
}

class Base_window_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_base_window_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterBase_window_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitBase_window_name(this);
		}
	}
}

class Simple_funcContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_simple_func;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterSimple_func(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitSimple_func(this);
		}
	}
}

class Aggregate_funcContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_aggregate_func;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterAggregate_func(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitAggregate_func(this);
		}
	}
}

class Table_function_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_table_function_name;
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterTable_function_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitTable_function_name(this);
		}
	}
}

class Any_nameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLiteParser.RULE_any_name;
	}

	IDENTIFIER() {
		return this.getToken(SQLiteParser.IDENTIFIER, 0);
	}

	keyword() {
		return this.getTypedRuleContext(KeywordContext, 0);
	}

	STRING_LITERAL() {
		return this.getToken(SQLiteParser.STRING_LITERAL, 0);
	}

	OPEN_PAR() {
		return this.getToken(SQLiteParser.OPEN_PAR, 0);
	}

	any_name() {
		return this.getTypedRuleContext(Any_nameContext, 0);
	}

	CLOSE_PAR() {
		return this.getToken(SQLiteParser.CLOSE_PAR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.enterAny_name(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLiteParserListener) {
			listener.exitAny_name(this);
		}
	}
}

SQLiteParser.ParseContext = ParseContext;
SQLiteParser.Sql_stmt_listContext = Sql_stmt_listContext;
SQLiteParser.Sql_stmtContext = Sql_stmtContext;
SQLiteParser.Indexed_columnContext = Indexed_columnContext;
SQLiteParser.Column_defContext = Column_defContext;
SQLiteParser.Type_nameContext = Type_nameContext;
SQLiteParser.Column_constraintContext = Column_constraintContext;
SQLiteParser.Signed_numberContext = Signed_numberContext;
SQLiteParser.Table_constraintContext = Table_constraintContext;
SQLiteParser.Foreign_key_clauseContext = Foreign_key_clauseContext;
SQLiteParser.Conflict_clauseContext = Conflict_clauseContext;
SQLiteParser.With_clauseContext = With_clauseContext;
SQLiteParser.Cte_table_nameContext = Cte_table_nameContext;
SQLiteParser.Recursive_cteContext = Recursive_cteContext;
SQLiteParser.Common_table_expressionContext = Common_table_expressionContext;
SQLiteParser.Delete_stmtContext = Delete_stmtContext;
SQLiteParser.ExprContext = ExprContext;
SQLiteParser.Raise_functionContext = Raise_functionContext;
SQLiteParser.Literal_valueContext = Literal_valueContext;
SQLiteParser.Insert_stmtContext = Insert_stmtContext;
SQLiteParser.Upsert_clauseContext = Upsert_clauseContext;
SQLiteParser.Pragma_valueContext = Pragma_valueContext;
SQLiteParser.Select_stmtContext = Select_stmtContext;
SQLiteParser.Join_clauseContext = Join_clauseContext;
SQLiteParser.Select_coreContext = Select_coreContext;
SQLiteParser.Factored_select_stmtContext = Factored_select_stmtContext;
SQLiteParser.Simple_select_stmtContext = Simple_select_stmtContext;
SQLiteParser.Compound_select_stmtContext = Compound_select_stmtContext;
SQLiteParser.Table_or_subqueryContext = Table_or_subqueryContext;
SQLiteParser.Result_columnContext = Result_columnContext;
SQLiteParser.Join_operatorContext = Join_operatorContext;
SQLiteParser.Join_constraintContext = Join_constraintContext;
SQLiteParser.Compound_operatorContext = Compound_operatorContext;
SQLiteParser.Update_stmtContext = Update_stmtContext;
SQLiteParser.Column_name_listContext = Column_name_listContext;
SQLiteParser.Qualified_table_nameContext = Qualified_table_nameContext;
SQLiteParser.Filter_clauseContext = Filter_clauseContext;
SQLiteParser.Window_defnContext = Window_defnContext;
SQLiteParser.Over_clauseContext = Over_clauseContext;
SQLiteParser.Frame_specContext = Frame_specContext;
SQLiteParser.Frame_clauseContext = Frame_clauseContext;
SQLiteParser.Simple_function_invocationContext = Simple_function_invocationContext;
SQLiteParser.Aggregate_function_invocationContext = Aggregate_function_invocationContext;
SQLiteParser.Window_function_invocationContext = Window_function_invocationContext;
SQLiteParser.Common_table_stmtContext = Common_table_stmtContext;
SQLiteParser.Order_by_stmtContext = Order_by_stmtContext;
SQLiteParser.Limit_stmtContext = Limit_stmtContext;
SQLiteParser.Ordering_termContext = Ordering_termContext;
SQLiteParser.Asc_descContext = Asc_descContext;
SQLiteParser.Frame_leftContext = Frame_leftContext;
SQLiteParser.Frame_rightContext = Frame_rightContext;
SQLiteParser.Frame_singleContext = Frame_singleContext;
SQLiteParser.Window_functionContext = Window_functionContext;
SQLiteParser.Of_OF_fsetContext = Of_OF_fsetContext;
SQLiteParser.Default_DEFAULT__valueContext = Default_DEFAULT__valueContext;
SQLiteParser.Partition_byContext = Partition_byContext;
SQLiteParser.Order_by_exprContext = Order_by_exprContext;
SQLiteParser.Order_by_expr_asc_descContext = Order_by_expr_asc_descContext;
SQLiteParser.Expr_asc_descContext = Expr_asc_descContext;
SQLiteParser.Initial_selectContext = Initial_selectContext;
SQLiteParser.Recursive__selectContext = Recursive__selectContext;
SQLiteParser.Unary_operatorContext = Unary_operatorContext;
SQLiteParser.Error_messageContext = Error_messageContext;
SQLiteParser.Module_argumentContext = Module_argumentContext;
SQLiteParser.Column_aliasContext = Column_aliasContext;
SQLiteParser.KeywordContext = KeywordContext;
SQLiteParser.NameContext = NameContext;
SQLiteParser.Function_nameContext = Function_nameContext;
SQLiteParser.Schema_nameContext = Schema_nameContext;
SQLiteParser.Table_nameContext = Table_nameContext;
SQLiteParser.Table_or_index_nameContext = Table_or_index_nameContext;
SQLiteParser.New_table_nameContext = New_table_nameContext;
SQLiteParser.Column_nameContext = Column_nameContext;
SQLiteParser.Collation_nameContext = Collation_nameContext;
SQLiteParser.Foreign_tableContext = Foreign_tableContext;
SQLiteParser.Index_nameContext = Index_nameContext;
SQLiteParser.Trigger_nameContext = Trigger_nameContext;
SQLiteParser.View_nameContext = View_nameContext;
SQLiteParser.Module_nameContext = Module_nameContext;
SQLiteParser.Pragma_nameContext = Pragma_nameContext;
SQLiteParser.Savepoint_nameContext = Savepoint_nameContext;
SQLiteParser.Table_aliasContext = Table_aliasContext;
SQLiteParser.Transaction_nameContext = Transaction_nameContext;
SQLiteParser.Window_nameContext = Window_nameContext;
SQLiteParser.AliasContext = AliasContext;
SQLiteParser.FilenameContext = FilenameContext;
SQLiteParser.Base_window_nameContext = Base_window_nameContext;
SQLiteParser.Simple_funcContext = Simple_funcContext;
SQLiteParser.Aggregate_funcContext = Aggregate_funcContext;
SQLiteParser.Table_function_nameContext = Table_function_nameContext;
SQLiteParser.Any_nameContext = Any_nameContext;
