import antlr4 from "antlr4";
export default class SQLiteParserListener extends antlr4.tree.ParseTreeListener {
    enterParse(ctx: any): void;
    exitParse(ctx: any): void;
    enterSql_stmt_list(ctx: any): void;
    exitSql_stmt_list(ctx: any): void;
    enterSql_stmt(ctx: any): void;
    exitSql_stmt(ctx: any): void;
    enterAlter_table_stmt(ctx: any): void;
    exitAlter_table_stmt(ctx: any): void;
    enterAnalyze_stmt(ctx: any): void;
    exitAnalyze_stmt(ctx: any): void;
    enterAttach_stmt(ctx: any): void;
    exitAttach_stmt(ctx: any): void;
    enterBegin_stmt(ctx: any): void;
    exitBegin_stmt(ctx: any): void;
    enterCommit_stmt(ctx: any): void;
    exitCommit_stmt(ctx: any): void;
    enterRollback_stmt(ctx: any): void;
    exitRollback_stmt(ctx: any): void;
    enterSavepoint_stmt(ctx: any): void;
    exitSavepoint_stmt(ctx: any): void;
    enterRelease_stmt(ctx: any): void;
    exitRelease_stmt(ctx: any): void;
    enterCreate_index_stmt(ctx: any): void;
    exitCreate_index_stmt(ctx: any): void;
    enterIndexed_column(ctx: any): void;
    exitIndexed_column(ctx: any): void;
    enterCreate_table_stmt(ctx: any): void;
    exitCreate_table_stmt(ctx: any): void;
    enterColumn_def(ctx: any): void;
    exitColumn_def(ctx: any): void;
    enterType_name(ctx: any): void;
    exitType_name(ctx: any): void;
    enterColumn_constraint(ctx: any): void;
    exitColumn_constraint(ctx: any): void;
    enterSigned_number(ctx: any): void;
    exitSigned_number(ctx: any): void;
    enterTable_constraint(ctx: any): void;
    exitTable_constraint(ctx: any): void;
    enterForeign_key_clause(ctx: any): void;
    exitForeign_key_clause(ctx: any): void;
    enterConflict_clause(ctx: any): void;
    exitConflict_clause(ctx: any): void;
    enterCreate_trigger_stmt(ctx: any): void;
    exitCreate_trigger_stmt(ctx: any): void;
    enterCreate_view_stmt(ctx: any): void;
    exitCreate_view_stmt(ctx: any): void;
    enterCreate_virtual_table_stmt(ctx: any): void;
    exitCreate_virtual_table_stmt(ctx: any): void;
    enterWith_clause(ctx: any): void;
    exitWith_clause(ctx: any): void;
    enterCte_table_name(ctx: any): void;
    exitCte_table_name(ctx: any): void;
    enterRecursive_cte(ctx: any): void;
    exitRecursive_cte(ctx: any): void;
    enterCommon_table_expression(ctx: any): void;
    exitCommon_table_expression(ctx: any): void;
    enterDelete_stmt(ctx: any): void;
    exitDelete_stmt(ctx: any): void;
    enterDelete_stmt_limited(ctx: any): void;
    exitDelete_stmt_limited(ctx: any): void;
    enterDetach_stmt(ctx: any): void;
    exitDetach_stmt(ctx: any): void;
    enterDrop_stmt(ctx: any): void;
    exitDrop_stmt(ctx: any): void;
    enterExpr(ctx: any): void;
    exitExpr(ctx: any): void;
    enterRaise_function(ctx: any): void;
    exitRaise_function(ctx: any): void;
    enterLiteral_value(ctx: any): void;
    exitLiteral_value(ctx: any): void;
    enterInsert_stmt(ctx: any): void;
    exitInsert_stmt(ctx: any): void;
    enterReturning_clause(ctx: any): void;
    exitReturning_clause(ctx: any): void;
    enterUpsert_clause(ctx: any): void;
    exitUpsert_clause(ctx: any): void;
    enterPragma_stmt(ctx: any): void;
    exitPragma_stmt(ctx: any): void;
    enterPragma_value(ctx: any): void;
    exitPragma_value(ctx: any): void;
    enterReindex_stmt(ctx: any): void;
    exitReindex_stmt(ctx: any): void;
    enterSelect_stmt(ctx: any): void;
    exitSelect_stmt(ctx: any): void;
    enterJoin_clause(ctx: any): void;
    exitJoin_clause(ctx: any): void;
    enterSelect_core(ctx: any): void;
    exitSelect_core(ctx: any): void;
    enterFactored_select_stmt(ctx: any): void;
    exitFactored_select_stmt(ctx: any): void;
    enterSimple_select_stmt(ctx: any): void;
    exitSimple_select_stmt(ctx: any): void;
    enterCompound_select_stmt(ctx: any): void;
    exitCompound_select_stmt(ctx: any): void;
    enterTable_or_subquery(ctx: any): void;
    exitTable_or_subquery(ctx: any): void;
    enterResult_column(ctx: any): void;
    exitResult_column(ctx: any): void;
    enterJoin_operator(ctx: any): void;
    exitJoin_operator(ctx: any): void;
    enterJoin_constraint(ctx: any): void;
    exitJoin_constraint(ctx: any): void;
    enterCompound_operator(ctx: any): void;
    exitCompound_operator(ctx: any): void;
    enterUpdate_stmt(ctx: any): void;
    exitUpdate_stmt(ctx: any): void;
    enterColumn_name_list(ctx: any): void;
    exitColumn_name_list(ctx: any): void;
    enterUpdate_stmt_limited(ctx: any): void;
    exitUpdate_stmt_limited(ctx: any): void;
    enterQualified_table_name(ctx: any): void;
    exitQualified_table_name(ctx: any): void;
    enterVacuum_stmt(ctx: any): void;
    exitVacuum_stmt(ctx: any): void;
    enterFilter_clause(ctx: any): void;
    exitFilter_clause(ctx: any): void;
    enterWindow_defn(ctx: any): void;
    exitWindow_defn(ctx: any): void;
    enterOver_clause(ctx: any): void;
    exitOver_clause(ctx: any): void;
    enterFrame_spec(ctx: any): void;
    exitFrame_spec(ctx: any): void;
    enterFrame_clause(ctx: any): void;
    exitFrame_clause(ctx: any): void;
    enterSimple_function_invocation(ctx: any): void;
    exitSimple_function_invocation(ctx: any): void;
    enterAggregate_function_invocation(ctx: any): void;
    exitAggregate_function_invocation(ctx: any): void;
    enterWindow_function_invocation(ctx: any): void;
    exitWindow_function_invocation(ctx: any): void;
    enterCommon_table_stmt(ctx: any): void;
    exitCommon_table_stmt(ctx: any): void;
    enterOrder_by_stmt(ctx: any): void;
    exitOrder_by_stmt(ctx: any): void;
    enterLimit_stmt(ctx: any): void;
    exitLimit_stmt(ctx: any): void;
    enterOrdering_term(ctx: any): void;
    exitOrdering_term(ctx: any): void;
    enterAsc_desc(ctx: any): void;
    exitAsc_desc(ctx: any): void;
    enterFrame_left(ctx: any): void;
    exitFrame_left(ctx: any): void;
    enterFrame_right(ctx: any): void;
    exitFrame_right(ctx: any): void;
    enterFrame_single(ctx: any): void;
    exitFrame_single(ctx: any): void;
    enterWindow_function(ctx: any): void;
    exitWindow_function(ctx: any): void;
    enterOffset(ctx: any): void;
    exitOffset(ctx: any): void;
    enterDefault_value(ctx: any): void;
    exitDefault_value(ctx: any): void;
    enterPartition_by(ctx: any): void;
    exitPartition_by(ctx: any): void;
    enterOrder_by_expr(ctx: any): void;
    exitOrder_by_expr(ctx: any): void;
    enterOrder_by_expr_asc_desc(ctx: any): void;
    exitOrder_by_expr_asc_desc(ctx: any): void;
    enterExpr_asc_desc(ctx: any): void;
    exitExpr_asc_desc(ctx: any): void;
    enterInitial_select(ctx: any): void;
    exitInitial_select(ctx: any): void;
    enterRecursive_select(ctx: any): void;
    exitRecursive_select(ctx: any): void;
    enterUnary_operator(ctx: any): void;
    exitUnary_operator(ctx: any): void;
    enterError_message(ctx: any): void;
    exitError_message(ctx: any): void;
    enterModule_argument(ctx: any): void;
    exitModule_argument(ctx: any): void;
    enterColumn_alias(ctx: any): void;
    exitColumn_alias(ctx: any): void;
    enterKeyword(ctx: any): void;
    exitKeyword(ctx: any): void;
    enterName(ctx: any): void;
    exitName(ctx: any): void;
    enterFunction_name(ctx: any): void;
    exitFunction_name(ctx: any): void;
    enterSchema_name(ctx: any): void;
    exitSchema_name(ctx: any): void;
    enterTable_name(ctx: any): void;
    exitTable_name(ctx: any): void;
    enterTable_or_index_name(ctx: any): void;
    exitTable_or_index_name(ctx: any): void;
    enterColumn_name(ctx: any): void;
    exitColumn_name(ctx: any): void;
    enterCollation_name(ctx: any): void;
    exitCollation_name(ctx: any): void;
    enterForeign_table(ctx: any): void;
    exitForeign_table(ctx: any): void;
    enterIndex_name(ctx: any): void;
    exitIndex_name(ctx: any): void;
    enterTrigger_name(ctx: any): void;
    exitTrigger_name(ctx: any): void;
    enterView_name(ctx: any): void;
    exitView_name(ctx: any): void;
    enterModule_name(ctx: any): void;
    exitModule_name(ctx: any): void;
    enterPragma_name(ctx: any): void;
    exitPragma_name(ctx: any): void;
    enterSavepoint_name(ctx: any): void;
    exitSavepoint_name(ctx: any): void;
    enterTable_alias(ctx: any): void;
    exitTable_alias(ctx: any): void;
    enterTransaction_name(ctx: any): void;
    exitTransaction_name(ctx: any): void;
    enterWindow_name(ctx: any): void;
    exitWindow_name(ctx: any): void;
    enterAlias(ctx: any): void;
    exitAlias(ctx: any): void;
    enterFilename(ctx: any): void;
    exitFilename(ctx: any): void;
    enterBase_window_name(ctx: any): void;
    exitBase_window_name(ctx: any): void;
    enterSimple_func(ctx: any): void;
    exitSimple_func(ctx: any): void;
    enterAggregate_func(ctx: any): void;
    exitAggregate_func(ctx: any): void;
    enterTable_function_name(ctx: any): void;
    exitTable_function_name(ctx: any): void;
    enterAny_name(ctx: any): void;
    exitAny_name(ctx: any): void;
}
